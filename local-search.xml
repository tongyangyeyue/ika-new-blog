<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>go中的bson包中的E、D、M、A</title>
    <link href="/ika-new-blog/2021/01/19/golang-mongo-bson/"/>
    <url>/ika-new-blog/2021/01/19/golang-mongo-bson/</url>
    
    <content type="html"><![CDATA[<p>在mongodb官方提供的go语言驱动中，要操作数据库免不了要和bson包中的E、D、M、A这4个东西打交道。由于迷惑的命名，这里就简单说明一下他们。</p><h3 id="bson-E"><a href="#bson-E" class="headerlink" title="bson.E"></a>bson.E</h3><p>bson.E其实是一个struct，他的定义是这样的</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> <span class="hljs-type">E</span> struct &#123;<br><span class="hljs-type">Key</span>   string<br><span class="hljs-type">Value</span> interface&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也就是说，他只能是一个指定Key&#x2F;Value的元素，所以使用的时候也很简单，也一般不单独使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">orgCode := bson.E&#123;<br>Key:   <span class="hljs-string">&quot;orgCode&quot;</span>,<br>Value: <span class="hljs-string">&quot;general&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="bson-D"><a href="#bson-D" class="headerlink" title="bson.D"></a>bson.D</h3><p>bson.D是一个bson.D的数组，也是我们比较常见的一种使用格式</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">type</span> <span class="hljs-type">D </span>[]E<br></code></pre></td></tr></table></figure><p>使用时，也就是数组的使用方式</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">fndOrg</span> <span class="hljs-operator">:=</span> <span class="hljs-variable">bson</span><span class="hljs-operator">.</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Key</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;orgCode&quot;</span><span class="hljs-operator">,</span> <span class="hljs-variable">Value</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;general&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Key</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;orgName&quot;</span><span class="hljs-operator">,</span> <span class="hljs-variable">Value</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;总部&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-operator">//</span> 或者<br><span class="hljs-variable">fndJob</span> <span class="hljs-operator">:=</span> <span class="hljs-variable">bson</span><span class="hljs-operator">.</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;jobCode&quot;</span><span class="hljs-operator">,</span> <span class="hljs-string">&quot;manager&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;jobName&quot;</span><span class="hljs-operator">,</span> <span class="hljs-string">&quot;经理&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-variable">cur</span><span class="hljs-operator">,</span> <span class="hljs-variable">err</span> <span class="hljs-operator">:=</span> <span class="hljs-variable">collection</span><span class="hljs-operator">.</span><span class="hljs-built_in">Find</span><span class="hljs-punctuation">(</span><span class="hljs-variable">ctx</span><span class="hljs-operator">,</span> <span class="hljs-variable">bson</span><span class="hljs-operator">.</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;jobCode&quot;</span><span class="hljs-operator">,</span> <span class="hljs-string">&quot;manager&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h3 id="bson-M"><a href="#bson-M" class="headerlink" title="bson.M"></a>bson.M</h3><p>bson.M其实是map类型，他的功能和bson.D类似，不过bson.M顺序和声明的顺序可能不同</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> M <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>使用时</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">fndOrg := bson.M&#123;<br>&quot;orgCode&quot;: <span class="hljs-string">&quot;general&quot;</span>,<br><span class="hljs-string">&quot;orgName&quot;</span>: <span class="hljs-string">&quot;总部&quot;</span>,<br>&#125;<br><br>cur, err := collection.<span class="hljs-built_in">Find</span>(ctx, fndOrg)<br></code></pre></td></tr></table></figure><h3 id="bson-A"><a href="#bson-A" class="headerlink" title="bson.A"></a>bson.A</h3><p>bson.A是一个数组，多数使用情况是对应bson中的数组，它的作用和bson.D不同</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">type</span> <span class="hljs-type">A </span>[]<span class="hljs-keyword">interface</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>使用方式</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">result, err := collection.UpdateOne(ctx, <span class="hljs-keyword">bson.D&#123;</span><br><span class="hljs-keyword"></span>&#123;<span class="hljs-string">&quot;jobCode&quot;</span>, <span class="hljs-string">&quot;manager&quot;</span>&#125;,<br>&#125;, <span class="hljs-keyword">bson.D&#123;</span><br><span class="hljs-keyword"></span>&#123;<span class="hljs-string">&quot;$set&quot;</span>, <span class="hljs-keyword">bson.D&#123;</span><br><span class="hljs-keyword"></span>&#123;<span class="hljs-string">&quot;orgList&quot;</span>, <span class="hljs-keyword">bson.A&#123;</span><br><span class="hljs-keyword"></span><span class="hljs-string">&quot;general&quot;</span>, <span class="hljs-string">&quot;east&quot;</span>, <span class="hljs-string">&quot;north&quot;</span>, <span class="hljs-string">&quot;south&quot;</span>,<br>&#125;&#125;,<br>&#125;&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>golang mongo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>activiti流程退回</title>
    <link href="/ika-new-blog/2021/01/18/activiti-backward/"/>
    <url>/ika-new-blog/2021/01/18/activiti-backward/</url>
    
    <content type="html"><![CDATA[<p>activiti 默认是没有标准退回功能的，然而在业务需求是要一个退回功能，而且他们还不想自己拖一个退回的线去实现退回，没办法只能做一个通用一点的退回给他们使用。</p><h3 id="activiti-流程退回"><a href="#activiti-流程退回" class="headerlink" title="activiti 流程退回"></a>activiti 流程退回</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.definesys.mpaas.common.exception.MpaasBusinessException;<br><span class="hljs-keyword">import</span> org.activiti.bpmn.model.FlowElement;<br><span class="hljs-keyword">import</span> org.activiti.bpmn.model.FlowNode;<br><span class="hljs-keyword">import</span> org.activiti.bpmn.model.SequenceFlow;<br><span class="hljs-keyword">import</span> org.activiti.engine.HistoryService;<br><span class="hljs-keyword">import</span> org.activiti.engine.RepositoryService;<br><span class="hljs-keyword">import</span> org.activiti.engine.RuntimeService;<br><span class="hljs-keyword">import</span> org.activiti.engine.TaskService;<br><span class="hljs-keyword">import</span> org.activiti.engine.history.HistoricTaskInstance;<br><span class="hljs-keyword">import</span> org.activiti.engine.impl.interceptor.Command;<br><span class="hljs-keyword">import</span> org.activiti.engine.impl.interceptor.CommandContext;<br><span class="hljs-keyword">import</span> org.activiti.engine.impl.persistence.entity.ExecutionEntity;<br><span class="hljs-keyword">import</span> org.activiti.engine.impl.persistence.entity.TaskEntity;<br><span class="hljs-keyword">import</span> org.activiti.engine.task.Task;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BackWardCmd</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span>&lt;String&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> Task task;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BackWardCmd</span><span class="hljs-params">(Task task)</span> &#123;<br>        <span class="hljs-built_in">this</span>.task = task;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">execute</span><span class="hljs-params">(CommandContext commandContext)</span> &#123;<br>        <span class="hljs-type">FlowElement</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getPreNode(<span class="hljs-built_in">this</span>.task, commandContext);<br>        <span class="hljs-keyword">if</span> (element == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MpaasBusinessException</span>(<span class="hljs-string">&quot;该节点不能进行退回&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">SequenceFlow</span> <span class="hljs-variable">flow</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.findAcessSequenceFlow((FlowNode) element);<br>        <span class="hljs-type">ExecutionEntity</span> <span class="hljs-variable">currentEntry</span> <span class="hljs-operator">=</span> commandContext.getExecutionEntityManager().findById(task.getExecutionId());<br><br>        <span class="hljs-type">ExecutionEntity</span> <span class="hljs-variable">parentExecutionEntry</span> <span class="hljs-operator">=</span> currentEntry.getParent();<br><br>        commandContext.getExecutionEntityManager().deleteChildExecutions(parentExecutionEntry, <span class="hljs-string">&quot;backWard&quot;</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-type">ExecutionEntity</span> <span class="hljs-variable">childEntry</span> <span class="hljs-operator">=</span> commandContext.getExecutionEntityManager().createChildExecution(parentExecutionEntry);<br>        childEntry.setCurrentFlowElement(flow);<br>        commandContext.getAgenda().planContinueProcessOperation(childEntry);<br>        <span class="hljs-keyword">return</span> childEntry.getId();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> FlowElement <span class="hljs-title function_">getPreNode</span><span class="hljs-params">(Task task, CommandContext context)</span> &#123;<br>        <span class="hljs-type">HistoryService</span> <span class="hljs-variable">historyService</span> <span class="hljs-operator">=</span> context.getProcessEngineConfiguration().getHistoryService();<br>        List&lt;HistoricTaskInstance&gt; items = historyService.createHistoricTaskInstanceQuery()<br>                .processInstanceId(task.getProcessInstanceId())<br>                .orderByHistoricTaskInstanceStartTime()<br>                .desc()<br>                .list();<br>        <span class="hljs-keyword">if</span> (items == <span class="hljs-literal">null</span> || items.size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MpaasBusinessException</span>(<span class="hljs-string">&quot;未找到上一节点，无法退回&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">currentNodeId</span> <span class="hljs-operator">=</span> task.getTaskDefinitionKey();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">preNodeId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; items.size(); ++i) &#123;<br>            <span class="hljs-type">HistoricTaskInstance</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> items.get(i);<br>            <span class="hljs-keyword">if</span> (currentNodeId.equals(item.getTaskDefinitionKey()) || <span class="hljs-string">&quot;reject&quot;</span>.equals(item.getDeleteReason()) || <span class="hljs-string">&quot;backWard&quot;</span>.equals(item.getDeleteReason())) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            preNodeId = item.getTaskDefinitionKey();<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (preNodeId == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">RepositoryService</span> <span class="hljs-variable">repositoryService</span> <span class="hljs-operator">=</span> context.getProcessEngineConfiguration().getRepositoryService();<br>        org.activiti.bpmn.model.<span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> repositoryService.getBpmnModel(task.getProcessDefinitionId()).getMainProcess();<br>        <span class="hljs-type">FlowElement</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> process.getFlowElement(preNodeId);<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> SequenceFlow <span class="hljs-title function_">findAcessSequenceFlow</span><span class="hljs-params">(FlowNode node)</span> &#123;<br>        List&lt;SequenceFlow&gt; flows = node.getIncomingFlows();<br>        <span class="hljs-keyword">if</span> (flows == <span class="hljs-literal">null</span> || flows.size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MpaasBusinessException</span>(<span class="hljs-string">&quot;该节点不能进行退回&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//找没有加条件的连线</span><br>        <span class="hljs-keyword">for</span> (SequenceFlow flow : flows) &#123;<br>            <span class="hljs-keyword">if</span> (flow.getConditionExpression() == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> flow;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果都没有选择第一条</span><br>        <span class="hljs-keyword">return</span> flows.get(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>调用方法很简单。直接使用managementService进行调用，其中task为谁点的退回按钮，就是谁的task。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">managementService.executeCommand(<span class="hljs-keyword">new</span> BackWardCmd(<span class="hljs-keyword">task</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>activiti</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rest-template</title>
    <link href="/ika-new-blog/2021/01/15/rest-template/"/>
    <url>/ika-new-blog/2021/01/15/rest-template/</url>
    
    <content type="html"><![CDATA[<h3 id="构建restTemplate"><a href="#构建restTemplate" class="headerlink" title="构建restTemplate"></a>构建restTemplate</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestTemplateConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">RestTemplate</span> <span class="hljs-title function_">restTemplate1</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//或者</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">RestTemplate</span> <span class="hljs-title function_">restTemplate2</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplateBuilder</span>().<span class="hljs-title function_">setConnectTimeout</span>(<span class="hljs-title class_">Duration</span>.<span class="hljs-title function_">ofSeconds</span>(<span class="hljs-number">5</span>))<br>                .<span class="hljs-title function_">setReadTimeout</span>(<span class="hljs-title class_">Duration</span>.<span class="hljs-title function_">ofSeconds</span>(<span class="hljs-number">2</span>)).<span class="hljs-title function_">build</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="POST使用application-x-www-form-urlencoded方式"><a href="#POST使用application-x-www-form-urlencoded方式" class="headerlink" title="POST使用application&#x2F;x-www-form-urlencoded方式"></a>POST使用application&#x2F;x-www-form-urlencoded方式</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">MultiValueMap&lt;String,<span class="hljs-keyword">Object</span>&gt; requestParam = <span class="hljs-built_in">new</span> LinkedMultiValueMap&lt;&gt;();<br>requestParam.<span class="hljs-keyword">add</span>(&quot;grant_type&quot;,&quot;authorization_code&quot;);<br>requestParam.<span class="hljs-keyword">add</span>(&quot;code&quot;,code);<br>requestParam.<span class="hljs-keyword">add</span>(&quot;redirect_uri&quot;,redirectUri);<br>HttpHeaders headers = <span class="hljs-built_in">new</span> HttpHeaders();<br>headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);<br>String authHeader = <span class="hljs-built_in">new</span> BASE64Encoder().encode(String.format(&quot;%s:%s&quot;,clientId,clientSecret).getBytes());<br>headers.<span class="hljs-keyword">add</span>(&quot;Authorization&quot;,String.format(&quot;Basic %s&quot;,authHeader));<br>HttpEntity&lt;MultiValueMap&lt;String,<span class="hljs-keyword">Object</span>&gt;&gt; requestEntity = <span class="hljs-built_in">new</span> HttpEntity&lt;&gt;(requestParam,headers);<br>AccessToken accessToken=restTemplate.postForObject(&quot;http://localhost:8080/uaa/oauth/token&quot;,requestEntity,AccessToken.<span class="hljs-keyword">class</span>);<br></code></pre></td></tr></table></figure><h3 id="GET方法添加请求头"><a href="#GET方法添加请求头" class="headerlink" title="GET方法添加请求头"></a>GET方法添加请求头</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">private</span> UserInfo <span class="hljs-title">requestUserInfo</span><span class="hljs-params">(<span class="hljs-type">String</span> token)</span></span>&#123;<br>    HttpHeaders headers = <span class="hljs-keyword">new</span> <span class="hljs-built_in">HttpHeaders</span>();<br>    headers.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;Authorization&quot;</span>,<span class="hljs-type">String</span>.format(<span class="hljs-string">&quot;bearer %s&quot;</span>,token));<br>    ResponseEntity&lt;UserInfo&gt; userInfoResponseEntity = restTemplate.<span class="hljs-built_in">exchange</span>(<br>            <span class="hljs-string">&quot;http://localhost:8080/uaa/oauth/user&quot;</span>,<br>            HttpMethod.GET,<br>            <span class="hljs-keyword">new</span> HttpEntity&lt;&gt;(headers),<br>            UserInfo.<span class="hljs-keyword">class</span>);<br>    <span class="hljs-keyword">return</span> userInfoResponseEntity.<span class="hljs-built_in">getBody</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="POST添加请求头"><a href="#POST添加请求头" class="headerlink" title="POST添加请求头"></a>POST添加请求头</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">RestTemplate restTemplate = <span class="hljs-keyword">new</span> RestTemplate();<br>HttpHeaders httpHeaders = <span class="hljs-keyword">new</span> HttpHeaders();<br>httpHeaders.setContentType(MediaType.APPLICATION_JSON);<br>httpHeaders.add(<span class="hljs-string">&quot;AuthorizationToken&quot;</span>,<span class="hljs-string">&quot;111&quot;</span>);<br><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; <span class="hljs-keyword">map</span> = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><span class="hljs-keyword">map</span>.put(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>);<br>HttpEntity requestEntity = <span class="hljs-keyword">new</span> HttpEntity&lt;&gt;(<span class="hljs-keyword">map</span>,httpHeaders);<br><span class="hljs-built_in">String</span> result = restTemplate.postForObject(<span class="hljs-string">&quot;http://localhost:8081?timestamp=1610703163236&quot;</span>,requestEntity,<span class="hljs-built_in">String</span>.<span class="hljs-keyword">class</span>);<br></code></pre></td></tr></table></figure><h3 id="使用https"><a href="#使用https" class="headerlink" title="使用https"></a>使用https</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript">        &lt;dependency&gt;<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br>        &lt;/dependency&gt;<br>        <br><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">RestTemplate</span> <span class="hljs-title function_">genHttpRestTemplate</span>() throws <span class="hljs-title class_">KeyStoreException</span>, <span class="hljs-title class_">NoSuchAlgorithmException</span>, <span class="hljs-title class_">KeyManagementException</span> &#123;<br>    <span class="hljs-title class_">TrustStrategy</span> acceptingTrustStrategy = (X509Certificate[] chain, <span class="hljs-title class_">String</span> authType) -&gt; <span class="hljs-literal">true</span>;<br>    <span class="hljs-title class_">SSLContext</span> sslContext = org.<span class="hljs-property">apache</span>.<span class="hljs-property">http</span>.<span class="hljs-property">ssl</span>.<span class="hljs-property">SSLContexts</span>.<span class="hljs-title function_">custom</span>()<br>                .<span class="hljs-title function_">loadTrustMaterial</span>(<span class="hljs-literal">null</span>, acceptingTrustStrategy)<br>                .<span class="hljs-title function_">build</span>();<br>    <span class="hljs-title class_">SSLConnectionSocketFactory</span> csf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SSLConnectionSocketFactory</span>(sslContext);<br>    <span class="hljs-title class_">CloseableHttpClient</span> httpClient = <span class="hljs-title class_">HttpClients</span>.<span class="hljs-title function_">custom</span>().<span class="hljs-title function_">setSSLSocketFactory</span>(csf)<br>                .<span class="hljs-title function_">build</span>();<br>    <span class="hljs-title class_">HttpComponentsClientHttpRequestFactory</span> requestFactory =<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpComponentsClientHttpRequestFactory</span>();<br>    requestFactory.<span class="hljs-title function_">setHttpClient</span>(httpClient);<br>    <span class="hljs-title class_">RestTemplate</span> restTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>(requestFactory);<br>    <span class="hljs-keyword">return</span> restTemplate;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-title class_">Attachment</span> <span class="hljs-title function_">uploadAttachment</span>(<span class="hljs-params"><span class="hljs-title class_">MultipartFile</span> file</span>)&#123;<br>    <span class="hljs-title class_">SimpleClientHttpRequestFactory</span> requestFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleClientHttpRequestFactory</span>();<br>    requestFactory.<span class="hljs-title function_">setBufferRequestBody</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-title class_">RestTemplate</span> noBufferRestTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>(requestFactory);<br>    <br>    <span class="hljs-title class_">MultiValueMap</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; requestParam = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMultiValueMap</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt;();<br>    <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title class_">Resource</span> resource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MultipartStreamResource</span>(file.<span class="hljs-title function_">getInputStream</span>(),file.<span class="hljs-title function_">getSize</span>(),file.<span class="hljs-title function_">getOriginalFilename</span>());<br>            requestParam.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;file&quot;</span>,resource);<br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">IOException</span> e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MpaasRuntimeException</span>(e);<br>    &#125;<br>    <span class="hljs-title class_">HttpHeaders</span> headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>    headers.<span class="hljs-title function_">setContentType</span>(<span class="hljs-title class_">MediaType</span>.<span class="hljs-property">MULTIPART_FORM_DATA</span>);<br>    <span class="hljs-title class_">HttpEntity</span>&lt;<span class="hljs-title class_">MultiValueMap</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt;&gt; requestEntity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntity</span>&lt;<span class="hljs-title class_">MultiValueMap</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt;&gt;(requestParam, headers);<br>    <span class="hljs-title class_">DataResponse</span> response = noBufferRestTemplate.<span class="hljs-title function_">postForObject</span>(<span class="hljs-title class_">String</span>.<span class="hljs-title function_">format</span>(<span class="hljs-string">&quot;%s/process/form/uploadAttachment&quot;</span>,<span class="hljs-string">&quot;http://localhost:8081&quot;</span>), requestEntity, <span class="hljs-title class_">DataResponse</span>.<span class="hljs-property">class</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>其中的MultipartStreamResource 是继承自InputStreamResource</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultipartStreamResource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">InputStreamResource</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> length;<br>    <span class="hljs-keyword">private</span> String fileName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MultipartStreamResource</span><span class="hljs-params">(InputStream inputStream)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(inputStream);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MultipartStreamResource</span><span class="hljs-params">(InputStream inputStream, <span class="hljs-keyword">int</span> length)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(inputStream);<br>        <span class="hljs-keyword">this</span>.length = length;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MultipartStreamResource</span><span class="hljs-params">(InputStream inputStream, <span class="hljs-keyword">long</span> length,String fileName)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(inputStream);<br>        <span class="hljs-keyword">this</span>.length = length;<br>        <span class="hljs-keyword">this</span>.fileName = fileName;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">getLength</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> length;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span> length)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.length = length;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">String <span class="hljs-title">getFilename</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.fileName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">contentLength</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">long</span> estimate = length;<br>        <span class="hljs-keyword">return</span> estimate == <span class="hljs-number">0</span>?<span class="hljs-number">1</span> :estimate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql的DateFormat函数</title>
    <link href="/ika-new-blog/2021/01/15/mysql-date-format/"/>
    <url>/ika-new-blog/2021/01/15/mysql-date-format/</url>
    
    <content type="html"><![CDATA[<p>基础语法 select DATE_FORMAT(date,format) from dual;</p><p>示例：<br>select DATE_FORMAT(now(),’%Y-%m-%d’) from dual;</p><table><thead><tr><th>占位符</th><th>返回值</th><th>示例</th></tr></thead><tbody><tr><td>%Y</td><td>4位年</td><td>2021</td></tr><tr><td>%y</td><td>2位年</td><td>21</td></tr><tr><td>%M</td><td>月英文</td><td>January</td></tr><tr><td>%m</td><td>月数值</td><td>01</td></tr><tr><td>%D</td><td>带英文的天</td><td>15th</td></tr><tr><td>%d</td><td>月的第几天(常用00-31)</td><td>09</td></tr><tr><td>%e</td><td>月的第几天(0-31)</td><td>9</td></tr><tr><td>%H</td><td>小时(00-23)</td><td>15</td></tr><tr><td>%k</td><td>小时(0-23)</td><td>3</td></tr><tr><td>%h</td><td>小时(01-12)</td><td>03</td></tr><tr><td>%p</td><td>AM&#x2F;PM</td><td>PM</td></tr><tr><td>%i</td><td>分钟</td><td>22</td></tr><tr><td>%S</td><td>秒(00-59)</td><td>02</td></tr><tr><td>%s</td><td>秒(和上面一样)</td><td>02</td></tr><tr><td>%T</td><td>时分秒(hh:mm:ss)</td><td>15:24:26</td></tr><tr><td>%r</td><td>带上下午的时分秒</td><td>04:10:10 PM</td></tr><tr><td>%j</td><td>年的第几天(001-366)</td><td>015</td></tr><tr><td>%a</td><td>英文星期缩写</td><td>Fri</td></tr><tr><td>%b</td><td>英文月名缩写</td><td>Jan</td></tr><tr><td>%U</td><td>一年的第几周(00-53),星期日是一周的第一天</td><td>02</td></tr><tr><td>%u</td><td>一年的第几周(00-53),星期一是一周的第一天</td><td>02</td></tr><tr><td>%V</td><td>一年的第几周(01-53),星期日是一周的第一天(1月1号是周五，此时得出来的值为52)</td><td>02</td></tr><tr><td>%v</td><td>一年的第几周(01-53),星期一是一周的第一天(1月1号是周五，此时得出来的值为52)</td><td>02</td></tr><tr><td>%W</td><td>星期英文名</td><td>Friday</td></tr><tr><td>%w</td><td>一周的第几天(0-6 0:星期日,6:星期六)</td><td>5</td></tr><tr><td>%X</td><td>4位年(与%V一样 2021年1月1日是周五,此时得出为2020)</td><td>2020</td></tr><tr><td>%x</td><td>4位年(与%v一样 2021年1月1日是周五,此时得出为2020)</td><td>2020</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Activiti6 加签且保留待办</title>
    <link href="/ika-new-blog/2021/01/12/activiti-addsign/"/>
    <url>/ika-new-blog/2021/01/12/activiti-addsign/</url>
    
    <content type="html"><![CDATA[<p>在一个平常且忙碌的一天，突然接收到一个需求，你们的加签不符合我们想的情况，需要可以加签多人，并且还保留操作人的待办。<br>虽说这个需求也挺合理，但开发时可就犯了难，activiti默认也没有加待办的功能啊。只能从底层的对象关系入手了。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>把上面的需求转变下，无非就是要向待办中添加人去审批。根据activiti的方式来看，无非就是把task添加到instance而已。所以只要能将task添加到instance中，并且把所有参数都弄的和原始的待办相似 就差不多完成了。</p><h2 id="实现API"><a href="#实现API" class="headerlink" title="实现API"></a>实现API</h2><p>先看到taskService里面好像有保存task的API。不过这个API看起来就太简陋了，一看就不能用。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Task task <span class="hljs-operator">=</span> taskService.newTask()<span class="hljs-comment">;</span><br>taskService.saveTask(task)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>除此之外，常用的TaskService、RuntimeService就没有啥可以用的了，只能用上功能强大的ManagementService</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">ExecutionEntityManager.createChildExecutio<span class="hljs-meta">n</span>()<br>TaskEntityManager.<span class="hljs-keyword">create</span>()<br>TaskEntityManager.<span class="hljs-keyword">insert</span>()<br></code></pre></td></tr></table></figure><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>先把需要加签的那个人的task信息查出来，然后用传入到ManagementService里做处理</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> testAddone(String taskId)&#123;<br>    <span class="hljs-keyword">Task</span> <span class="hljs-keyword">task</span> = taskService.createTaskQuery()<br>                .taskId(taskId)<br>                .includeProcessVariables()<br>                .singleResult();<br>    String processInstanceId = <span class="hljs-keyword">task</span>.getProcessInstanceId();<br>    managementService.executeCommand(<span class="hljs-keyword">new</span> AddoneTestCmd(processInstanceId,<span class="hljs-keyword">task</span>));<br>    List&lt;<span class="hljs-keyword">Task</span>&gt; afterTask = taskService.createTaskQuery()<br>    .processInstanceId(processInstanceId)<br>                .includeProcessVariables()<br>                .list();<br>    System.out.<span class="hljs-keyword">println</span>(afterTask.<span class="hljs-keyword">size</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>先找到这个task所在的ExecutionEntity与TaskEntity</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddoneTestCmd</span> implements Command&lt;<span class="hljs-type">String</span>&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> instanceId;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Task</span> task;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AddoneTestCmd</span><span class="hljs-params">(<span class="hljs-type">String</span> instanceId, <span class="hljs-built_in">Task</span> task)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.instanceId = instanceId;<br>        <span class="hljs-keyword">this</span>.task = task;<br>    &#125;<br><br>    @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">execute</span><span class="hljs-params">(CommandContext commandContext)</span> </span>&#123;<br>        ExecutionEntity executionEntity = commandContext.<span class="hljs-built_in">getExecutionEntityManager</span>()<br>                .<span class="hljs-built_in">findById</span>(task.<span class="hljs-built_in">getExecutionId</span>());<br>        TaskEntity taskEntity = commandContext.<span class="hljs-built_in">getTaskEntityManager</span>().<span class="hljs-built_in">findById</span>(task.<span class="hljs-built_in">getId</span>());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后要新建一个TaskEntity并将原来task的数据放进去最后放进去</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">@Override<br>public String execute<span class="hljs-params">(CommandContext commandContext)</span> &#123;<br>    ExecutionEntity executionEntity = <span class="hljs-keyword">command</span>Context.getExecutionEntityManager<span class="hljs-params">()</span><br>                <span class="hljs-string">.findById</span><span class="hljs-params">(task.getExecutionId()</span>);<br>    TaskEntity taskEntity = <span class="hljs-keyword">command</span>Context.getTaskEntityManager<span class="hljs-params">()</span><span class="hljs-string">.findById</span><span class="hljs-params">(task.getId()</span>);<br>    TaskEntity newTaskEntity = <span class="hljs-keyword">command</span>Context.getTaskEntityManager<span class="hljs-params">()</span><span class="hljs-string">.create</span><span class="hljs-params">()</span>;<br>    newTaskEntity.<span class="hljs-keyword">set</span>Variables<span class="hljs-params">(task.getProcessVariables()</span>);<br>    newTaskEntity.<span class="hljs-keyword">set</span>Assignee<span class="hljs-params">(&quot;admin&quot;)</span>;<br>    newTaskEntity.<span class="hljs-keyword">set</span>ProcessInstanceId<span class="hljs-params">(instanceId)</span>;<br>    newTaskEntity.<span class="hljs-keyword">set</span>Category<span class="hljs-params">(task.getCategory()</span>);<br>    newTaskEntity.<span class="hljs-keyword">set</span>Description<span class="hljs-params">(task.getDescription()</span>);<br>    newTaskEntity.<span class="hljs-keyword">set</span>Name<span class="hljs-params">(taskEntity.getName()</span>);<br>    newTaskEntity.<span class="hljs-keyword">set</span>TaskDefinitionKey<span class="hljs-params">(taskEntity.getTaskDefinitionKey()</span>);<br>    newTaskEntity.<span class="hljs-keyword">set</span>Execution<span class="hljs-params">(executionEntity)</span>;<br>    newTaskEntity.<span class="hljs-keyword">set</span>ExecutionId<span class="hljs-params">(task.getExecutionId()</span>);<br>    <span class="hljs-keyword">command</span>Context.getTaskEntityManager<span class="hljs-params">()</span><span class="hljs-string">.insert</span><span class="hljs-params">(newTaskEntity, executionEntity)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这看起来不错，task也加进去了，再次查看时候参数也都差不多在。<br>正当高兴的时候，我点击了下同意，芜湖，果不其然报错了。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">org.activiti.engine.ActivitiException: </span>UserTask <span class="hljs-keyword">should </span>not <span class="hljs-keyword">be </span>signalled <span class="hljs-keyword">before </span>complete<br></code></pre></td></tr></table></figure><p>在找到底层的代码后，发现是complete的时候需要遍历这个流程的task，看里面的各种标志位是否都正确。<br>仔细看了一圈之后，也不知道咋改，只能再想想哪里出错了。<br>后来发现流程里面有3个变量nrOfInstances、nrOfActiveInstances、nrOfCompletedInstances  分别代表这条实例的任务总数、未完成任务数、已完成任务数。<br>把task添加进去的时候 这些变量不会自动加，那就手动修改下。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs erlang">Integer <span class="hljs-keyword">begin</span>NrofInstance = (Integer) executionEntity.getVariable(<span class="hljs-string">&quot;nrOfInstances&quot;</span>);<br>Integer <span class="hljs-keyword">begin</span>NrOfActiveInstances = (Integer) executionEntity.getVariable(<span class="hljs-string">&quot;nrOfActiveInstances&quot;</span>);<br>executionEntity.setVariable(<span class="hljs-string">&quot;nrOfInstances&quot;</span>, <span class="hljs-keyword">begin</span>NrofInstance + <span class="hljs-number">1</span>);<br>executionEntity.setVariable(<span class="hljs-string">&quot;nrOfActiveInstances&quot;</span>, <span class="hljs-keyword">begin</span>NrOfActiveInstances + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>然而，还是不行，依旧是上面的错误。看起来并不是这个变量的问题，不过这个变量修改确实是需要的。<br>这时，突然发现其实一个instance里面 每个task的executionId都是不同的，而我按上面的操作后，新生成的executionId和原来传入的task相同了。于是我就明白了，应该新生成一个ExecutionEntity才对。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">ExecutionEntity parentExecutionEntry = executionEntity.getParent<span class="hljs-params">()</span>;<br>ExecutionEntity newChildExecution = <span class="hljs-keyword">command</span>Context.getExecutionEntityManager<span class="hljs-params">()</span><span class="hljs-string">.createChildExecution</span><span class="hljs-params">(parentExecutionEntry)</span>;<br><span class="hljs-keyword">command</span>Context.getTaskEntityManager<span class="hljs-params">()</span><span class="hljs-string">.insert</span><span class="hljs-params">(newTaskEntity, newChildExecution)</span>;<br></code></pre></td></tr></table></figure><p>好家伙，这一通操作下来看起来应该是可以了。在页面点了一下同意，咔 又报错了，不过这次错误变了，说明有戏</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">org.activiti.engine.ActivitiException: Programmatic error: <span class="hljs-keyword">no</span> <span class="hljs-keyword">current</span> flow element <span class="hljs-built_in">found</span> <span class="hljs-keyword">or</span> invalid <span class="hljs-keyword">type</span>: <span class="hljs-keyword">null</span>. Halting.<br></code></pre></td></tr></table></figure><p>看起来像没有CurrentFlowElement，那好 就添加一个CurrentFlowElement。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">newChildExecution.setCurrentFlowElement(executionEntity.getCurrentFlowElement())<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>最终，基础的功能实现了。</p><h2 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">testAddone</span><span class="hljs-params">(<span class="hljs-type">String</span> taskId)</span></span>&#123;<br>    <span class="hljs-built_in">Task</span> task = taskService.<span class="hljs-built_in">createTaskQuery</span>()<br>                .<span class="hljs-built_in">taskId</span>(taskId)<br>                .<span class="hljs-built_in">includeProcessVariables</span>()<br>                .<span class="hljs-built_in">singleResult</span>();<br>    <span class="hljs-type">String</span> processInstanceId = task.<span class="hljs-built_in">getProcessInstanceId</span>();<br>    managementService.<span class="hljs-built_in">executeCommand</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">AddoneTestCmd</span>(processInstanceId,task));<br>    List&lt;<span class="hljs-built_in">Task</span>&gt; afterTask = taskService.<span class="hljs-built_in">createTaskQuery</span>()<br>    .<span class="hljs-built_in">processInstanceId</span>(processInstanceId)<br>                .<span class="hljs-built_in">includeProcessVariables</span>()<br>                .<span class="hljs-built_in">list</span>();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddoneTestCmd</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span>&lt;String&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> String instanceId;<br><br>    <span class="hljs-keyword">private</span> Task task;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AddoneTestCmd</span><span class="hljs-params">(String instanceId, Task task)</span> &#123;<br>        <span class="hljs-built_in">this</span>.instanceId = instanceId;<br>        <span class="hljs-built_in">this</span>.task = task;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">execute</span><span class="hljs-params">(CommandContext commandContext)</span> &#123;<br>        <span class="hljs-type">ExecutionEntity</span> <span class="hljs-variable">executionEntity</span> <span class="hljs-operator">=</span> commandContext.getExecutionEntityManager()<br>                .findById(task.getExecutionId());<br>        <span class="hljs-type">ExecutionEntity</span> <span class="hljs-variable">parentExecutionEntry</span> <span class="hljs-operator">=</span> executionEntity.getParent();<br>        <span class="hljs-type">ExecutionEntity</span> <span class="hljs-variable">newChildExecution</span> <span class="hljs-operator">=</span> commandContext.getExecutionEntityManager().createChildExecution(parentExecutionEntry);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">beginNrofInstance</span> <span class="hljs-operator">=</span> (Integer) newChildExecution.getVariable(<span class="hljs-string">&quot;nrOfInstances&quot;</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">beginNrOfActiveInstances</span> <span class="hljs-operator">=</span> (Integer) newChildExecution.getVariable(<span class="hljs-string">&quot;nrOfActiveInstances&quot;</span>);<br>        newChildExecution.setCurrentFlowElement(executionEntity.getCurrentFlowElement());<br>        <span class="hljs-type">TaskEntity</span> <span class="hljs-variable">taskEntity</span> <span class="hljs-operator">=</span> commandContext.getTaskEntityManager().findById(task.getId());<br>        <span class="hljs-type">TaskEntity</span> <span class="hljs-variable">newTaskEntity</span> <span class="hljs-operator">=</span> commandContext.getTaskEntityManager().create();<br>        newTaskEntity.setVariables(task.getProcessVariables());<br>        newTaskEntity.setAssignee(<span class="hljs-string">&quot;admin&quot;</span>);<br>        newTaskEntity.setProcessInstanceId(instanceId);<br>        newTaskEntity.setCategory(task.getCategory());<br>        newTaskEntity.setDescription(task.getDescription());<br>        newTaskEntity.setName(taskEntity.getName());<br>        newTaskEntity.setTaskDefinitionKey(taskEntity.getTaskDefinitionKey());<br><br>        commandContext.getTaskEntityManager().insert(newTaskEntity, newChildExecution);<br>        newChildExecution.setVariable(<span class="hljs-string">&quot;nrOfInstances&quot;</span>, beginNrofInstance + <span class="hljs-number">1</span>);<br>        newChildExecution.setVariable(<span class="hljs-string">&quot;nrOfActiveInstances&quot;</span>, beginNrOfActiveInstances + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java8之HashMap</title>
    <link href="/ika-new-blog/2020/08/09/hello-world/"/>
    <url>/ika-new-blog/2020/08/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>HashMap作为Java编程中一种常用的数据结构，虽然我们每天都用，但还是有许多有趣的地方需要深究一下。</p><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><p>在我经历的几个项目上，HashMap的容量几乎被所有开发人员都忽略了，虽然HashMap会根据实际使用情况扩容，但容量规划不好，还是有可能会发生意想不到的情况。</p><h3 id="初始容量"><a href="#初始容量" class="headerlink" title="初始容量"></a>初始容量</h3><p>HashMap在创建时会赋予一个初始的容量，我们可以通过构造器来指定大小，或者使用默认大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个默认容量(16)的HashMap</span><br>Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-comment">// 创建一个容量为8的HashMap</span><br>Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">8</span>);<br><br><span class="hljs-comment">// 创建一个容量为4的HashMap</span><br>Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>这里你会发现我指定容量为3，但注释写的是4。<br>没错，HashMap的容量一定是2的n次方，所以当不足2的n次方时，会补足到2的n次方。</p><h3 id="容量扩充"><a href="#容量扩充" class="headerlink" title="容量扩充"></a>容量扩充</h3><p>HashMap当容量到达一定的阈值时会自动扩充容量，以保存更多的数据。同样的每次会扩充2倍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">4</span>);<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>);<br>map.put(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>map.put(<span class="hljs-number">8</span>,<span class="hljs-number">8</span>);<br>map.put(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>);<br>map.put(<span class="hljs-number">9</span>,<span class="hljs-number">5</span>);<br>Class&lt;?&gt; mapType = map.getClass();<br><span class="hljs-type">Method</span> <span class="hljs-variable">capacity</span> <span class="hljs-operator">=</span> mapType.getDeclaredMethod(<span class="hljs-string">&quot;capacity&quot;</span>);<br>capacity.setAccessible(<span class="hljs-literal">true</span>);<br>System.out.printf(<span class="hljs-string">&quot;capacity: %s&quot;</span>,capacity.invoke(map));<br><br><span class="hljs-comment">// capacity: 8</span><br></code></pre></td></tr></table></figure><p>HashMap的扩充策略是到达一个阈值就会扩充，而这个阈值默认是0.75倍的capacity，我们也可以通过构造函数修改这个比例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这个是HashMap的默认阈值</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">DEFAULT_LOAD_FACTOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.75f</span>;<br><span class="hljs-comment">// 手动指定阈值</span><br>Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">4</span>,<span class="hljs-number">0.8f</span>);<br></code></pre></td></tr></table></figure><h2 id="存储原理"><a href="#存储原理" class="headerlink" title="存储原理"></a>存储原理</h2><p>太多了 不愿意写，网上有很多，自己找吧。</p><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p>Java8中因为加入的lambda表达式，多了几个API供开发者使用</p><h3 id="compute"><a href="#compute" class="headerlink" title="compute"></a>compute</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//对传入key的这对键值对进行计算处理，返回值会赋予到value上</span><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">compute</span><span class="hljs-params">(K key,BiFunction&lt;? <span class="hljs-built_in">super</span> K, ? <span class="hljs-built_in">super</span> V, ? extends V&gt; remappingFunction)</span>;<br><br><span class="hljs-comment">// 例:</span><br>HashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>map.compute(<span class="hljs-number">3</span>,(k,v)-&gt; k+v);<br>System.out.println(map);<br><br><span class="hljs-comment">// &#123;3=7&#125;</span><br></code></pre></td></tr></table></figure><h3 id="computeIfAbsent"><a href="#computeIfAbsent" class="headerlink" title="computeIfAbsent"></a>computeIfAbsent</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 对传入key的，如果不存在则执行函数，并将返回值存入这对key,value中</span><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">computeIfAbsent</span><span class="hljs-params">(K key,Function&lt;? <span class="hljs-built_in">super</span> K, ? extends V&gt; mappingFunction)</span>;<br><br><span class="hljs-comment">//例:</span><br>HashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>map.computeIfAbsent(<span class="hljs-number">4</span>,k-&gt; <span class="hljs-number">5</span>);<br>System.out.println(map);<br><br><span class="hljs-comment">// &#123;3=4, 4=5&#125;</span><br></code></pre></td></tr></table></figure><h3 id="computeIfPresent"><a href="#computeIfPresent" class="headerlink" title="computeIfPresent"></a>computeIfPresent</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 对传入key的，如果存在则执行函数，并将返回值存入value中</span><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">computeIfPresent</span><span class="hljs-params">(K key,BiFunction&lt;? <span class="hljs-built_in">super</span> K, ? <span class="hljs-built_in">super</span> V, ? extends V&gt; remappingFunction)</span>;<br><span class="hljs-comment">// 例:</span><br>HashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>map.computeIfPresent(<span class="hljs-number">3</span>,(k,v)-&gt; ++v); <span class="hljs-comment">//如果3存在 则执行 并将返回值存入3中</span><br>System.out.println(map);<br><br><span class="hljs-comment">// &#123;3=5&#125;</span><br></code></pre></td></tr></table></figure><h3 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll"></a>replaceAll</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 会替换所有key的value替换为函数的返回值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">replaceAll</span><span class="hljs-params">(BiFunction&lt;? <span class="hljs-built_in">super</span> K, ? <span class="hljs-built_in">super</span> V, ? extends V&gt; function)</span>;<br><br><span class="hljs-comment">// 例:</span><br>HashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>map.computeIfAbsent(<span class="hljs-number">4</span>,k-&gt; <span class="hljs-number">5</span>);<span class="hljs-comment">//如果不存在 则将函数返回值存入key为4中</span><br>map.replaceAll((k,v) -&gt; k==<span class="hljs-number">3</span> ? <span class="hljs-number">999</span>: <span class="hljs-number">0</span>);<br>System.out.println(map);<br><br><span class="hljs-comment">// &#123;3=999, 4=0&#125;</span><br></code></pre></td></tr></table></figure><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>LinkedHashMap继承了HashMap，区别在与其在HashMap的基础上维护了一个双向链表，来保证插入和遍历的顺序。</p><h3 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h3><p>LinkedHashMap和HashMap使用方式都一样，唯一的区别就在与遍历时的顺序。HashMap会根据hash值再经过一系列运算进行存储，所以顺序不能保证。但LinkedHashMap的遍历顺序会和插入的顺序相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">LinkedHashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>map.put(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br>map.put(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>map.put(<span class="hljs-number">9</span>,<span class="hljs-number">10</span>);<br>map.put(<span class="hljs-number">8</span>,<span class="hljs-number">9</span>);<br>System.out.println(map);<br><br><span class="hljs-comment">// &#123;3=4, 5=6, 2=3, 9=10, 8=9&#125;</span><br></code></pre></td></tr></table></figure><p>但是在重新put后不会改变他的顺序,但remove后再put会改变顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">LinkedHashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>map.put(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br>map.put(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>map.put(<span class="hljs-number">9</span>,<span class="hljs-number">10</span>);<br>map.put(<span class="hljs-number">8</span>,<span class="hljs-number">9</span>);<br>map.put(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>);<br>System.out.println(map);<br>        <br><span class="hljs-comment">// &#123;3=4, 5=6, 2=4, 9=10, 8=9&#125;</span><br>map.remove(<span class="hljs-number">9</span>);<br>map.put(<span class="hljs-number">9</span>,<span class="hljs-number">11</span>);<br><span class="hljs-comment">// &#123;3=4, 5=6, 2=4, 8=9, 9=11&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>openfeign调用excel导出接口</title>
    <link href="/ika-new-blog/2019/02/21/feign-excel/"/>
    <url>/ika-new-blog/2019/02/21/feign-excel/</url>
    
    <content type="html"><![CDATA[<h3 id="1-常见的excel导出核心方式"><a href="#1-常见的excel导出核心方式" class="headerlink" title="1.常见的excel导出核心方式"></a>1.常见的excel导出核心方式</h3><p>excel导出在企业应用中比较常见的.<br>我们一般都是把接口的 <strong>header</strong> 的 <strong>“ContentType”</strong> 置为 <strong>“application&#x2F;octet-stream”</strong>，<br>将 <strong>“Content-Disposition”</strong> 置为 <strong>“attachment;filename&#x3D;${fileName}”</strong><br>之后我们将excel的流写入 <strong>response</strong> 的 <strong>outputstream</strong> 中，代码逻辑大体如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这是被调用方(服务提供方)的excel导出接口。(这里excel导出被高度封装，请自行编写excel导出逻辑)</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/export&quot;, method = RequestMethod.GET)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">export</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    sw.buildQuery()<br>            .exclude(<span class="hljs-string">&quot;staffFlag&quot;</span>)<br>            .fileName(<span class="hljs-string">&quot;controller.xlsx&quot;</span>)<br>            .doExport(response, Staff.class);<br>&#125;<br><br><span class="hljs-comment">//其中 doExport函数</span><br><span class="hljs-keyword">public</span> MpaasQuery <span class="hljs-title function_">doExport</span><span class="hljs-params">(HttpServletResponse response, Class pojo)</span> &#123;<br>    response.setContentType(<span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-built_in">this</span>.excelFileName.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>), <span class="hljs-string">&quot;ISO8859_1&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + f);<br>        <span class="hljs-built_in">this</span>.doExport((OutputStream)response.getOutputStream(), pojo);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception var4) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MpaasRuntimeException</span>(var4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-openfeign如何调用excel导出的接口"><a href="#2-openfeign如何调用excel导出的接口" class="headerlink" title="2.openfeign如何调用excel导出的接口"></a>2.openfeign如何调用excel导出的接口</h3><p>而在 <strong>openfeign</strong> 中，调用excel导出接口不能像普通接口一样输入输出参数保持相同，我们需要得到 <strong>excel</strong> 的字节流，所以调用方的代码如下所示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//使用feign来调用已经写好的excel导出接口</span><br><span class="hljs-meta">@FeignClient(name = <span class="hljs-string">&quot;staff&quot;</span>,url = <span class="hljs-string">&quot;http://localhost:8080/controller&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TestFeign</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(value = <span class="hljs-string">&quot;/export&quot;</span>, method = RequestMethod.GET)</span><br>    <span class="hljs-keyword">public</span> byte[] export();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-最终暴露出来的接口"><a href="#3-最终暴露出来的接口" class="headerlink" title="3.最终暴露出来的接口"></a>3.最终暴露出来的接口</h3><p>最后，我们在调用这个feign层的函数时候需要重新设置response的 <strong>“ContentType”</strong> 和 <strong>“Content-Disposition”</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">//最终在我们系统中的接口</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/feignexport&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">health</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    response.setContentType(<span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br>    response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=controller.xlsx&quot;</span>);<br>    response.getOutputStream().write(testFeign.export());<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
