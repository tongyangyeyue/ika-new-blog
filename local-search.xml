<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>nvidia-container-toolkit</title>
    <link href="/ika-new-blog/2025/06/23/nvidia-container-toolkit/"/>
    <url>/ika-new-blog/2025/06/23/nvidia-container-toolkit/</url>
    
    <content type="html"><![CDATA[<h2 id="Nvidia-Container-Toolkit"><a href="#Nvidia-Container-Toolkit" class="headerlink" title="Nvidia Container Toolkit"></a>Nvidia Container Toolkit</h2><p>nvidia-container-toolkit包含如下3个组件</p><ul><li>nvidia-container-runtime</li><li>nvidia-container-runtime-hook</li><li>libnvidia-container</li></ul><h3 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h3><p>左侧是不带nvidia的容器启动流程，  右侧是带nvidia的容器启动流程</p><img src="/ika-new-blog/2025/06/23/nvidia-container-toolkit/container1.png" class="" title="img"><p>图1</p><img src="/ika-new-blog/2025/06/23/nvidia-container-toolkit/container2.png" class="" title="img"><p>图2<br>我画的流程和官方给出的不一样:<br>在仔细查阅docker文档后，发现docker配置的runtime 只会在containerd调用，而不是由docker来调用<br><a href="https://docs.docker.com/engine/daemon/alternative-runtimes/#use-containerd-shims">https://docs.docker.com/engine/daemon/alternative-runtimes/#use-containerd-shims</a></p><p>流程步骤：</p><ul><li>安装container-toolkit后，使用nvidia-ctk更改容器配置，设置docker&#x2F;containerd 的配置，修改其runtime为nvidia-container-runtime  （此步骤在安装时执行，后续步骤为启动容器时执行）</li><li>docker收到命令容器，调用Containerd</li><li>Containerd根据设置参数调用nvidia-container-runtime，并传递oci的config.json</li><li>nvidia-container-runtime将config.json进行修改，添加preStart hook 并调用runtime（runc等）</li><li>runc在启动时检查preStart hook，发现并调用 nvidia-container-runtime-hook组件</li><li>nvidia-container-runtime-hook拼接nvidia-container-cli命令，并调用nvidia-container-cli(libnvidia-container)</li><li>libnvidia-container将对应驱动和设备绑定到容器namespace中</li></ul><h3 id="nvidia-container-runtime"><a href="#nvidia-container-runtime" class="headerlink" title="nvidia-container-runtime"></a>nvidia-container-runtime</h3><p>核心功能<br>nvidia-container-runtime的核心功能就是通过拦截容器的创建请求，将containerd发送给runc的config.json进行修改，增加一个preStart的hook<br>而这个hook，就是直接调用nvidia-container-runtime-hook这个二进制文件，并将创建容器的信息传递过去，核心代码如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// Modify applies the required modification to the incoming OCI spec, inserting the nvidia-container-runtime-hook</span><br><span class="hljs-comment">// as a prestart hook.</span><br>func (m stableRuntimeModifier) <span class="hljs-built_in">Modify</span>(spec *specs.Spec) error &#123;<br>   <span class="hljs-comment">// If an NVIDIA Container Runtime Hook already exists, we don&#x27;t make any modifications to the spec.</span><br>   <span class="hljs-keyword">if</span> spec<span class="hljs-selector-class">.Hooks</span> != nil &#123;<br>      <span class="hljs-keyword">for</span> _, hook := range spec<span class="hljs-selector-class">.Hooks</span><span class="hljs-selector-class">.Prestart</span> &#123;<br>         hook := hook<br>         <span class="hljs-keyword">if</span> <span class="hljs-built_in">isNVIDIAContainerRuntimeHook</span>(&amp;hook) &#123;<br>            m<span class="hljs-selector-class">.logger</span><span class="hljs-selector-class">.Infof</span>(<span class="hljs-string">&quot;Existing nvidia prestart hook (%v) found in OCI spec&quot;</span>, hook.Path)<br>            return nil<br>         &#125;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-selector-tag">path</span> := m<span class="hljs-selector-class">.nvidiaContainerRuntimeHookPath</span><br>   m<span class="hljs-selector-class">.logger</span><span class="hljs-selector-class">.Infof</span>(<span class="hljs-string">&quot;Using prestart hook path: %v&quot;</span>, path)<br>   args := <span class="hljs-selector-attr">[]</span>string&#123;filepath<span class="hljs-selector-class">.Base</span>(path)&#125;<br>   <span class="hljs-keyword">if</span> spec<span class="hljs-selector-class">.Hooks</span> == nil &#123;<br>      spec<span class="hljs-selector-class">.Hooks</span> = &amp;specs.Hooks&#123;&#125;<br>   &#125;<br>   spec<span class="hljs-selector-class">.Hooks</span><span class="hljs-selector-class">.Prestart</span> = <span class="hljs-built_in">append</span>(spec<span class="hljs-selector-class">.Hooks</span><span class="hljs-selector-class">.Prestart</span>, specs.Hook&#123;<br>      Path: <span class="hljs-selector-tag">path</span>,<br>      Args: <span class="hljs-built_in">append</span>(args, <span class="hljs-string">&quot;prestart&quot;</span>),<br>   &#125;)<br><br>   return nil<br>&#125;<br></code></pre></td></tr></table></figure><p>这里拿一个containerd启动的一个容器的config.json文件，这个文件可以在containerd的运行目录&#x2F;run&#x2F;containerd&#x2F;io.containerd.runtime.v2.task&#x2F;k8s.io&#x2F;找到，核心为hooks字段</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs nix"> &#123;<br>        <span class="hljs-string">&quot;ociVersion&quot;</span>: <span class="hljs-string">&quot;1.1.0&quot;</span>,<br>        <span class="hljs-string">&quot;process&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;user&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;uid&quot;</span>: <span class="hljs-number">0</span>,<br>                        <span class="hljs-string">&quot;gid&quot;</span>: <span class="hljs-number">0</span>,<br>                        <span class="hljs-string">&quot;additionalGids&quot;</span>: [<span class="hljs-number">0</span>]<br>                &#125;,<br>                <span class="hljs-string">&quot;args&quot;</span>: [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;sleep 50000s&quot;</span>],<br>                <span class="hljs-string">&quot;env&quot;</span>: [<span class="hljs-string">&quot;PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span>, <span class="hljs-string">&quot;HOSTNAME=dd18j57ijl6drltbnsthg-7f895b8548-bt6n5&quot;</span>, <span class="hljs-string">&quot;NVARCH=x86_64&quot;</span>, <span class="hljs-string">&quot;NVIDIA_REQUIRE_CUDA=cuda<span class="hljs-char escape_">\u</span>003e=12.4 brand=tesla,driver<span class="hljs-char escape_">\u</span>003e=470,driver<span class="hljs-char escape_">\u</span>003c471 brand=unknown,driver<span class="hljs-char escape_">\u</span>003e=470,driver<span class="hljs-char escape_">\u</span>003c471 brand=nvidia,driver<span class="hljs-char escape_">\u</span>003e=470,driver<span class="hljs-char escape_">\u</span>003c471 brand=nvidiartx,driver<span class="hljs-char escape_">\u</span>003e=470,driver<span class="hljs-char escape_">\u</span>003c471 brand=geforce,driver<span class="hljs-char escape_">\u</span>003e=470,driver<span class="hljs-char escape_">\u</span>003c471 brand=geforcertx,driver<span class="hljs-char escape_">\u</span>003e=470,driver<span class="hljs-char escape_">\u</span>003c471 brand=quadro,driver<span class="hljs-char escape_">\u</span>003e=470,driver<span class="hljs-char escape_">\u</span>003c471 brand=quadrortx,driver<span class="hljs-char escape_">\u</span>003e=470,driver<span class="hljs-char escape_">\u</span>003c471 brand=titan,driver<span class="hljs-char escape_">\u</span>003e=470,driver<span class="hljs-char escape_">\u</span>003c471 brand=titanrtx,driver<span class="hljs-char escape_">\u</span>003e=470,driver<span class="hljs-char escape_">\u</span>003c471 brand=tesla,driver<span class="hljs-char escape_">\u</span>003e=525,driver<span class="hljs-char escape_">\u</span>003c526 brand=unknown,driver<span class="hljs-char escape_">\u</span>003e=525,driver<span class="hljs-char escape_">\u</span>003c526 brand=nvidia,driver<span class="hljs-char escape_">\u</span>003e=525,driver<span class="hljs-char escape_">\u</span>003c526 brand=nvidiartx,driver<span class="hljs-char escape_">\u</span>003e=525,driver<span class="hljs-char escape_">\u</span>003c526 brand=geforce,driver<span class="hljs-char escape_">\u</span>003e=525,driver<span class="hljs-char escape_">\u</span>003c526 brand=geforcertx,driver<span class="hljs-char escape_">\u</span>003e=525,driver<span class="hljs-char escape_">\u</span>003c526 brand=quadro,driver<span class="hljs-char escape_">\u</span>003e=525,driver<span class="hljs-char escape_">\u</span>003c526 brand=quadrortx,driver<span class="hljs-char escape_">\u</span>003e=525,driver<span class="hljs-char escape_">\u</span>003c526 brand=titan,driver<span class="hljs-char escape_">\u</span>003e=525,driver<span class="hljs-char escape_">\u</span>003c526 brand=titanrtx,driver<span class="hljs-char escape_">\u</span>003e=525,driver<span class="hljs-char escape_">\u</span>003c526 brand=tesla,driver<span class="hljs-char escape_">\u</span>003e=535,driver<span class="hljs-char escape_">\u</span>003c536 brand=unknown,driver<span class="hljs-char escape_">\u</span>003e=535,driver<span class="hljs-char escape_">\u</span>003c536 brand=nvidia,driver<span class="hljs-char escape_">\u</span>003e=535,driver<span class="hljs-char escape_">\u</span>003c536 brand=nvidiartx,driver<span class="hljs-char escape_">\u</span>003e=535,driver<span class="hljs-char escape_">\u</span>003c536 brand=geforce,driver<span class="hljs-char escape_">\u</span>003e=535,driver<span class="hljs-char escape_">\u</span>003c536 brand=geforcertx,driver<span class="hljs-char escape_">\u</span>003e=535,driver<span class="hljs-char escape_">\u</span>003c536 brand=quadro,driver<span class="hljs-char escape_">\u</span>003e=535,driver<span class="hljs-char escape_">\u</span>003c536 brand=quadrortx,driver<span class="hljs-char escape_">\u</span>003e=535,driver<span class="hljs-char escape_">\u</span>003c536 brand=titan,driver<span class="hljs-char escape_">\u</span>003e=535,driver<span class="hljs-char escape_">\u</span>003c536 brand=titanrtx,driver<span class="hljs-char escape_">\u</span>003e=535,driver<span class="hljs-char escape_">\u</span>003c536&quot;</span>, <span class="hljs-string">&quot;NV_CUDA_CUDART_VERSION=12.4.127-1&quot;</span>, <span class="hljs-string">&quot;NV_CUDA_COMPAT_PACKAGE=cuda-compat-12-4&quot;</span>, <span class="hljs-string">&quot;CUDA_VERSION=12.4.1&quot;</span>, <span class="hljs-string">&quot;LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64&quot;</span>, <span class="hljs-string">&quot;NVIDIA_VISIBLE_DEVICES=all&quot;</span>, <span class="hljs-string">&quot;NVIDIA_DRIVER_CAPABILITIES=compute,utility&quot;</span>, <span class="hljs-string">&quot;DEBIAN_FRONTEND=noninteractive&quot;</span>, <span class="hljs-string">&quot;VLLM_USAGE_SOURCE=production-docker-image&quot;</span>, <span class="hljs-string">&quot;NVIDIA_VISIBLE_DEVICES=&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_PORT_6006_TCP_PORT=6006&quot;</span>, <span class="hljs-string">&quot;DD18J57IJL6DRLTBNSTHG_SERVICE_PORT_PORT_8000=8000&quot;</span>, <span class="hljs-string">&quot;UPFS_SERVE_4_XCU935EQJL6DQ7K2QEVA0_PORT_8000_TCP_PROTO=tcp&quot;</span>, <span class="hljs-string">&quot;UPFS_SERVE_4_XCU935EQJL6DQ7K2QEVA0_SERVICE_HOST=10.96.0.106&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_2_BCU9MJPAJL6DHIBDOIUVG_PORT=tcp://10.96.3.191:8000&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_2_BCU9MJPAJL6DHIBDOIUVG_PORT_8000_TCP_PORT=8000&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_PORT_8888_TCP_PORT=8888&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_PORT_8888_TCP=tcp://10.96.2.122:8888&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_PORT_8888_TCP_PROTO=tcp&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_PORT_8888_TCP_ADDR=10.96.2.122&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_3_ICU9MRKAJL6DHIBDOIV0G_SERVICE_PORT=8000&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_1_LCU9MGHAJL6DHIBDOIUTG_PORT_8000_TCP_ADDR=10.96.1.39&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_3_ICU9MRKAJL6DHIBDOIV0G_PORT_8000_TCP_PROTO=tcp&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_SERVICE_PORT_HTTP=8888&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_PORT=tcp://10.96.2.73:8888&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_PORT_22_TCP_PORT=22&quot;</span>, <span class="hljs-string">&quot;KUBERNETES_SERVICE_HOST=10.96.0.1&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_SERVICE_PORT_TENSORBORAD=6006&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_3_ICU9MRKAJL6DHIBDOIV0G_PORT_8000_TCP_ADDR=10.96.3.247&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_SERVICE_PORT=8888&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_PORT_8888_TCP=tcp://10.96.3.133:8888&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_SERVICE_PORT_TENSORBORAD=6006&quot;</span>, <span class="hljs-string">&quot;KUBERNETES_PORT_443_TCP_PROTO=tcp&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_3_ICU9MRKAJL6DHIBDOIV0G_SERVICE_PORT_PORT_8000=8000&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_PORT_8888_TCP_ADDR=10.96.3.133&quot;</span>, <span class="hljs-string">&quot;DD18J57IJL6DRLTBNSTHG_PORT=tcp://10.96.3.66:8000&quot;</span>, <span class="hljs-string">&quot;UPFS_SERVE_3_ECU933H2JL6DQ7K2QEV9G_PORT_8000_TCP_ADDR=10.96.3.67&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_PORT_6006_TCP=tcp://10.96.3.133:6006&quot;</span>, <span class="hljs-string">&quot;DD18J57IJL6DRLTBNSTHG_PORT_8000_TCP_PROTO=tcp&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_PORT_6006_TCP_PROTO=tcp&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_SERVICE_PORT_SSH=22&quot;</span>, <span class="hljs-string">&quot;UPFS_SERVE_3_ECU933H2JL6DQ7K2QEV9G_SERVICE_PORT=8000&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_PORT=tcp://10.96.2.122:8888&quot;</span>, <span class="hljs-string">&quot;UPFS_SERVE_4_XCU935EQJL6DQ7K2QEVA0_SERVICE_PORT=8000&quot;</span>, <span class="hljs-string">&quot;UPFS_SERVE_4_XCU935EQJL6DQ7K2QEVA0_PORT_8000_TCP=tcp://10.96.0.106:8000&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_PORT_6006_TCP_ADDR=10.96.2.122&quot;</span>, <span class="hljs-string">&quot;UPFS_SERVE_3_ECU933H2JL6DQ7K2QEV9G_SERVICE_HOST=10.96.3.67&quot;</span>, <span class="hljs-string">&quot;UPFS_SERVE_3_ECU933H2JL6DQ7K2QEV9G_PORT_8000_TCP_PORT=8000&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_2_BCU9MJPAJL6DHIBDOIUVG_SERVICE_PORT_PORT_8000=8000&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_PORT_22_TCP=tcp://10.96.2.73:22&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_PORT_6006_TCP_ADDR=10.96.2.73&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_PORT_6006_TCP=tcp://10.96.2.122:6006&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_3_ICU9MRKAJL6DHIBDOIV0G_SERVICE_HOST=10.96.3.247&quot;</span>, <span class="hljs-string">&quot;UPFS_SERVE_3_ECU933H2JL6DQ7K2QEV9G_PORT_8000_TCP_PROTO=tcp&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_SERVICE_PORT_TENSORBORAD=6006&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_2_BCU9MJPAJL6DHIBDOIUVG_PORT_8000_TCP=tcp://10.96.3.191:8000&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_2_BCU9MJPAJL6DHIBDOIUVG_PORT_8000_TCP_PROTO=tcp&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_SERVICE_PORT_SSH=22&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_PORT_22_TCP_PORT=22&quot;</span>, <span class="hljs-string">&quot;DD18J57IJL6DRLTBNSTHG_PORT_8000_TCP=tcp://10.96.3.66:8000&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_PORT_6006_TCP=tcp://10.96.2.73:6006&quot;</span>, <span class="hljs-string">&quot;KUBERNETES_SERVICE_PORT=443&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_PORT=tcp://10.96.3.133:8888&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_PORT_22_TCP=tcp://10.96.3.133:22&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_2_BCU9MJPAJL6DHIBDOIUVG_SERVICE_HOST=10.96.3.191&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_PORT_22_TCP=tcp://10.96.2.122:22&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_SERVICE_HOST=10.96.2.122&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_1_LCU9MGHAJL6DHIBDOIUTG_SERVICE_HOST=10.96.1.39&quot;</span>, <span class="hljs-string">&quot;KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_PORT_22_TCP_PROTO=tcp&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_1_LCU9MGHAJL6DHIBDOIUTG_PORT=tcp://10.96.1.39:8000&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_PORT_22_TCP_PROTO=tcp&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_PORT_22_TCP_PROTO=tcp&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_3_ICU9MRKAJL6DHIBDOIV0G_PORT_8000_TCP=tcp://10.96.3.247:8000&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_PORT_22_TCP_PORT=22&quot;</span>, <span class="hljs-string">&quot;DD18J57IJL6DRLTBNSTHG_PORT_8000_TCP_PORT=8000&quot;</span>, <span class="hljs-string">&quot;UPFS_SERVE_4_XCU935EQJL6DQ7K2QEVA0_PORT_8000_TCP_PORT=8000&quot;</span>, <span class="hljs-string">&quot;KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1&quot;</span>, <span class="hljs-string">&quot;UPFS_SERVE_3_ECU933H2JL6DQ7K2QEV9G_PORT=tcp://10.96.3.67:8000&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_PORT_8888_TCP_PROTO=tcp&quot;</span>, <span class="hljs-string">&quot;KUBERNETES_PORT=tcp://10.96.0.1:443&quot;</span>, <span class="hljs-string">&quot;KUBERNETES_PORT_443_TCP_PORT=443&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_1_LCU9MGHAJL6DHIBDOIUTG_SERVICE_PORT=8000&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_PORT_8888_TCP=tcp://10.96.2.73:8888&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_SERVICE_PORT_HTTP=8888&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_PORT_22_TCP_ADDR=10.96.2.122&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_SERVICE_HOST=10.96.3.133&quot;</span>, <span class="hljs-string">&quot;DD18J57IJL6DRLTBNSTHG_SERVICE_PORT=8000&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_2_BCU9MJPAJL6DHIBDOIUVG_SERVICE_PORT=8000&quot;</span>, <span class="hljs-string">&quot;UPFS_SERVE_4_XCU935EQJL6DQ7K2QEVA0_PORT_8000_TCP_ADDR=10.96.0.106&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_1_LCU9MGHAJL6DHIBDOIUTG_PORT_8000_TCP_PROTO=tcp&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_1_LCU9MGHAJL6DHIBDOIUTG_PORT_8000_TCP_PORT=8000&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_2_BCU9MJPAJL6DHIBDOIUVG_PORT_8000_TCP_ADDR=10.96.3.191&quot;</span>, <span class="hljs-string">&quot;UPFS_SERVE_3_ECU933H2JL6DQ7K2QEV9G_SERVICE_PORT_PORT_8000=8000&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_SERVICE_PORT_HTTP=8888&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_1_LCU9MGHAJL6DHIBDOIUTG_PORT_8000_TCP=tcp://10.96.1.39:8000&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_PORT_8888_TCP_PORT=8888&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_PORT_22_TCP_ADDR=10.96.3.133&quot;</span>, <span class="hljs-string">&quot;UPFS_SERVE_4_XCU935EQJL6DQ7K2QEVA0_SERVICE_PORT_PORT_8000=8000&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_PORT_22_TCP_ADDR=10.96.2.73&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_SERVICE_PORT=8888&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_3_ICU9MRKAJL6DHIBDOIV0G_PORT=tcp://10.96.3.247:8000&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_SERVICE_PORT_SSH=22&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_PORT_8888_TCP_PROTO=tcp&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_PORT_6006_TCP_PROTO=tcp&quot;</span>, <span class="hljs-string">&quot;ZERO_GPU_PORT_6006_TCP_ADDR=10.96.3.133&quot;</span>, <span class="hljs-string">&quot;DD18J57IJL6DRLTBNSTHG_PORT_8000_TCP_ADDR=10.96.3.66&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_PORT_6006_TCP_PROTO=tcp&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_3_ICU9MRKAJL6DHIBDOIV0G_PORT_8000_TCP_PORT=8000&quot;</span>, <span class="hljs-string">&quot;DD18J57IJL6DRLTBNSTHG_SERVICE_HOST=10.96.3.66&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_PORT_6006_TCP_PORT=6006&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_PORT_6006_TCP_PORT=6006&quot;</span>, <span class="hljs-string">&quot;UPFS_SERVE_4_XCU935EQJL6DQ7K2QEVA0_PORT=tcp://10.96.0.106:8000&quot;</span>, <span class="hljs-string">&quot;PP_READNESS_1_LCU9MGHAJL6DHIBDOIUTG_SERVICE_PORT_PORT_8000=8000&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_SERVICE_HOST=10.96.2.73&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_SERVICE_PORT=8888&quot;</span>, <span class="hljs-string">&quot;TY_TEST_4_PORT_8888_TCP_ADDR=10.96.2.73&quot;</span>, <span class="hljs-string">&quot;TY_TEST_6_PORT_8888_TCP_PORT=8888&quot;</span>, <span class="hljs-string">&quot;KUBERNETES_SERVICE_PORT_HTTPS=443&quot;</span>, <span class="hljs-string">&quot;UPFS_SERVE_3_ECU933H2JL6DQ7K2QEV9G_PORT_8000_TCP=tcp://10.96.3.67:8000&quot;</span>],<br>                <span class="hljs-string">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>                <span class="hljs-string">&quot;capabilities&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;bounding&quot;</span>: [<span class="hljs-string">&quot;CAP_CHOWN&quot;</span>, <span class="hljs-string">&quot;CAP_DAC_OVERRIDE&quot;</span>, <span class="hljs-string">&quot;CAP_FSETID&quot;</span>, <span class="hljs-string">&quot;CAP_FOWNER&quot;</span>, <span class="hljs-string">&quot;CAP_MKNOD&quot;</span>, <span class="hljs-string">&quot;CAP_NET_RAW&quot;</span>, <span class="hljs-string">&quot;CAP_SETGID&quot;</span>, <span class="hljs-string">&quot;CAP_SETUID&quot;</span>, <span class="hljs-string">&quot;CAP_SETFCAP&quot;</span>, <span class="hljs-string">&quot;CAP_SETPCAP&quot;</span>, <span class="hljs-string">&quot;CAP_NET_BIND_SERVICE&quot;</span>, <span class="hljs-string">&quot;CAP_SYS_CHROOT&quot;</span>, <span class="hljs-string">&quot;CAP_KILL&quot;</span>, <span class="hljs-string">&quot;CAP_AUDIT_WRITE&quot;</span>],<br>                        <span class="hljs-string">&quot;effective&quot;</span>: [<span class="hljs-string">&quot;CAP_CHOWN&quot;</span>, <span class="hljs-string">&quot;CAP_DAC_OVERRIDE&quot;</span>, <span class="hljs-string">&quot;CAP_FSETID&quot;</span>, <span class="hljs-string">&quot;CAP_FOWNER&quot;</span>, <span class="hljs-string">&quot;CAP_MKNOD&quot;</span>, <span class="hljs-string">&quot;CAP_NET_RAW&quot;</span>, <span class="hljs-string">&quot;CAP_SETGID&quot;</span>, <span class="hljs-string">&quot;CAP_SETUID&quot;</span>, <span class="hljs-string">&quot;CAP_SETFCAP&quot;</span>, <span class="hljs-string">&quot;CAP_SETPCAP&quot;</span>, <span class="hljs-string">&quot;CAP_NET_BIND_SERVICE&quot;</span>, <span class="hljs-string">&quot;CAP_SYS_CHROOT&quot;</span>, <span class="hljs-string">&quot;CAP_KILL&quot;</span>, <span class="hljs-string">&quot;CAP_AUDIT_WRITE&quot;</span>],<br>                        <span class="hljs-string">&quot;permitted&quot;</span>: [<span class="hljs-string">&quot;CAP_CHOWN&quot;</span>, <span class="hljs-string">&quot;CAP_DAC_OVERRIDE&quot;</span>, <span class="hljs-string">&quot;CAP_FSETID&quot;</span>, <span class="hljs-string">&quot;CAP_FOWNER&quot;</span>, <span class="hljs-string">&quot;CAP_MKNOD&quot;</span>, <span class="hljs-string">&quot;CAP_NET_RAW&quot;</span>, <span class="hljs-string">&quot;CAP_SETGID&quot;</span>, <span class="hljs-string">&quot;CAP_SETUID&quot;</span>, <span class="hljs-string">&quot;CAP_SETFCAP&quot;</span>, <span class="hljs-string">&quot;CAP_SETPCAP&quot;</span>, <span class="hljs-string">&quot;CAP_NET_BIND_SERVICE&quot;</span>, <span class="hljs-string">&quot;CAP_SYS_CHROOT&quot;</span>, <span class="hljs-string">&quot;CAP_KILL&quot;</span>, <span class="hljs-string">&quot;CAP_AUDIT_WRITE&quot;</span>]<br>                &#125;,<br>                <span class="hljs-string">&quot;apparmorProfile&quot;</span>: <span class="hljs-string">&quot;cri-containerd.apparmor.d&quot;</span>,<br>                <span class="hljs-string">&quot;oomScoreAdj&quot;</span>: <span class="hljs-number">1000</span><br>        &#125;,<br>        <span class="hljs-string">&quot;root&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;rootfs&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;mounts&quot;</span>: [&#123;<br>                <span class="hljs-string">&quot;destination&quot;</span>: <span class="hljs-string">&quot;/proc&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;proc&quot;</span>,<br>                <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;proc&quot;</span>,<br>                <span class="hljs-string">&quot;options&quot;</span>: [<span class="hljs-string">&quot;nosuid&quot;</span>, <span class="hljs-string">&quot;noexec&quot;</span>, <span class="hljs-string">&quot;nodev&quot;</span>]<br>        &#125;, &#123;<br>                <span class="hljs-string">&quot;destination&quot;</span>: <span class="hljs-string">&quot;/dev&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;tmpfs&quot;</span>,<br>                <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;tmpfs&quot;</span>,<br>                <span class="hljs-string">&quot;options&quot;</span>: [<span class="hljs-string">&quot;nosuid&quot;</span>, <span class="hljs-string">&quot;strictatime&quot;</span>, <span class="hljs-string">&quot;mode=755&quot;</span>, <span class="hljs-string">&quot;size=65536k&quot;</span>]<br>        &#125;, &#123;<br>                <span class="hljs-string">&quot;destination&quot;</span>: <span class="hljs-string">&quot;/dev/pts&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;devpts&quot;</span>,<br>                <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;devpts&quot;</span>,<br>                <span class="hljs-string">&quot;options&quot;</span>: [<span class="hljs-string">&quot;nosuid&quot;</span>, <span class="hljs-string">&quot;noexec&quot;</span>, <span class="hljs-string">&quot;newinstance&quot;</span>, <span class="hljs-string">&quot;ptmxmode=0666&quot;</span>, <span class="hljs-string">&quot;mode=0620&quot;</span>, <span class="hljs-string">&quot;gid=5&quot;</span>]<br>        &#125;, &#123;<br>                <span class="hljs-string">&quot;destination&quot;</span>: <span class="hljs-string">&quot;/dev/mqueue&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;mqueue&quot;</span>,<br>                <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;mqueue&quot;</span>,<br>                <span class="hljs-string">&quot;options&quot;</span>: [<span class="hljs-string">&quot;nosuid&quot;</span>, <span class="hljs-string">&quot;noexec&quot;</span>, <span class="hljs-string">&quot;nodev&quot;</span>]<br>        &#125;, &#123;<br>                <span class="hljs-string">&quot;destination&quot;</span>: <span class="hljs-string">&quot;/sys&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;sysfs&quot;</span>,<br>                <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;sysfs&quot;</span>,<br>                <span class="hljs-string">&quot;options&quot;</span>: [<span class="hljs-string">&quot;nosuid&quot;</span>, <span class="hljs-string">&quot;noexec&quot;</span>, <span class="hljs-string">&quot;nodev&quot;</span>, <span class="hljs-string">&quot;ro&quot;</span>]<br>        &#125;, &#123;<br>                <span class="hljs-string">&quot;destination&quot;</span>: <span class="hljs-string">&quot;/sys/fs/cgroup&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;cgroup&quot;</span>,<br>                <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;cgroup&quot;</span>,<br>                <span class="hljs-string">&quot;options&quot;</span>: [<span class="hljs-string">&quot;nosuid&quot;</span>, <span class="hljs-string">&quot;noexec&quot;</span>, <span class="hljs-string">&quot;nodev&quot;</span>, <span class="hljs-string">&quot;relatime&quot;</span>, <span class="hljs-string">&quot;ro&quot;</span>]<br>        &#125;, &#123;<br>                <span class="hljs-string">&quot;destination&quot;</span>: <span class="hljs-string">&quot;/data&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;bind&quot;</span>,<br>                <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;/var/lib/kubelet/pods/ff33eff6-f8af-4143-adee-bbf1ed7a2026/volumes/kubernetes.io~csi/pvc-37a5c547-74cf-4c73-96d9-7a096a36aaca/mount&quot;</span>,<br>                <span class="hljs-string">&quot;options&quot;</span>: [<span class="hljs-string">&quot;rbind&quot;</span>, <span class="hljs-string">&quot;rprivate&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>]<br>        &#125;, &#123;<br>                <span class="hljs-string">&quot;destination&quot;</span>: <span class="hljs-string">&quot;/etc/hosts&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;bind&quot;</span>,<br>                <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;/var/lib/kubelet/pods/ff33eff6-f8af-4143-adee-bbf1ed7a2026/etc-hosts&quot;</span>,<br>                <span class="hljs-string">&quot;options&quot;</span>: [<span class="hljs-string">&quot;rbind&quot;</span>, <span class="hljs-string">&quot;rprivate&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>]<br>        &#125;, &#123;<br>                <span class="hljs-string">&quot;destination&quot;</span>: <span class="hljs-string">&quot;/dev/termination-log&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;bind&quot;</span>,<br>                <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;/var/lib/kubelet/pods/ff33eff6-f8af-4143-adee-bbf1ed7a2026/containers/dd18j57ijl6drltbnsthg/b178e847&quot;</span>,<br>                <span class="hljs-string">&quot;options&quot;</span>: [<span class="hljs-string">&quot;rbind&quot;</span>, <span class="hljs-string">&quot;rprivate&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>]<br>        &#125;, &#123;<br>                <span class="hljs-string">&quot;destination&quot;</span>: <span class="hljs-string">&quot;/etc/hostname&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;bind&quot;</span>,<br>                <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;/var/lib/containerd/io.containerd.grpc.v1.cri/sandboxes/42bbbae33894fcac196230278c819a50822e48d2a1f69c246dc3796ed4b9db6f/hostname&quot;</span>,<br>                <span class="hljs-string">&quot;options&quot;</span>: [<span class="hljs-string">&quot;rbind&quot;</span>, <span class="hljs-string">&quot;rprivate&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>]<br>        &#125;, &#123;<br>                <span class="hljs-string">&quot;destination&quot;</span>: <span class="hljs-string">&quot;/etc/resolv.conf&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;bind&quot;</span>,<br>                <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;/var/lib/containerd/io.containerd.grpc.v1.cri/sandboxes/42bbbae33894fcac196230278c819a50822e48d2a1f69c246dc3796ed4b9db6f/resolv.conf&quot;</span>,<br>                <span class="hljs-string">&quot;options&quot;</span>: [<span class="hljs-string">&quot;rbind&quot;</span>, <span class="hljs-string">&quot;rprivate&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>]<br>        &#125;, &#123;<br>                <span class="hljs-string">&quot;destination&quot;</span>: <span class="hljs-string">&quot;/dev/shm&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;bind&quot;</span>,<br>                <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;/run/containerd/io.containerd.grpc.v1.cri/sandboxes/42bbbae33894fcac196230278c819a50822e48d2a1f69c246dc3796ed4b9db6f/shm&quot;</span>,<br>                <span class="hljs-string">&quot;options&quot;</span>: [<span class="hljs-string">&quot;rbind&quot;</span>, <span class="hljs-string">&quot;rprivate&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>]<br>        &#125;, &#123;<br>                <span class="hljs-string">&quot;destination&quot;</span>: <span class="hljs-string">&quot;/var/run/secrets/kubernetes.io/serviceaccount&quot;</span>,<br>                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;bind&quot;</span>,<br>                <span class="hljs-string">&quot;source&quot;</span>: <span class="hljs-string">&quot;/var/lib/kubelet/pods/ff33eff6-f8af-4143-adee-bbf1ed7a2026/volumes/kubernetes.io~projected/kube-api-access-g657t&quot;</span>,<br>                <span class="hljs-string">&quot;options&quot;</span>: [<span class="hljs-string">&quot;rbind&quot;</span>, <span class="hljs-string">&quot;rprivate&quot;</span>, <span class="hljs-string">&quot;ro&quot;</span>]<br>        &#125;],<br>        <span class="hljs-string">&quot;hooks&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;prestart&quot;</span>: [&#123;<br>                        <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/usr/local/nvidia/toolkit/nvidia-container-runtime-hook&quot;</span>,<br>                        <span class="hljs-string">&quot;args&quot;</span>: [<span class="hljs-string">&quot;nvidia-container-runtime-hook&quot;</span>, <span class="hljs-string">&quot;prestart&quot;</span>]<br>                &#125;]<br>        &#125;,<br>        <span class="hljs-string">&quot;annotations&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;io.kubernetes.cri.container-name&quot;</span>: <span class="hljs-string">&quot;dd18j57ijl6drltbnsthg&quot;</span>,<br>                <span class="hljs-string">&quot;io.kubernetes.cri.container-type&quot;</span>: <span class="hljs-string">&quot;container&quot;</span>,<br>                <span class="hljs-string">&quot;io.kubernetes.cri.image-name&quot;</span>: <span class="hljs-string">&quot;harbor.uic.com:30500/library/vllm-openai:v0.6.0-beta1&quot;</span>,<br>                <span class="hljs-string">&quot;io.kubernetes.cri.sandbox-id&quot;</span>: <span class="hljs-string">&quot;42bbbae33894fcac196230278c819a50822e48d2a1f69c246dc3796ed4b9db6f&quot;</span>,<br>                <span class="hljs-string">&quot;io.kubernetes.cri.sandbox-name&quot;</span>: <span class="hljs-string">&quot;dd18j57ijl6drltbnsthg-7f895b8548-bt6n5&quot;</span>,<br>                <span class="hljs-string">&quot;io.kubernetes.cri.sandbox-namespace&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>                <span class="hljs-string">&quot;io.kubernetes.cri.sandbox-uid&quot;</span>: <span class="hljs-string">&quot;ff33eff6-f8af-4143-adee-bbf1ed7a2026&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;linux&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;resources&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;devices&quot;</span>: [&#123;<br>                                <span class="hljs-string">&quot;allow&quot;</span>: <span class="hljs-literal">false</span>,<br>                                <span class="hljs-string">&quot;access&quot;</span>: <span class="hljs-string">&quot;rwm&quot;</span><br>                        &#125;],<br>                        <span class="hljs-string">&quot;memory&quot;</span>: &#123;&#125;,<br>                        <span class="hljs-string">&quot;cpu&quot;</span>: &#123;<br>                                <span class="hljs-string">&quot;shares&quot;</span>: <span class="hljs-number">2</span>,<br>                                <span class="hljs-string">&quot;period&quot;</span>: <span class="hljs-number">100000</span><br>                        &#125;<br>                &#125;,<br>                <span class="hljs-string">&quot;cgroupsPath&quot;</span>: <span class="hljs-string">&quot;kubepods-besteffort-podff33eff6_f8af_4143_adee_bbf1ed7a2026.slice:cri-containerd:bbd18f9b44e51715b5bc2916ee7b658fe79a0ebe0e724eb76572a30b36e2e7fd&quot;</span>,<br>                <span class="hljs-string">&quot;namespaces&quot;</span>: [&#123;<br>                        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;pid&quot;</span><br>                &#125;, &#123;<br>                        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;ipc&quot;</span>,<br>                        <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/proc/1866610/ns/ipc&quot;</span><br>                &#125;, &#123;<br>                        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;uts&quot;</span>,<br>                        <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/proc/1866610/ns/uts&quot;</span><br>                &#125;, &#123;<br>                        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;mount&quot;</span><br>                &#125;, &#123;<br>                        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;network&quot;</span>,<br>                        <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/proc/1866610/ns/net&quot;</span><br>                &#125;, &#123;<br>                        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;cgroup&quot;</span><br>                &#125;],<br>                <span class="hljs-string">&quot;maskedPaths&quot;</span>: [<span class="hljs-string">&quot;/proc/asound&quot;</span>, <span class="hljs-string">&quot;/proc/acpi&quot;</span>, <span class="hljs-string">&quot;/proc/kcore&quot;</span>, <span class="hljs-string">&quot;/proc/keys&quot;</span>, <span class="hljs-string">&quot;/proc/latency_stats&quot;</span>, <span class="hljs-string">&quot;/proc/timer_list&quot;</span>, <span class="hljs-string">&quot;/proc/timer_stats&quot;</span>, <span class="hljs-string">&quot;/proc/sched_debug&quot;</span>, <span class="hljs-string">&quot;/proc/scsi&quot;</span>, <span class="hljs-string">&quot;/sys/firmware&quot;</span>],<br>                <span class="hljs-string">&quot;readonlyPaths&quot;</span>: [<span class="hljs-string">&quot;/proc/bus&quot;</span>, <span class="hljs-string">&quot;/proc/fs&quot;</span>, <span class="hljs-string">&quot;/proc/irq&quot;</span>, <span class="hljs-string">&quot;/proc/sys&quot;</span>, <span class="hljs-string">&quot;/proc/sysrq-trigger&quot;</span>]<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>nvidia-container-runtime本身也有一些配置，其配置文件位于&#x2F;etc&#x2F;nvidia-container-runtime&#x2F;config.toml<br>默认nvidia-container-runtime的oci实现会配置为”docker-runc”, “runc”, “crun”这三种，一般主机上都会使用runc，如果想要使用其他的容器实现，需要修改配置文件的runtimes字段</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[nvidia-container-runtime]</span><br><span class="hljs-comment">#debug = &quot;/var/log/nvidia-container-runtime.log&quot;</span><br><span class="hljs-attr">log-level</span> = <span class="hljs-string">&quot;info&quot;</span><br><span class="hljs-attr">mode</span> = <span class="hljs-string">&quot;auto&quot;</span><br><span class="hljs-attr">runtimes</span> = [<span class="hljs-string">&quot;docker-runc&quot;</span>, <span class="hljs-string">&quot;runc&quot;</span>, <span class="hljs-string">&quot;crun&quot;</span>]<br></code></pre></td></tr></table></figure><h4 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h4><p>runtime提供三种mode选项，不过我们常用的mode就是legacy</p><ul><li>Auto Mode： 根据容器的运行平台来决定用哪种mode</li><li>Legacy Mode：常规使用的mode，运行流程就是上述所说的运行流程</li><li>CSV Mode： 可以配置一个csv的表格来决定将哪些主机上的目录映射进容器中，在&#x2F;etc&#x2F;nvidia-container-runtime&#x2F;config.toml中可以配置目录，默认为nvidia-container-runtime.modes.csv.mount-spec-path</li></ul><h4 id="Environment-variables"><a href="#Environment-variables" class="headerlink" title="Environment variables"></a>Environment variables</h4><p>有一些环境变量，可以在容器启动时候传入，这些环境变量将影响容器可使用的gpu的行为，注：某些变量是可以由镜像去设置，之后在启动时进行校验或者影响运行行为</p><ul><li>NVIDIA_VISIBLE_DEVICES： 哪些gpu可见，可选值: 0,1,2, GPU-fef8089b,all,none,void</li><li>NVIDIA_MIG_CONFIG_DEVICES：决定容器是否能执行mig操作，可选值：all</li><li>NVIDIA_MIG_MONITOR_DEVICES： 决定哪些可见 GPU 可以从容器内监控其所有 MIG 设备的汇总信息。可选值: all</li><li>NVIDIA_DRIVER_CAPABILITIES：决定哪些驱动能力可以在容器内被使用，可选值： all，compute，compat32，graphics，utility，video，display</li><li>NVIDIA_REQUIRE_CUDA: 运行所要求的cuda版本，如果不满足 则容器无法启动，可选值： cuda&gt;&#x3D;7.5, cuda&gt;&#x3D;8.0, cuda&gt;&#x3D;9.0等</li></ul><h4 id="nvidia-container-runtime-hook"><a href="#nvidia-container-runtime-hook" class="headerlink" title="nvidia-container-runtime-hook"></a>nvidia-container-runtime-hook</h4><p>由runc的prestart hook回调，这个组件是一个命令行可执行文件，其通过读取config.json、容器启动命令、主机上nvidia驱动的信息，当前容器是否需要GPU等，拼接成一个调用nvidia-container-cli的命令<br>功能很简单，代码在：<a href="https://github.com/NVIDIA/nvidia-container-toolkit/blob/main/cmd/nvidia-container-runtime-hook/main.go">https://github.com/NVIDIA/nvidia-container-toolkit/blob/main/cmd/nvidia-container-runtime-hook/main.go</a></p><p>runc在容器的生命周期可以插入回调机制，可以将自定义插件插入到容器的生命周期中</p><table><thead><tr><th>Name</th><th>Namespace</th><th>When</th></tr></thead><tbody><tr><td>prestart (Deprecated)</td><td>runtime</td><td>在创建操作期间，在创建运行时namespace之后，但在执行 pivot_root 或任何等效操作之前。（没真正“切换”进容器的根文件系统之前）</td></tr><tr><td>createRuntime</td><td>runtime</td><td>同上</td></tr><tr><td>createContainer</td><td>container</td><td>同上，但namespace已经切换到了container的namespace</td></tr><tr><td>startContainer</td><td>container</td><td>在调用 start 操作之后，但在执行用户指定的程序命令之前。</td></tr><tr><td>poststart</td><td>runtime</td><td>在用户指定的进程已执行之后，但在 start 操作返回之前。这个会插入在runc start 命令还没有退出的时候。</td></tr><tr><td>poststop</td><td>runtime</td><td>在容器已被删除之后，但在 delete 操作返回之前。会插入在runc delete 命令还在执行，还没有退出的时候。</td></tr></tbody></table><h3 id="libnvidia-container"><a href="#libnvidia-container" class="headerlink" title="libnvidia-container"></a>libnvidia-container</h3><p>真正将驱动和设备挂载进容器的核心，其通过linux kernel的操作，将nvidia的设备隔离并将其挂载进指定的linux namespace中，这个库由c++实现</p><p>libnvidia-container，并且提供定义明确的 APIlibnvidia-container.so和调用的cli工具nvidia-container-cli，nvidia-container-runtime-hook通过调用nvidia-container-cli 命令行来执行libnvidia-container的操作。<br>其核心提供两方面的挂载</p><ul><li>nvc_driver_mount</li><li>nvc_device_mount<br><a href="https://github.com/NVIDIA/libnvidia-container/blob/main/src/nvc_mount.c">https://github.com/NVIDIA/libnvidia-container/blob/main/src/nvc_mount.c</a><br><strong>会挂载哪些设备</strong>：</li><li>&#x2F;dev&#x2F;nvidia0, &#x2F;dev&#x2F;nvidia1等gpu</li><li>&#x2F;dev&#x2F;nvidiactl：NVIDIA GPU控制工具</li><li>&#x2F;dev&#x2F;nvidia-uvm，&#x2F;dev&#x2F;nvidia-uvm-tools 内存工具</li><li>&#x2F;dev&#x2F;nvidia-modeset：视频功能</li><li>&#x2F;usr&#x2F;bin&#x2F;nvidia*：二进制命令库<br><strong>会挂载哪些链接库</strong>：</li><li>&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libcuda.so.*</li><li>&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libnvidia-*</li><li>&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libcufft*</li><li>&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libcublas*<br>详细列表清单可以参考<strong>CDI定义</strong>章节</li></ul><p><strong>nvc_device_mount</strong></p><ul><li>如果在dxcore 下，挂载驱动程序存储密钥库</li><li>挂载device、procfs_gpu、更新app_profile、设置device_cgroup<br><strong>nvc_driver_mount</strong></li><li>Procfs </li><li>Application profile</li><li>Host binary and library  </li><li>Container library </li><li>Firmware</li><li>挂载fabricmanager的IPC</li><li>其他<br>除此之外会有额外的一些校验和配置信息的处理，这里暂时还没有仔细研究</li></ul><h3 id="CDI"><a href="#CDI" class="headerlink" title="CDI"></a>CDI</h3><p>Container Device Interface (CDI)是一个标准，是容器运行时支持第三方设备的规范。<br>新版本的容器引擎现在都会支持新的CDI标准，用来将设备添加到容器运行时中<br>Nvidia 也提供了CDI的使用方式，不过目前使用nvidia cdi会和nvidia-container-runtime-hook冲突，不建议两种方式同时使用。</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">nvidia-ctk cdi <span class="hljs-keyword">generate</span> --<span class="hljs-keyword">output</span>=/etc/cdi/nvidia<span class="hljs-variable">.yaml</span><br></code></pre></td></tr></table></figure><p>其会在&#x2F;etc&#x2F;cdi&#x2F;nvidia.yaml生成所有挂载驱动和设备的说明，并可以使用nvidia-ctk cdi list来查看可以注入到docker的device列表</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ nvidia-ctk cdi list<br><br><span class="hljs-comment"># output</span><br><span class="hljs-built_in">INFO</span>[0000] Found 3 CDI devices<br>nvidia.com/<span class="hljs-attribute">gpu</span>=0<br>nvidia.com/<span class="hljs-attribute">gpu</span>=GPU-c99b45e6-a367-2b1b-b195-e4bdfc12a32b<br>nvidia.com/<span class="hljs-attribute">gpu</span>=all<br></code></pre></td></tr></table></figure><p>开启cdi<br>Containerd(比较好的支持版本是2024年的1.7.12之后的版本)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span><br>  <span class="hljs-attr">enable_cdi</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-attr">cdi_spec_dirs</span> = [<span class="hljs-string">&quot;/etc/cdi&quot;</span>, <span class="hljs-string">&quot;/var/run/cdi&quot;</span>]<br></code></pre></td></tr></table></figure><p>Docker(25.0.0版本之后)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;features&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;cdi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>新版本的containerd和docker都默认支持cdi，不需要显式开启</p><p>使用时：指定–device 指定到上述输出的device列表即可</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -it --device nvidia.com/gpu=all uhub.service.ucloud.cn/tongyang-k8s/ubuntu:22.04</span><br></code></pre></td></tr></table></figure><h4 id="CDI定义"><a href="#CDI定义" class="headerlink" title="CDI定义"></a>CDI定义</h4><p>CDI字段有如下含义：</p><ul><li>kind: 设备厂家代号，用于在–device时执行指定，这里为nvidia.com&#x2F;gpu</li><li>containerEdits: 定义设备的行为，如果在最外层，则代表不管用哪个详细设备，都会执行这套行为<ul><li>deviceNodes 需要将哪些宿主机上的设备挂载进容器中</li><li>env为容器添加的环境变量</li><li>Hooks 在容器生命周期中添加hook（可以参考nvidia-container-runtime-hook的部分）其会执行一个主机上的二进制命令</li><li>mounts 会将哪些设备挂载进容器中</li></ul></li><li>devices：设备列表<ul><li>name： 设备名，这个会在–device时指定要挂载哪个可选设备</li><li>containerEdits: 同上containerEdits一样，不过这个只会执行选定设备的行为</li></ul></li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">---</span><br><span class="hljs-attribute">cdiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">0.5.0</span><br><span class="hljs-attribute">containerEdits</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">deviceNodes</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">path: /dev/nvidia-uvm</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">path: /dev/nvidia-uvm-tools</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">path: /dev/nvidiactl</span><br>  <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">NVIDIA_VISIBLE_DEVICES=void</span><br>  <span class="hljs-attribute">hooks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">args:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nvidia-cdi-hook</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">create-symlinks</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">--link</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">../libnvidia-allocator.so.1::/usr/lib/x86_64-linux-gnu/gbm/nvidia-drm_gbm.so</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">--link</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">libnvidia-vulkan-producer.so.535.104.05::/usr/lib/x86_64-linux-gnu/libnvidia-vulkan-producer.so</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">--link</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">libglxserver_nvidia.so.535.104.05::/usr/lib64/xorg/modules/extensions/libglxserver_nvidia.so</span><br>    <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">NVIDIA_CTK_DEBUG=false</span><br>    <span class="hljs-attribute">hookName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">createContainer</span><br>    <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/bin/nvidia-cdi-hook</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">args:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nvidia-cdi-hook</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">create-symlinks</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">--link</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">libGLX_nvidia.so.535.104.05::/usr/lib/x86_64-linux-gnu/libGLX_indirect.so.0</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">--link</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">libcuda.so.1::/usr/lib/x86_64-linux-gnu/libcuda.so</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">--link</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">libnvidia-opticalflow.so.1::/usr/lib/x86_64-linux-gnu/libnvidia-opticalflow.so</span><br>    <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">NVIDIA_CTK_DEBUG=false</span><br>    <span class="hljs-attribute">hookName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">createContainer</span><br>    <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/bin/nvidia-cdi-hook</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">args:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nvidia-cdi-hook</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">enable-cuda-compat</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">--host-driver-version=535.104.05</span><br>    <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">NVIDIA_CTK_DEBUG=false</span><br>    <span class="hljs-attribute">hookName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">createContainer</span><br>    <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/bin/nvidia-cdi-hook</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">args:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nvidia-cdi-hook</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">update-ldcache</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">--folder</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">--folder</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/vdpau</span><br>    <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">NVIDIA_CTK_DEBUG=false</span><br>    <span class="hljs-attribute">hookName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">createContainer</span><br>    <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/bin/nvidia-cdi-hook</span><br>  <span class="hljs-attribute">mounts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/bin/nvidia-cuda-mps-control</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/bin/nvidia-cuda-mps-control</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/bin/nvidia-cuda-mps-server</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/bin/nvidia-cuda-mps-server</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/bin/nvidia-debugdump</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/bin/nvidia-debugdump</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/bin/nvidia-persistenced</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/bin/nvidia-persistenced</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/bin/nvidia-smi</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/bin/nvidia-smi</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /etc/vulkan/icd.d/nvidia_icd.json</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/etc/vulkan/icd.d/nvidia_icd.json</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /etc/vulkan/implicit_layer.d/nvidia_layers.json</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/etc/vulkan/implicit_layer.d/nvidia_layers.json</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libEGL_nvidia.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libEGL_nvidia.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libGLESv1_CM_nvidia.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libGLESv1_CM_nvidia.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libGLESv2_nvidia.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libGLESv2_nvidia.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libGLX_nvidia.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libGLX_nvidia.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libcuda.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libcuda.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libcudadebugger.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libcudadebugger.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvcuvid.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvcuvid.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-allocator.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-allocator.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-cfg.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-cfg.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-egl-gbm.so.1.1.0</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-egl-gbm.so.1.1.0</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-egl-wayland.so.1.1.11</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-egl-wayland.so.1.1.11</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-eglcore.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-eglcore.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-encode.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-encode.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-fbc.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-fbc.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-glcore.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-glcore.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-glsi.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-glsi.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-glvkspirv.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-glvkspirv.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-gtk2.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-gtk2.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-gtk3.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-gtk3.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-ml.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-ml.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-ngx.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-ngx.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-nvvm.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-nvvm.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-opencl.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-opencl.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-opticalflow.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-opticalflow.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-pkcs11-openssl3.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-pkcs11-openssl3.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-pkcs11.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-pkcs11.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-ptxjitcompiler.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-ptxjitcompiler.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-rtcore.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-rtcore.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-tls.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-tls.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-vulkan-producer.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-vulkan-producer.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvidia-wayland-client.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvidia-wayland-client.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/libnvoptix.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/libnvoptix.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/share/nvidia/nvoptix.bin</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/share/nvidia/nvoptix.bin</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /lib/firmware/nvidia/535.104.05/gsp_ga10x.bin</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/lib/firmware/nvidia/535.104.05/gsp_ga10x.bin</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /lib/firmware/nvidia/535.104.05/gsp_tu10x.bin</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/lib/firmware/nvidia/535.104.05/gsp_tu10x.bin</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib/x86_64-linux-gnu/vdpau/libvdpau_nvidia.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib/x86_64-linux-gnu/vdpau/libvdpau_nvidia.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/share/egl/egl_external_platform.d/10_nvidia_wayland.json</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/share/egl/egl_external_platform.d/10_nvidia_wayland.json</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/share/egl/egl_external_platform.d/15_nvidia_gbm.json</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/share/egl/egl_external_platform.d/15_nvidia_gbm.json</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/share/glvnd/egl_vendor.d/10_nvidia.json</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/share/glvnd/egl_vendor.d/10_nvidia.json</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib64/xorg/modules/drivers/nvidia_drv.so</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib64/xorg/modules/drivers/nvidia_drv.so</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPath: /usr/lib64/xorg/modules/extensions/libglxserver_nvidia.so.535.104.05</span><br>    <span class="hljs-attribute">hostPath</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/lib64/xorg/modules/extensions/libglxserver_nvidia.so.535.104.05</span><br>    <span class="hljs-attribute">options</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ro</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nosuid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nodev</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bind</span><br><span class="hljs-attribute">devices</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">containerEdits:</span><br>    <span class="hljs-attribute">deviceNodes</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">path: /dev/nvidia0</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">path: /dev/dri/card1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">path: /dev/dri/renderD128</span><br>    <span class="hljs-attribute">hooks</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">args:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nvidia-cdi-hook</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">create-symlinks</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--link</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../card1::/dev/dri/by-path/pci-0000:00:03.0-card</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--link</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../renderD128::/dev/dri/by-path/pci-0000:00:03.0-render</span><br>      <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">NVIDIA_CTK_DEBUG=false</span><br>      <span class="hljs-attribute">hookName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">createContainer</span><br>      <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/bin/nvidia-cdi-hook</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">args:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nvidia-cdi-hook</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">chmod</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--mode</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;755&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--path</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/dev/dri</span><br>      <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">NVIDIA_CTK_DEBUG=false</span><br>      <span class="hljs-attribute">hookName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">createContainer</span><br>      <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/bin/nvidia-cdi-hook</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">containerEdits:</span><br>    <span class="hljs-attribute">deviceNodes</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">path: /dev/nvidia0</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">path: /dev/dri/card1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">path: /dev/dri/renderD128</span><br>    <span class="hljs-attribute">hooks</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">args:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nvidia-cdi-hook</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">create-symlinks</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--link</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../card1::/dev/dri/by-path/pci-0000:00:03.0-card</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--link</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../renderD128::/dev/dri/by-path/pci-0000:00:03.0-render</span><br>      <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">NVIDIA_CTK_DEBUG=false</span><br>      <span class="hljs-attribute">hookName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">createContainer</span><br>      <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/bin/nvidia-cdi-hook</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">args:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nvidia-cdi-hook</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">chmod</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--mode</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;755&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--path</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/dev/dri</span><br>      <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">NVIDIA_CTK_DEBUG=false</span><br>      <span class="hljs-attribute">hookName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">createContainer</span><br>      <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/bin/nvidia-cdi-hook</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">GPU-c99b45e6-a367-2b1b-b195-e4bdfc12a32b</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">containerEdits:</span><br>    <span class="hljs-attribute">deviceNodes</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">path: /dev/nvidia0</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">path: /dev/dri/card1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">path: /dev/dri/renderD128</span><br>    <span class="hljs-attribute">hooks</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">args:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nvidia-cdi-hook</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">create-symlinks</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--link</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../card1::/dev/dri/by-path/pci-0000:00:03.0-card</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--link</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">../renderD128::/dev/dri/by-path/pci-0000:00:03.0-render</span><br>      <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">NVIDIA_CTK_DEBUG=false</span><br>      <span class="hljs-attribute">hookName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">createContainer</span><br>      <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/bin/nvidia-cdi-hook</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">args:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nvidia-cdi-hook</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">chmod</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--mode</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;755&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--path</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/dev/dri</span><br>      <span class="hljs-attribute">env</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">NVIDIA_CTK_DEBUG=false</span><br>      <span class="hljs-attribute">hookName</span><span class="hljs-punctuation">:</span> <span class="hljs-string">createContainer</span><br>      <span class="hljs-attribute">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/usr/bin/nvidia-cdi-hook</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">all</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">nvidia.com/gpu</span><br></code></pre></td></tr></table></figure><h4 id="nvidia-cdi-hook"><a href="#nvidia-cdi-hook" class="headerlink" title="nvidia-cdi-hook"></a>nvidia-cdi-hook</h4><p>相较于nvidia-container-runtime的使用，cdi的方式没有再采用c++编写的libnvidia-container，而是将其部分功能直接用golang重写了。<br>nvidia-cdi-hook提供了三种功能</p><ul><li>chmod - 更改文件或者目录的权限</li><li>create-symlinks - 在将要挂载到容器中的目录路径下创建符号链接（symlink）。</li><li>update-ldcache -更新将要挂载到容器中的目录路径下的动态链接器缓存。</li><li>enable-cuda-compat： 将包含 CUDA 兼容库的文件夹添加到 ldconfig 的搜索路径中。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MIG切分</title>
    <link href="/ika-new-blog/2025/05/03/mig/"/>
    <url>/ika-new-blog/2025/05/03/mig/</url>
    
    <content type="html"><![CDATA[<h2 id="GPU四种共享技术"><a href="#GPU四种共享技术" class="headerlink" title="GPU四种共享技术"></a>GPU四种共享技术</h2><ul><li>MIG切分 （nvidia mig）</li><li>内核劫持（cGPU、qGPU）</li><li>CUDA聚合（MPS）</li><li>CUDA劫持（hami）</li></ul><p>MIG（Multi-Instance GPU）是Ampere架构之后推出的新特性，主要用作GPU切分与虚拟化</p><h2 id="MIG切分过程"><a href="#MIG切分过程" class="headerlink" title="MIG切分过程"></a>MIG切分过程</h2><h3 id="过程1-分块"><a href="#过程1-分块" class="headerlink" title="过程1-分块"></a>过程1-分块</h3><p>如下图所示，GPU上面资源主要包括运算引擎和存储，对于这些资源可以进行划分，将一个A100 40GB的GPU进行资源划分，将算力均分为了7份，显存分割为了8份。相同的资源，在硬件上面可以认为有较高的匀质性。</p><img src="/ika-new-blog/2025/05/03/mig/image.png" class="" title="img"><p><strong>注意</strong>：不同的GPU型号显存可能有不同，有可能切分后不是整数，另外MIG切分会预留1G的显存用于管理切分数据</p><h3 id="过程2-组合"><a href="#过程2-组合" class="headerlink" title="过程2-组合"></a>过程2-组合</h3><p>如下图所示，组合是指将分块的资源进行重组搭配，主要是组合算力引擎和存储单元，如下所示，可以将1个算力单位和一个存储单位进行组合，从而够成了一个1g.5gb的GPU实例（子GPU）。当然，我们还以进行其它规格的组合。</p><img src="/ika-new-blog/2025/05/03/mig/image2.png" class="" title="img"><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p><strong>GPU Memory Slice</strong>: GPU内存切片（GPU memory slice）是GPU显存的最小划分单位，包含对应的内存控制器和缓存。一个GPU内存切片约占GPU总内存资源（包括容量和带宽）的八分之一。<br><strong>GPU Instance（GI）</strong> 是GPU切片与GPU引擎（如DMA、NVDEC等）的组合。GPU实例内的所有资源（包括全部GPU内存切片及其他GPU引擎）始终为共享状态，但其流式多处理器切片（SM切片）可进一步划分为计算实例（Compute Instance，CI）。GPU实例提供内存服务质量（QoS）。<br>每个GPU切片均包含独立的GPU内存资源，这些资源会限制可用容量与带宽，并提供内存QoS。具体分配比例如下：</p><ul><li>每个GPU内存切片：占用总GPU内存资源的1&#x2F;8（包括容量与带宽）；</li><li>每个GPU SM切片：占用总SM数量的1&#x2F;7。</li></ul><p><strong>Compute Instance (CI)</strong>：一个GPU实例可以进一步细分为多个计算实例（Compute Instance，CI）。每个计算实例包含其所属GPU实例的部分SM切片及其他GPU引擎（如DMA、NVDEC等）。同一GPU实例下的所有计算实例共享内存和引擎资源。</p><h3 id="这里抛个问题"><a href="#这里抛个问题" class="headerlink" title="这里抛个问题"></a>这里抛个问题</h3><p>为什么划分GI后还要划分CI，当我划分了1c.3g.20gb的子GPU后，剩余的2个CI能否分配？</p><p>答：GI划分和CI划分是两个阶段，需要先划分GI再划分CI，先创建了一个3g.20gb的GI，在划分了1c.3g.20gb的CI后，还可以在这个GI继续分配一个2c.3g.20gb或2个1c.3g.20gb的CI，他们之间除了SM外其余部分共享。</p><h2 id="切分操作"><a href="#切分操作" class="headerlink" title="切分操作"></a>切分操作</h2><p>如下使用H20用作测试</p><h3 id="开启mig切分（可针对某几个GPU）"><a href="#开启mig切分（可针对某几个GPU）" class="headerlink" title="开启mig切分（可针对某几个GPU）"></a>开启mig切分（可针对某几个GPU）</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvidia</span>-smi -i <span class="hljs-number">6</span>,<span class="hljs-number">7</span> -mig <span class="hljs-number">1</span><br><span class="hljs-comment"># -i 6,7 指对哪个gpu进行切分</span><br><span class="hljs-comment"># -mig 1 开启mig切分，0代表关闭</span><br></code></pre></td></tr></table></figure><img src="/ika-new-blog/2025/05/03/mig/operator1.png" class="" title="img"><h3 id="关闭mig切分"><a href="#关闭mig切分" class="headerlink" title="关闭mig切分"></a>关闭mig切分</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvidia</span>-smi -i <span class="hljs-number">6</span>,<span class="hljs-number">7</span> -mig <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="查看可创建子GPU的分割型号列表"><a href="#查看可创建子GPU的分割型号列表" class="headerlink" title="查看可创建子GPU的分割型号列表"></a>查看可创建子GPU的分割型号列表</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nvidia</span>-<span class="hljs-keyword">smi</span> mig -lgip<br></code></pre></td></tr></table></figure><img src="/ika-new-blog/2025/05/03/mig/operator2.png" class="" title="img"><ul><li>GPU 父GPU编号</li><li>Instance Profiles Name：切分型号名</li><li>ID：用于创建时指定当前型号</li><li>Instance Free&#x2F;Total：目前可分配数量与总数量</li><li>P2P： NVLINK支持情况</li><li>SM: Streaming Multiprocessors</li><li>CE: Copy Engine数量</li><li>DEC: NVDEC视频解码模块</li><li>JPEG： JPEG图片解码模块</li><li>ENC: 视频编码模块</li><li>OFA：Optical Flow Accelerator  光流加速器，高效计算视频或图像序列中像素的运动矢量</li></ul><h3 id="创建GI"><a href="#创建GI" class="headerlink" title="创建GI"></a>创建GI</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvidia</span>-smi mig -i <span class="hljs-number">6</span>,<span class="hljs-number">7</span> -cgi <span class="hljs-number">14</span> <br><span class="hljs-comment"># -i 6,7 指对哪个GPU做切分</span><br><span class="hljs-comment"># -cgi 14 配合nvidia-smi mig -lgip的返回值ID使用，指使用哪种型号创建子GPU 这里14指2g24gb</span><br><span class="hljs-attribute">nvidia</span>-smi mig -i <span class="hljs-number">6</span>,<span class="hljs-number">7</span> -cgi <span class="hljs-number">14</span> -C <br><span class="hljs-comment"># -C 同时一起创建CI</span><br></code></pre></td></tr></table></figure><img src="/ika-new-blog/2025/05/03/mig/operator3.png" class="" title="img"><p>切完后可以发现6和7的不同型号可分数量变化了</p><img src="/ika-new-blog/2025/05/03/mig/operator4.png" class="" title="img"><p>nvidia-smi</p><img src="/ika-new-blog/2025/05/03/mig/operator5.png" class="" title="img"><h3 id="删除GI"><a href="#删除GI" class="headerlink" title="删除GI"></a>删除GI</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvidia</span>-smi mig -dgi -i <span class="hljs-number">7</span> -gi <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>有CI的情况下不能删</p><h3 id="获得可创建CI列表"><a href="#获得可创建CI列表" class="headerlink" title="获得可创建CI列表"></a>获得可创建CI列表</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nvidia</span>-<span class="hljs-keyword">smi</span> mig -lcip<br></code></pre></td></tr></table></figure><img src="/ika-new-blog/2025/05/03/mig/operator6.png" class="" title="img"><h3 id="查看GI创建情况"><a href="#查看GI创建情况" class="headerlink" title="查看GI创建情况"></a>查看GI创建情况</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nvidia</span>-<span class="hljs-keyword">smi</span> mig -lgi<br></code></pre></td></tr></table></figure><img src="/ika-new-blog/2025/05/03/mig/operator7.png" class="" title="img"><h3 id="对某个Gi创建CI"><a href="#对某个Gi创建CI" class="headerlink" title="对某个Gi创建CI"></a>对某个Gi创建CI</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvidia</span>-smi mig -i <span class="hljs-number">7</span> -cci <span class="hljs-number">0</span> -gi <span class="hljs-number">3</span><br><span class="hljs-comment"># -i 7 对7号GPU进行切分</span><br><span class="hljs-comment"># -cci 0 配合nvidia-smi mig -lcip的返回值ID进行使用，表示创建哪种型号的CI</span><br><span class="hljs-comment"># -gi 3 指定在哪个GI基础上创建CI</span><br></code></pre></td></tr></table></figure><p>注： 之前创建的GI是2g24gb，所以可以创建2个c</p><img src="/ika-new-blog/2025/05/03/mig/operator8.png" class="" title="img"><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nvidia</span>-<span class="hljs-keyword">smi</span> -L<br></code></pre></td></tr></table></figure><img src="/ika-new-blog/2025/05/03/mig/operator9.png" class="" title="img"><h3 id="删除CI"><a href="#删除CI" class="headerlink" title="删除CI"></a>删除CI</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvidia</span>-smi mig -dci -i <span class="hljs-number">7</span> -gi <span class="hljs-number">3</span> -ci <span class="hljs-number">0</span><br><span class="hljs-comment"># -i GPU编号</span><br><span class="hljs-comment"># -gi 选择的GI</span><br><span class="hljs-comment"># -ci 选择的CI</span><br></code></pre></td></tr></table></figure><h2 id="支持机型"><a href="#支持机型" class="headerlink" title="支持机型"></a>支持机型</h2><table><thead><tr><th>Product</th><th>Architecture</th><th>Microarchitecture</th><th>Compute Capability</th><th>Memory Size</th><th>Max Number of Instances</th></tr></thead><tbody><tr><td>GB200</td><td>Blackwell</td><td>GB100</td><td>10</td><td>186GB</td><td>7</td></tr><tr><td>B200</td><td>Blackwell</td><td>GB100</td><td>10</td><td>180GB</td><td>7</td></tr><tr><td>H100-SXM5</td><td>Hopper</td><td>GH100</td><td>9</td><td>80GB</td><td>7</td></tr><tr><td>H100-PCIE</td><td>Hopper</td><td>GH100</td><td>9</td><td>80GB</td><td>7</td></tr><tr><td>H100-SXM5</td><td>Hopper</td><td>GH100</td><td>9</td><td>94GB</td><td>7</td></tr><tr><td>H100-PCIE</td><td>Hopper</td><td>GH100</td><td>9</td><td>94GB</td><td>7</td></tr><tr><td>H100 on GH200</td><td>Hopper</td><td>GH100</td><td>9</td><td>96GB</td><td>7</td></tr><tr><td>H200-SXM5</td><td>Hopper</td><td>GH100</td><td>9</td><td>141GB</td><td>7</td></tr><tr><td>H200 NVL</td><td>Hopper</td><td>GH100</td><td>9</td><td>141GB</td><td>7</td></tr><tr><td>A100-SXM4</td><td>NVIDIA Ampere architecture</td><td>GA100</td><td>8</td><td>40GB</td><td>7</td></tr><tr><td>A100-SXM4</td><td>NVIDIA Ampere architecture</td><td>GA100</td><td>8</td><td>80GB</td><td>7</td></tr><tr><td>A100-PCIE</td><td>NVIDIA Ampere architecture</td><td>GA100</td><td>8</td><td>40GB</td><td>7</td></tr><tr><td>A100-PCIE</td><td>NVIDIA Ampere architecture</td><td>GA100</td><td>8</td><td>80GB</td><td>7</td></tr><tr><td>A30</td><td>NVIDIA Ampere architecture</td><td>GA100</td><td>8</td><td>24GB</td><td>4</td></tr></tbody></table><h2 id="切分后的topo"><a href="#切分后的topo" class="headerlink" title="切分后的topo"></a>切分后的topo</h2><img src="/ika-new-blog/2025/05/03/mig/aftertopo.png" class="" title="img"><p>可以看到走mig切分后，就不能再走NVlink了，全部都是走PCIe<br>但是IB网卡的连接还是正常的。<br>&#x2F;&#x2F;todo 需要在容器内再看一下topo</p><h2 id="VLLM测试"><a href="#VLLM测试" class="headerlink" title="VLLM测试"></a>VLLM测试</h2><p>使用版本v0.8.4</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">CUDA_VISIBLE_DEVICES</span>=MIG-d2078697-d658-<span class="hljs-number">52</span>f0-b738-<span class="hljs-number">998301</span>ff8a20  vllm serve  /data/models/Qwen/Qwen2.<span class="hljs-number">5</span>-<span class="hljs-number">7</span>B-Instruct/ --max-model-len <span class="hljs-number">2048</span><br></code></pre></td></tr></table></figure><p>嗯 跑不起来，vllm内需要获取physical_device_id ，这里在转换时会报错<br>相关issue：<a href="https://github.com/vllm-project/vllm/issues/6551">https://github.com/vllm-project/vllm/issues/6551</a><br>于是修改了&#x2F;root&#x2F;miniconda3&#x2F;envs&#x2F;vllm084&#x2F;lib&#x2F;python3.12&#x2F;site-packages&#x2F;vllm&#x2F;platforms&#x2F;cuda.py的代码，增加find_physical_gpu_by_mig_uuid函数，并且在device_id_to_physical_device_id获取时调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_physical_gpu_by_mig_uuid</span>(<span class="hljs-params">target_mig_uuid: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    pynvml.nvmlInit()<br>    device_count = pynvml.nvmlDeviceGetCount()<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(device_count):<br>        handle = pynvml.nvmlDeviceGetHandleByIndex(i)<br>        <span class="hljs-keyword">try</span>:<br>            mig_mode, _ = pynvml.nvmlDeviceGetMigMode(handle)<br>            <span class="hljs-keyword">if</span> mig_mode != pynvml.NVML_DEVICE_MIG_ENABLE:<br>                <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">except</span> pynvml.NVMLError:<br>            <span class="hljs-keyword">continue</span><br><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(pynvml.nvmlDeviceGetMaxMigDeviceCount(handle)):<br>            <span class="hljs-keyword">try</span>:<br>                mig_handle = pynvml.nvmlDeviceGetMigDeviceHandleByIndex(handle, j)<br>                mig_uuid = pynvml.nvmlDeviceGetUUID(mig_handle)<br>                <span class="hljs-keyword">if</span> mig_uuid == target_mig_uuid:<br>                    pynvml.nvmlShutdown()<br>                    <span class="hljs-keyword">return</span> i<br>            <span class="hljs-keyword">except</span> pynvml.NVMLError:<br>                <span class="hljs-keyword">continue</span><br><br>    pynvml.nvmlShutdown()<br>    <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&quot;MIG UUID <span class="hljs-subst">&#123;target_mig_uuid&#125;</span> not found on any GPU.&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">device_id_to_physical_device_id</span>(<span class="hljs-params">device_id: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;CUDA_VISIBLE_DEVICES&quot;</span> <span class="hljs-keyword">in</span> os.environ:<br>        device_ids = os.environ[<span class="hljs-string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>].split(<span class="hljs-string">&quot;,&quot;</span>)<br>        <span class="hljs-keyword">if</span> device_ids == [<span class="hljs-string">&quot;&quot;</span>]:<br>            msg = (<br>                <span class="hljs-string">&quot;CUDA_VISIBLE_DEVICES is set to empty string, which means&quot;</span><br>                <span class="hljs-string">&quot; GPU support is disabled. If you are using ray, please unset&quot;</span><br>                <span class="hljs-string">&quot; the environment variable `CUDA_VISIBLE_DEVICES` inside the&quot;</span><br>                <span class="hljs-string">&quot; worker/actor. &quot;</span><br>                <span class="hljs-string">&quot;Check https://github.com/vllm-project/vllm/issues/8402 for&quot;</span><br>                <span class="hljs-string">&quot; more information.&quot;</span>)<br>            <span class="hljs-keyword">raise</span> RuntimeError(msg)<br>        physical_device_id = device_ids[device_id]<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(physical_device_id)<br>        <span class="hljs-keyword">except</span> ValueError:<br>            <span class="hljs-comment"># Not an int → Assume it&#x27;s a MIG UUID</span><br>            res = find_physical_gpu_by_mig_uuid(physical_device_id)<br>            <span class="hljs-built_in">print</span>(res)<br>            <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>改了之后遇到问题:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>bin/ld: cannot find -lcuda: No such file or directory<br>collect2: error: ld returned <span class="hljs-number">1</span> <span class="hljs-keyword">exit</span> status<br></code></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建libcuda.so 软连接</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -sf /usr/lib/x86_64-linux-gnu/libcuda.so.1 /usr/lib/x86_64-linux-gpu/libcuda.so<br><span class="hljs-comment"># 更新库缓存</span><br><span class="hljs-built_in">sudo</span> ldconfig<br><span class="hljs-comment"># 确认软连接创建成功</span><br><span class="hljs-built_in">ls</span> -l /usr/lib/x86_64-linux-gnu/libcuda*<br>ldconfig -p |grep cuda<br></code></pre></td></tr></table></figure><p>启动成功<br>nvitop监控</p><img src="/ika-new-blog/2025/05/03/mig/vllm2.png" class="" title="img"><p>启动genai-pref测试</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">genai-perf profile  -m <span class="hljs-string">/data/models/Qwen/Qwen2.5-7B-Instruct/</span> <span class="hljs-params">--endpoint</span> <span class="hljs-string">/v1/chat/completions</span> <span class="hljs-params">--endpoint-type</span> chat <span class="hljs-params">--service-kind</span> openai <span class="hljs-params">--streaming</span> <span class="hljs-params">--url</span> http:<span class="hljs-string">//localhost</span><span class="hljs-function">:8000</span> <span class="hljs-params">--request-rate</span> 2 <br></code></pre></td></tr></table></figure><img src="/ika-new-blog/2025/05/03/mig/vllm3.png" class="" title="img"><img src="/ika-new-blog/2025/05/03/mig/vllm4.png" class="" title="img"><img src="/ika-new-blog/2025/05/03/mig/vllm5.png" class="" title="img"><p>但是在nvitop和nvidia-smi中不能查询到子GPU的utils</p><h2 id="如何监控切分情况"><a href="#如何监控切分情况" class="headerlink" title="如何监控切分情况"></a>如何监控切分情况</h2><ul><li>可通过nvml获取</li><li>通过DCGMI获取</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">dcgmi discovery -c</span> <br></code></pre></td></tr></table></figure><img src="/ika-new-blog/2025/05/03/mig/monitor1.png" class="" title="img"><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">dcgmi <span class="hljs-keyword">group</span> <span class="hljs-title">-c</span> mig-metric-<span class="hljs-number">7</span> -a <span class="hljs-number">7</span>/<span class="hljs-number">3</span>/<span class="hljs-number">0</span><br>dcgmi <span class="hljs-keyword">group</span> <span class="hljs-title">--list</span><br></code></pre></td></tr></table></figure><img src="/ika-new-blog/2025/05/03/mig/monitor2.png" class="" title="img"><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dcgmi</span> profile -l -i <span class="hljs-number">7</span><br><span class="hljs-comment"># 查询要查询的指标</span><br></code></pre></td></tr></table></figure><img src="/ika-new-blog/2025/05/03/mig/monitor3.png" class="" title="img"><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dcgmi</span> dmon -e <span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>,<span class="hljs-number">1003</span>,<span class="hljs-number">1004</span>,<span class="hljs-number">1005</span>,<span class="hljs-number">1006</span>,<span class="hljs-number">1007</span>,<span class="hljs-number">1008</span> -g <span class="hljs-number">3</span><br><span class="hljs-comment">#监控1001到1008 这里先启动vllm，并开启benchmark</span><br></code></pre></td></tr></table></figure><img src="/ika-new-blog/2025/05/03/mig/monitor4.png" class="" title="img"><h2 id="dcgm-exporter"><a href="#dcgm-exporter" class="headerlink" title="dcgm-exporter"></a>dcgm-exporter</h2><p>常规用k8s的dcgm-exporter用作容器内的监控指标<br>但在开启mig后，会遇到两个bug</p><ol><li>在经过mig后，dcgm里， 出现DCGM_FI_DEV_MIG_CI_INFO这个字段报错ERROR - FAILED TO CONVERT TO STRING</li><li>dcgm里使用了string类型作为metrics的value，导致了prometheu的不兼容</li></ol><img src="/ika-new-blog/2025/05/03/mig/dcgm1.png" class="" title="img"><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">Error scraping <span class="hljs-params">target:</span> unsupported character <span class="hljs-keyword">in</span> float while <span class="hljs-params">parsing:</span> <span class="hljs-string">&quot;DCGM_FI_DEV_CUDA_VISIBLE_DEVICES_STR&#123;gpu=<span class="hljs-char escape_">\&quot;</span>0<span class="hljs-char escape_">\&quot;</span>,UUID=<span class="hljs-char escape_">\&quot;</span>GPU-66068b5a-84f7-e3c9-bc10-e21eae988090<span class="hljs-char escape_">\&quot;</span>,pci_bus_id=<span class="hljs-char escape_">\&quot;</span>00000000:09:00.0<span class="hljs-char escape_">\&quot;</span>,device=<span class="hljs-char escape_">\&quot;</span>nvidia0<span class="hljs-char escape_">\&quot;</span>,modelName=<span class="hljs-char escape_">\&quot;</span>NVIDIA H20<span class="hljs-char escape_">\&quot;</span>,GPU_I_PROFILE=<span class="hljs-char escape_">\&quot;</span>2g.24gb<span class="hljs-char escape_">\&quot;</span>,GPU_I_ID=<span class="hljs-char escape_">\&quot;</span>3<span class="hljs-char escape_">\&quot;</span>,Hostname=<span class="hljs-char escape_">\&quot;</span>10-60-57-149<span class="hljs-char escape_">\&quot;</span>,DCGM_FI_DEV_MIG_CI_INFO=<span class="hljs-char escape_">\&quot;</span>ERROR - FAILED TO CONVERT TO STRING<span class="hljs-char escape_">\&quot;</span>,DCGM_FI_DEV_MIG_GI_INFO=<span class="hljs-char escape_">\&quot;</span>ERROR - FAILED TO CONVERT TO STRING<span class="hljs-char escape_">\&quot;</span>&#125; MIG-GPU-66068b5a-84f7-e3c9-bc10-e21eae988090/3&quot;</span><br></code></pre></td></tr></table></figure><p><strong>这里我提了个pr去修复</strong>：<br><strong>Issue</strong>: <a href="https://github.com/NVIDIA/dcgm-exporter/issues/488">https://github.com/NVIDIA/dcgm-exporter/issues/488</a><br><strong>Pr</strong> : <a href="https://github.com/NVIDIA/dcgm-exporter/pull/489">https://github.com/NVIDIA/dcgm-exporter/pull/489</a><br>如果不修改这个 开启mig后 监控会挂掉，其他dcgm-exporter相关指标也会消失</p><h3 id="可看到mig的指标"><a href="#可看到mig的指标" class="headerlink" title="可看到mig的指标"></a>可看到mig的指标</h3><p>DCGM_FI_DEV_CUDA_VISIBLE_DEVICES_STR<br>DCGM_FI_DEV_MIG_MODE</p><h2 id="在k8s中使用"><a href="#在k8s中使用" class="headerlink" title="在k8s中使用"></a>在k8s中使用</h2><p>未完待续</p>]]></content>
    
    
    
    <tags>
      
      <tag>GPU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nccl-test</title>
    <link href="/ika-new-blog/2025/04/30/nccl/"/>
    <url>/ika-new-blog/2025/04/30/nccl/</url>
    
    <content type="html"><![CDATA[<h2 id="nccl-tests"><a href="#nccl-tests" class="headerlink" title="nccl-tests"></a>nccl-tests</h2><p>github: <a href="https://github.com/NVIDIA/nccl-tests">https://github.com/NVIDIA/nccl-tests</a></p><p>NVIDIA Collective Communications Library (NCCL) 是 NVIDIA 提供的高性能 GPU 通信库，专为多 GPU 和多节点通信优化，广泛应用于深度学习训练（如 PyTorch、TensorFlow）和 HPC 领域。</p><p>NCCL 支持多种通信模式：</p><ul><li>AllReduce（全局规约）</li><li>Broadcast（广播）</li><li>AllGather（全收集）</li><li>ReduceScatter（规约分散）</li><li>Point-to-Point（点对点通信）</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要安装两个东西 一个是openmpi，一个是nccl-tests</p><h3 id="openmpi"><a href="#openmpi" class="headerlink" title="openmpi"></a>openmpi</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>download.open-mpi.org<span class="hljs-regexp">/release/</span>open-mpi<span class="hljs-regexp">/v4.1/</span>openmpi-<span class="hljs-number">4.1</span>.<span class="hljs-number">8</span>.tar.gz<br>tar -xvzf openmpi-<span class="hljs-number">4.1</span>.<span class="hljs-number">8</span>.tar.gz<br>cd openmpi-<span class="hljs-number">4.1</span>.<span class="hljs-number">8</span><br>.<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>openmpi<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h3 id="nccl-test"><a href="#nccl-test" class="headerlink" title="nccl-test"></a>nccl-test</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/NVIDIA/nccl-tests.git<br><span class="hljs-built_in">cd</span> nccl-tests<br>make -j40 MPI=1 MPI_HOME=/usr/local/openmpi<br></code></pre></td></tr></table></figure><p>如果出现 nccl.h: No such file or directory<br>则是没有安装nccl</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">sudo apt-<span class="hljs-built_in">get</span> install libnccl2 libnccl-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><h3 id="启动示例"><a href="#启动示例" class="headerlink" title="启动示例"></a>启动示例</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ruby">mpirun --allow-run-as-root -np <span class="hljs-number">16</span> \<br>--oversubscribe \<br>-H <span class="hljs-number">172.168</span>.<span class="hljs-number">0.2</span>,<span class="hljs-number">172.168</span>.<span class="hljs-number">0.3</span> \<br>-mca plm_rsh_args <span class="hljs-string">&quot;-p 22 -q -o StrictHostKeyChecking=no&quot;</span>  \<br>-x <span class="hljs-variable constant_">NCCL_DEBUG</span>=<span class="hljs-variable constant_">TRACE</span> -x <span class="hljs-variable constant_">NCCL_DEBUG_SUBSYS</span>=<span class="hljs-variable constant_">ALL</span>  \<br>-x <span class="hljs-variable constant_">NCCL_ALGO</span>=<span class="hljs-variable constant_">RING</span> -x <span class="hljs-variable constant_">NCCL_IB_DISABLE</span>=<span class="hljs-number">0</span> \<br>-x <span class="hljs-variable constant_">NCCL_SOCKET_IFNAME</span>=eth0 \<br>-x <span class="hljs-variable constant_">NCCL_IB_HCA</span>=mlx5_0,mlx5_1,mlx5_2,mlx5_3 \<br>-x <span class="hljs-variable constant_">LD_LIBRARY_PATH</span>=<span class="hljs-regexp">/usr/local</span><span class="hljs-regexp">/nvidia/bin</span><span class="hljs-symbol">:/usr/local/cuda/bin</span><span class="hljs-symbol">:/usr/local/sbin</span><span class="hljs-symbol">:/usr/local/bin</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/usr/bin</span><span class="hljs-symbol">:/sbin</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/usr/local/openmpi/bin/</span><span class="hljs-symbol">:/usr/local/openmpi/lib/</span> \<br>-x <span class="hljs-variable constant_">PATH</span>=<span class="hljs-regexp">/usr/local</span><span class="hljs-regexp">/openmpi/bin</span><span class="hljs-symbol">:/usr/local/openmpi/lib/</span>  \<br>/data/nccl-tests/build/all_reduce_perf -b <span class="hljs-number">16</span> -e 4G -f2 -g <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="mpirun常用参数"><a href="#mpirun常用参数" class="headerlink" title="mpirun常用参数"></a>mpirun常用参数</h3><p>mpirun 是用于多机并行程序的启动</p><h4 id="–allow-run-as-root"><a href="#–allow-run-as-root" class="headerlink" title="–allow-run-as-root"></a>–allow-run-as-root</h4><p>使用Root运行程序</p><h4 id="np"><a href="#np" class="headerlink" title="-np"></a>-np</h4><p>总进程数</p><h4 id="–oversubscribe"><a href="#–oversubscribe" class="headerlink" title="–oversubscribe"></a>–oversubscribe</h4><p>允许进程数超过CPU的进程数</p><h4 id="H"><a href="#H" class="headerlink" title="-H"></a>-H</h4><p>指定主机</p><h4 id="hostfile"><a href="#hostfile" class="headerlink" title="-hostfile"></a>-hostfile</h4><p>从文件读取主机列表</p><h4 id="x"><a href="#x" class="headerlink" title="-x"></a>-x</h4><p>传递环境变量</p><h4 id="bind-to"><a href="#bind-to" class="headerlink" title="-bind-to"></a>-bind-to</h4><p>绑核行为</p><ul><li>none不绑定，操作系统自由调度</li><li>core每个进程绑定一个物理核心</li><li>socket每个进程绑定一个 CPU 插槽（如 NUMA 节点）</li><li>l1cache&#x2F;l2cache&#x2F;l3cache按缓存层级绑定</li><li>hwthread绑定到超线程（SMT）</li><li>numa绑定到 NUMA 节点</li><li>board绑定到主板节点（极少使用）</li></ul><h4 id="mca"><a href="#mca" class="headerlink" title="-mca"></a>-mca</h4><p>设置mpi的不同模块参数</p><h3 id="常用环境变量"><a href="#常用环境变量" class="headerlink" title="常用环境变量"></a>常用环境变量</h3><h4 id="NCCL-DEBUG"><a href="#NCCL-DEBUG" class="headerlink" title="NCCL_DEBUG"></a>NCCL_DEBUG</h4><p>输出日志级别<br>Value: INFO、TRACE、WARN、VERSION</p><h4 id="NCCL-DEBUG-SUBSYS"><a href="#NCCL-DEBUG-SUBSYS" class="headerlink" title="NCCL_DEBUG_SUBSYS"></a>NCCL_DEBUG_SUBSYS</h4><p>输出所有子系统日志</p><h4 id="NCCL-SOCKET-IFNAME"><a href="#NCCL-SOCKET-IFNAME" class="headerlink" title="NCCL_SOCKET_IFNAME"></a>NCCL_SOCKET_IFNAME</h4><p>指定的用于通信的IP接口</p><h4 id="NCCL-IB-DISABLE"><a href="#NCCL-IB-DISABLE" class="headerlink" title="NCCL_IB_DISABLE"></a>NCCL_IB_DISABLE</h4><p>是否禁用IB网络，1代表禁用IB，0代表启用IB</p><h4 id="NCCL-IB-HCA"><a href="#NCCL-IB-HCA" class="headerlink" title="NCCL_IB_HCA"></a>NCCL_IB_HCA</h4><p>指定使用IB设备</p><h4 id="NCCL-P2P-LEVEL"><a href="#NCCL-P2P-LEVEL" class="headerlink" title="NCCL_P2P_LEVEL"></a>NCCL_P2P_LEVEL</h4><p>限制使用的 P2P 通信层级</p><ul><li>LOC : Never use P2P (always disabled)</li><li>NVL : Use P2P when GPUs are connected through NVLink</li><li>PIX : Use P2P when GPUs are on the same PCI switch.</li><li>PXB : Use P2P when GPUs are connected through PCI switches (potentially multiple hops).</li><li>PHB : Use P2P when GPUs are on the same NUMA node. Traffic will go through the CPU.</li><li>SYS : Use P2P between NUMA nodes, potentially crossing the SMP interconnect (e.g. QPI&#x2F;UPI).</li></ul><h4 id="NCCL-TOPO-FILE"><a href="#NCCL-TOPO-FILE" class="headerlink" title="NCCL_TOPO_FILE"></a>NCCL_TOPO_FILE</h4><p>指定使用的nccl topo 文件默认使用&#x2F;var&#x2F;run&#x2F;nvidia-topologyd&#x2F;virtualTopology.xml</p><h4 id="NCCL-SHM-DISABLE"><a href="#NCCL-SHM-DISABLE" class="headerlink" title="NCCL_SHM_DISABLE"></a>NCCL_SHM_DISABLE</h4><p>禁用共享内存通信（通常适用于容器）</p><h4 id="NCCL-IB-GID-INDEX"><a href="#NCCL-IB-GID-INDEX" class="headerlink" title="NCCL_IB_GID_INDEX"></a>NCCL_IB_GID_INDEX</h4><p>指定使用的IB网卡的GID</p><h4 id="LD-LIBRARY-PATH"><a href="#LD-LIBRARY-PATH" class="headerlink" title="LD_LIBRARY_PATH"></a>LD_LIBRARY_PATH</h4><p>指定搜索动态链接库(.so)文件的目录</p><h4 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h4><p>指定可执行程序的目录</p><h4 id="CUDA-VISIBLE-DEVICES"><a href="#CUDA-VISIBLE-DEVICES" class="headerlink" title="CUDA_VISIBLE_DEVICES"></a>CUDA_VISIBLE_DEVICES</h4><p>执行使用的GPU编号</p><h4 id="NCCL-ALGO"><a href="#NCCL-ALGO" class="headerlink" title="NCCL_ALGO"></a>NCCL_ALGO</h4><p>nccl使用的算法</p><ul><li>Ring</li><li>Tree</li><li>Collnet</li><li>CollnetChain</li><li>CollnetDirect</li><li>NVLS</li><li>NVLSTree</li><li>PAT<br>常用的就是Ring或者Tree</li></ul><h4 id="NCCL-BUFFSIZE"><a href="#NCCL-BUFFSIZE" class="headerlink" title="NCCL_BUFFSIZE"></a>NCCL_BUFFSIZE</h4><p>设置NCCL在GPU对之间传输数据时使用的缓冲区大小</p><h4 id="NCCL-NTHREADS"><a href="#NCCL-NTHREADS" class="headerlink" title="NCCL_NTHREADS"></a>NCCL_NTHREADS</h4><p>变量设置每个CUDA块的CUDA线程数。NCCL将在每个通信信道上启动一个CUDA块。<br>如果认为GPU使用率较低，并且希望增加线程数，使用此变量。</p><h4 id="NCCL-MAX-NCHANNELS、NCCL-MIN-NCHANNELS"><a href="#NCCL-MAX-NCHANNELS、NCCL-MIN-NCHANNELS" class="headerlink" title="NCCL_MAX_NCHANNELS、NCCL_MIN_NCHANNELS"></a>NCCL_MAX_NCHANNELS、NCCL_MIN_NCHANNELS</h4><p>变量限制了NCCL可以使用的信道数量。减少通道数量也会减少用于通信的CUDA块的数量，从而减少对GPU计算资源的影响。</p><h3 id="执行参数"><a href="#执行参数" class="headerlink" title="执行参数"></a>执行参数</h3><ul><li>-t,–nthreads <num threads> 每个进程的线程数量配置</li><li>-g,–ngpus <gpus per thread> 每个线程的 GPU数量</li><li>-b,–minbytes <min size in bytes> 开始的最小数据量</li><li>-e,–maxbytes <max size in bytes> 结束的最大数据量</li><li>-i,–stepbytes <increment size> 每次增加的数据量</li><li>-f,–stepfactor <increment factor> 每次增加的倍数</li><li>-n,–iters <iteration count> 迭代次数</li><li>-m,–agg_iters <aggregated iteration count> 每次迭代中要聚合在一起的操作数</li><li>-w,–warmup_iters <warmup iteration count> 预热迭代次数</li><li>-N,–run_cycles <cycle count> run &amp; print each cycle (default: 1; 0&#x3D;infinite) 主循环次数</li><li>-p,–parallel_init &lt;0&#x2F;1&gt; 是否使用初始化并行线程</li><li>-c,–check <check iteration count> 检查结果的正确性</li><li>-o,–op &lt;sum&#x2F;prod&#x2F;min&#x2F;max&#x2F;avg&#x2F;mulsum&#x2F;all&gt; 指定那种操作为reduce，仅适用于Allreduce、Reduce或ReduceScatter等缩减操作</li><li>-d,–datatype &lt;nccltype&#x2F;all&gt; 指定使用哪种数据类型. 默认 : Float</li><li>-r,–root <root> 使用root用户</li><li>-z,–blocking &lt;0&#x2F;1&gt;  使NCCL集合阻塞，即在每个集合之后让CPU等待和同步</li><li>-y,–stream_null &lt;0&#x2F;1&gt;  是否使用为”null”的CUDA stream？ 不确定</li><li>-T,–timeout <time in seconds> 超时时间</li><li>-G,–cudagraph <num graph launches> 将迭代捕获为 CUDA 图，然后重放指定次数</li><li>-C,–report_cputime &lt;0&#x2F;1&gt; 报告 CPU 时间而不是延迟</li><li>-a,–average &lt;0&#x2F;1&#x2F;2&#x2F;3&gt; report average iteration time &lt;0&#x3D;RANK0&#x2F;1&#x3D;AVG&#x2F;2&#x3D;MIN&#x2F;3&#x3D;MAX&gt;  在所有ranks计算均值作为最终结果 (MPI&#x3D;1 only)</li><li>-R,–local_register &lt;1&#x2F;0&gt; 启用把本地缓冲区注册到send&#x2F;recv buffers上 (default: disable)</li></ul><h3 id="结果解析"><a href="#结果解析" class="headerlink" title="结果解析"></a>结果解析</h3><img src="/ika-new-blog/2025/04/30/nccl/image.png" class="" title="img"><ul><li>size(B): 执行的数据，单位为字节（B）</li><li>count: 处理的对象数量</li><li>type: 精度，每个对象的数据类型</li><li>redop: 执行的规约操作</li><li>root: 根节点编号</li><li>time(us): 执行算法总时间</li><li>algbw(GB&#x2F;s): 算法带宽</li><li>busbw(GB&#x2F;s): 总线带宽</li><li>wrong: 错误数量</li></ul><h4 id="algbw"><a href="#algbw" class="headerlink" title="algbw"></a>algbw</h4><p>算法带宽使用最常用的带宽公式：大小 (S) &#x2F; 时间 (t)。只需将运算大小除以算法带宽，即可计算出任何大型运算所需的时间。</p><p>algbw &#x3D; S&#x2F;t</p><h4 id="busbw"><a href="#busbw" class="headerlink" title="busbw"></a>busbw</h4><p>虽然算法带宽对于像发送&#x2F;接收这样的点对点操作来说很有意义，但它并不总是有助于测量集体操作的速度，因为理论上的峰值算法带宽并不等于硬件峰值带宽，后者通常取决于rank数量。<br>为了提供一个能够反映硬件使用情况的数值，NCCL 测试引入了“总线带宽”的概念（测试输出中的“busbw”列）。该数值是通过对算法带宽应用一个公式来获得的，该公式反映了 GPU 间通信的速度。利用这个总线带宽，我们可以将其与硬件峰值带宽进行比较，而与所使用的Rank数量无关。</p><p>其计算方式为:<br>AllReduce : 2*(n-1)&#x2F;n<br>ReduceScatter : (n-1)&#x2F;n<br>AllGather : (n-1)&#x2F;n<br>Broadcast : 1<br>Reduce : 1<br>AlltoAll: (n-1)&#x2F;n</p><h3 id="out-of-place和in-place"><a href="#out-of-place和in-place" class="headerlink" title="out-of-place和in-place"></a>out-of-place和in-place</h3><p>out-of-place 是指输入和输出都处于不同的内存缓冲区中<br>in-place则会将输入数据和输出数据处于同一个缓冲区内，导致输出数据会覆盖掉输入数据，这样做的好处是节省内存空间。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">func (c *csiMountMgr) SetUp(mounterArgs volume.MounterArgs) error &#123;<br>  <span class="hljs-keyword">return</span> c.SetUpAt(c.GetPath(), mounterArgs)<br>&#125;<br><br>func (c *csiMountMgr) SetUpAt(dir string, mounterArgs volume.MounterArgs) error &#123;<br><span class="hljs-built_in">  csi,</span> err := c.csiClientGetter.Get()<br>  ...<br><br>  err = csi.NodePublishVolume(<br><span class="hljs-built_in">    ctx,</span><br><span class="hljs-built_in">    volumeHandle,</span><br><span class="hljs-built_in">    readOnly,</span><br><span class="hljs-built_in">    deviceMountPath,</span><br><span class="hljs-built_in">    dir,</span><br><span class="hljs-built_in">    accessMode,</span><br><span class="hljs-built_in">    publishContext,</span><br><span class="hljs-built_in">    volAttribs,</span><br><span class="hljs-built_in">    nodePublishSecrets,</span><br><span class="hljs-built_in">    fsType,</span><br><span class="hljs-built_in">    mountOptions,</span><br>  )<br>    ...<br>  <span class="hljs-keyword">return</span> nil<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>3FS</title>
    <link href="/ika-new-blog/2025/03/18/3fs/"/>
    <url>/ika-new-blog/2025/03/18/3fs/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/deepseek-ai/3FS">https://github.com/deepseek-ai/3FS</a><br>3FS（Fire-Flyer File System）是 DeepSeek 开源的一款高性能分布式文件系统，<br>其所有组件都构建在RDMA 网络之上 (InfiniBand or RoCE)</p><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><img src="/ika-new-blog/2025/03/18/3fs/Architecture.png" class="" title="img"><ul><li>Monitor Collector: 监控指标搜集器，其他组件会上报自身metric到这里，其存储采用clickhouse</li><li>Mgmtd Service(Cluster Manager)：管理整个集群的状态，使用heartbeats上报机制来检测服务地址和节点状态，并通过Foundation DB来持久化集群信息</li><li>Metadata Service：用于管理3FS 的存储文件的元数据，文件的元数据使用独立&#x2F;外置的 FondationDB 集群来存储，文件的事务性由FoundationDB的事务来保证</li><li>Storage Service：用于管理存储节点本地 SSD 并提供块存储接口，数据同步使用了 CRAQ(Chain Replication with Apportioned Queries)协议。</li><li>Fuse Client：用于提供POSIX的标准文件接口，用户使用无需额外学习成本</li><li>Native Client:  3FS自研发的API，其仿照io_uring的设计方式来实现异步IO</li></ul><p>外部依赖</p><ul><li>ClickHouse：存储监控日志</li><li>FoundationDB：一个K-V数据库用于元数据服务存储文件元数据。</li></ul><h2 id="Native-Client"><a href="#Native-Client" class="headerlink" title="Native Client"></a>Native Client</h2><p>3FS通过fuse实现了两种client提供给用户使用</p><ul><li><p>Fuse Client<br>在用户空间的File System，使其能够以文件系统的形式挂载到节点上。3FS通过实现fuse的接口，将其对文件的元数据操作直接调用Meta Service，对数据面的操作调用Native Client以修改底层存储</p></li><li><p>Native Client (USRBIO)<br>通过在FUSE 守护进程中实现本机客户端，以Linux io_uring的方式实现异步零拷贝 I&#x2F;O 操作的接口，对于相关文件元操作仍由 FUSE 守护进程处理（例如打开&#x2F;关闭&#x2F;统计文件）。</p></li></ul><h2 id="为什么用两种client去实现，不直接使用fuse"><a href="#为什么用两种client去实现，不直接使用fuse" class="headerlink" title="为什么用两种client去实现，不直接使用fuse"></a>为什么用两种client去实现，不直接使用fuse</h2><p>内存复制开销 用户空间文件系统守护进程无法访问应用程序内存。内核和用户空间之间的数据传输会消耗内存带宽并增加端到端延迟。</p><p>原始多线程支持 当应用程序发起 I&#x2F;O 请求时，FUSE 会将这些请求放入多线程共享队列中，并受自旋锁保护。然后，用户空间文件系统守护进程从此队列中检索和处理请求。由于锁争用，FUSE 的 I&#x2F;O 处理能力无法随线程数扩展。我们的基准测试结果表明，FUSE 每秒仅处理大约 400K 4KiB 读取。随着锁争用加剧，进一步增加并发性并不能提高性能。 perf 分析显示内核空间自旋锁消耗了大量 CPU 时间。</p><p>大多数应用程序（例如数据分析）在 3FS 上执行大块写入，或者它们可以在内存中缓冲数据并在写入缓冲区已满时将其刷新到 3FS。 但是，Linux 5.x 上的 FUSE 不支持对同一文件 1 的并发写入。 应用程序通过同时写入多个文件来克服这一限制，从而最大限度地提高总吞吐量。</p><p>读取操作表现出更复杂的模式。 一些训练作业需要随机访问数据集样本，读取大小从每个样本几千字节到几兆字节不等。 并且样本通常不是 4K 对齐的。 数据加载器专门设计用于获取批量样本。 但它们在处理 FUSE 安装的 3FS 上的小随机读取时性能不佳。 SSD 和 RDMA 网络的带宽未得到充分利用。</p><h2 id="为什么不实现VFS-内核模块"><a href="#为什么不实现VFS-内核模块" class="headerlink" title="为什么不实现VFS 内核模块"></a>为什么不实现VFS 内核模块</h2><p>将文件系统客户端实现为 VFS 内核模块可避免上述性能问题。但内核模块开发比用户空间系统编程更具挑战性。错误很难诊断，并且可能导致生产环境中的灾难性故障。例如，机器可能会崩溃并且没有留下任何日志消息供调试。升级内核模块时，必须彻底停止使用文件系统的所有进程；否则，需要重新启动机器。</p><p>出于这些原因，我们选择在 FUSE 守护进程中实现本机客户端。此客户端提供支持异步零拷贝 I&#x2F;O 操作的接口。文件元操作仍由 FUSE 守护进程处理（例如打开&#x2F;关闭&#x2F;统计文件）。应用程序调用 open() 以获取文件描述符 (fd) 并通过本机 API 注册它。然后，它们可以使用本机客户端对文件执行 I&#x2F;O 操作。这种方法可确保元数据操作与 POSIX API 的一致性，从而更轻松地迁移现有代码。</p><h2 id="CRAQ"><a href="#CRAQ" class="headerlink" title="CRAQ"></a>CRAQ</h2><p>CRAQ （带分配查询的链式复制）是一种 写入所有副本、读取任意副本（write-all-read-any）的复制协议，专门针对 读密集型 工作负载进行了优化：</p><img src="/ika-new-blog/2025/03/18/3fs/craq1.png" class="" title="img"><img src="/ika-new-blog/2025/03/18/3fs/craq2.png" class="" title="img"><p>每个文件块都使用带分配查询的链式复制 (CRAQ) 在存储目标链上进行复制。<br>在 CRAQ 中，写入请求被发送到Head Target 并且沿着Chain向后进行，而读取请求可以发送到任何Target。这样，读取流量可以更好的均匀分布在chain中的所有目标之间，可以让负载更加均衡。<br>而每台存储机器可以创建多个Target 来让不同的数据Chain部署在同一机器上。</p><p>写入请求的处理流程</p><ol><li>版本检查：</li></ol><ul><li>服务检查写入请求中的chain version是否与最新已知version匹配。</li><li>如果不匹配，则拒绝请求。</li><li>该写入请求可能由客户端或链中的predecessor 发送。</li></ul><ol start="2"><li>拉取写入数据：</li></ol><ul><li>服务发起RDMA Read来拉取写入数据。</li><li>如果客户端或predecessor发生故障，RDMA Read操作可能超时，导致写入操作被中止。</li></ul><ol start="3"><li>获取锁：</li></ol><ul><li>一旦数据被拉取到本地内存缓冲区，存储服务会从 lock manager处获取该chunk的更新锁。</li><li>该chunk上的并发写入操作将被阻塞。</li><li>所有写入操作都会在head target进行串行化处理。</li></ul><ol start="4"><li>版本管理：</li></ol><ul><li>服务读取数据块的committed version到内存中，并应用更新。</li><li>更新后的数据块会存储为pending version。</li><li>一个storage target可能同时存储两个版本： <ul><li>committed version</li><li>pending version</li></ul></li><li>每个版本都有一个单调递增的版本号： <ul><li>committed version的版本号为 v，</li><li>pending version的版本号为 u，</li><li>版本号关系满足 u &#x3D; v + 1。</li></ul></li></ul><ol start="5"><li>提交写入：</li></ol><ul><li>如果当前服务是tail，则会原子性地用待提交版本替换已提交版本，并向前任节点发送acknowledgment message。</li><li>如果当前服务不是链尾，则会将写入请求转发给后续节点。</li><li>当已提交版本被更新时，当前的chain version也会存储在数据块的元数据中。</li></ul><ol start="6"><li>传播确认消息：</li></ol><ul><li>当存储服务收到acknowledgment message时： <ul><li>用pending version替换committed version，并继续向前任节点传播确认消息。</li><li>释放本地chunk的锁。<br>每条Chain存储同一份数据，并且在读取时，同一条Chain都可以对外提供读取服务。</li></ul></li></ul><h2 id="Linux-io-uring"><a href="#Linux-io-uring" class="headerlink" title="Linux io_uring"></a>Linux io_uring</h2><img src="/ika-new-blog/2025/03/18/3fs/io_uring.png" class="" title="img"><p>需要linux kernel 5.1之后支持<br>每个 io_uring 实例都有两个环形队列（ring），队列在内核和应用程序之间共享：</p><ul><li>提交队列：submission queue (SQ)</li><li>完成队列：completion queue (CQ)</li></ul><p>这两个队列都是单生产者、单消费者，并提供无锁接口（lock-less access interface），内部使用 内存屏障做同步（coordinated with memory barriers）。<br>使用方式：</p><ul><li>请求<ul><li>应用创建 SQ entries (SQE)，将其添加到SQ tail；</li><li>内核从 SQ head中获取，进行消费并更新head。</li></ul></li><li>完成<ul><li>内核为完成的一个或多个请求创建 CQ entries (CQE)，更新 CQ tail；</li><li>应用消费 CQE，更新 CQ head。</li><li>完成事件（completion events）可能以任意顺序到达，到总是与特定的 SQE 相关联的。</li><li>消费 CQE 过程无需切换到内核态。</li></ul></li></ul><h2 id="使用USRBIO-API"><a href="#使用USRBIO-API" class="headerlink" title="使用USRBIO API"></a>使用USRBIO API</h2><h3 id="两个概念：-lov-和lor"><a href="#两个概念：-lov-和lor" class="headerlink" title="两个概念： lov 和lor"></a>两个概念： lov 和lor</h3><p><strong>iov</strong> 一个用于零拷贝读&#x2F;写操作的大型内存区域，由用户进程和本机客户端共享。InfiniBand&#x2F;Roce 内存注册由客户端管理。在本机 API 中，所有读取数据都将读入 Iov，所有写入数据都应在调用 API 之前写入 Iov。</p><p><strong>ior</strong> 一个用于用户进程和本机客户端之间通信的小型共享环形缓冲区。Ior 的用法类似于 Linux io_uring，其中用户进程将读&#x2F;写请求入队，本机客户端将这些请求出队以完成。请求分批执行，其大小由 io_depth 参数控制。多个批次并行处理，无论是来自不同的环还是同一个环。但是，对于多线程应用程序，仍然建议使用多个环，因为共享一个环需要同步，这会影响性能。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hf3fs_prep_io</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> hf3fs_ior *ior,</span></span><br><span class="hljs-params"><span class="hljs-function">                  <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> hf3fs_iov *iov,</span></span><br><span class="hljs-params"><span class="hljs-function">                  <span class="hljs-type">bool</span> read,</span></span><br><span class="hljs-params"><span class="hljs-function">                  <span class="hljs-type">void</span> *ptr,</span></span><br><span class="hljs-params"><span class="hljs-function">                  <span class="hljs-type">int</span> fd,</span></span><br><span class="hljs-params"><span class="hljs-function">                  <span class="hljs-type">size_t</span> off,</span></span><br><span class="hljs-params"><span class="hljs-function">                  <span class="hljs-type">uint64_t</span> len,</span></span><br><span class="hljs-params"><span class="hljs-function">                  <span class="hljs-type">void</span> *userdata)</span></span>;<br>                  <br>ior: 执行任务的队列，通过hf3fs_iorcreate4接口创建<br>iov: 共享内存的区域，通过hf3fs_iovcreate接口创建<br>read: 是否读或写，<span class="hljs-literal">true</span>代表只读，<span class="hljs-literal">false</span>代表写<br>ptr: 要进行IO操作的指针。[ptr, ptr + len)必须完全在iov共享内存范围内。<br>fd: 要操作的文件描述符，对应的文件描述符需要在hf3fs_reg_fd接口注册<br>off: Offset in file.<br>len: Read size <span class="hljs-keyword">or</span> write size.<br>userdata: 在hf3fs_wait_for_ios后想要返回的自定义数据<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hf3fs_submit_ios</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> hf3fs_ior *ior)</span></span>;<br><br>ior: 要提交的任务队列<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hf3fs_wait_for_ios</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> hf3fs_ior *ior,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-keyword">struct</span> hf3fs_cqe *cqes,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">int</span> cqec,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">int</span> min_results,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> timespec *abs_timeout)</span></span>;<br>                       <br>ior: 要等待结果的队列<br>cqes: IO结果数组，包含了 I/O 操作的 结果,和hf3fs_prep_io里面的userdata<br>cqec: IO结果数组的大小<br>min_results: 最小返回的结果数量<br>abs_timeout: 超时时间，可设置为空<br></code></pre></td></tr></table></figure><h2 id="c-示例"><a href="#c-示例" class="headerlink" title="c++ 示例"></a>c++ 示例</h2><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sas">int mai<span class="hljs-meta">n</span>() &#123;<br>    struct hf3fs_ior ior;<br>    hf3fs_iorcreate4(<span class="hljs-variable">&amp;ior</span>, <span class="hljs-string">&quot;/hf3fs/mount/point&quot;</span>, NUM_IOS, true, 0, 0, -1, 0);<br>        <br>    struct hf3fs_iov iov;<br>    hf3fs_iovcreate(<span class="hljs-variable">&amp;iov</span>, <span class="hljs-string">&quot;/hf3fs/mount/point&quot;</span>, NUM_IOS <span class="hljs-comment">* BLOCK_SIZE, 0, -1);</span><br>    <br>    int fd = <span class="hljs-meta">open</span>(<span class="hljs-string">&quot;/hf3fs/mount/point/example.bin&quot;</span>, O_RDONLY);<br>    hf3fs_reg_fd(fd, 0);<br>    <br>    hf3fs_prep_io(<span class="hljs-variable">&amp;ior</span>, <span class="hljs-variable">&amp;iov</span>, true, iov.base, fd, 0, 4096, nullptr);<br>    hf3fs_prep_io(<span class="hljs-variable">&amp;ior</span>, <span class="hljs-variable">&amp;iov</span>, true, iov.base + 4096, fd, 4096, 4096, nullptr);<br>    hf3fs_submit_ios(<span class="hljs-variable">&amp;ior</span>);<br>    <br>    hf3fs_cqe cqes[2];<br>    hf3fs_wait_for_ios(<span class="hljs-variable">&amp;ior</span>, cqes, 2, 2, nullptr);<br>    <br>    hf3fs_dereg_fd(fd);<br>    <span class="hljs-meta">close</span>(fd);<br>    hf3fs_iovdestroy(<span class="hljs-variable">&amp;iov</span>);<br>    hf3fs_iordestroy(<span class="hljs-variable">&amp;ior</span>);<br>    <span class="hljs-keyword">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Python-示例"><a href="#Python-示例" class="headerlink" title="Python 示例"></a>Python 示例</h2><p>需要先编译bind文件并加入到环境中<a href="https://github.com/deepseek-ai/3FS/blob/main/src/lib/py/usrbio_binding.cc">https://github.com/deepseek-ai/3FS/blob/main/src/lib/py/usrbio_binding.cc</a><br>使用参考： <a href="https://github.com/deepseek-ai/3FS/blob/f9a4291e693087946634432063aa2095f0aca45d/hf3fs_fuse/io.py#L66">https://github.com/deepseek-ai/3FS/blob/f9a4291e693087946634432063aa2095f0aca45d/hf3fs_fuse/io.py#L66</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import hf3fs_py_usrbio<br><br>iov = hf3fs_py_usrbio.iovec(<span class="hljs-attribute">base</span>=shared_memory, <span class="hljs-attribute">id</span>=iov_id, <span class="hljs-attribute">hf3fs_mount_point</span>=mount_point)<br>ior = hf3fs_py_usrbio.ioring(<span class="hljs-attribute">hf3fs_mount_point</span>=mount_point, <span class="hljs-attribute">entries</span>=1024)<br>ior.prepare(iov, <span class="hljs-attribute">read</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">fd</span>=fd, <span class="hljs-attribute">off</span>=0)<br>ior.submit()<br>results = ior.wait(<span class="hljs-attribute">max_results</span>=1)<br></code></pre></td></tr></table></figure><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ul><li>训练数据存储</li><li>CheckPoint存储</li><li>Offload KVCache 到DISK上（存疑）</li><li>SGLang正在计划支持 <a href="https://github.com/sgl-project/sglang/issues/4042">https://github.com/sgl-project/sglang/issues/4042</a></li></ul><h2 id="smallpond"><a href="#smallpond" class="headerlink" title="smallpond"></a>smallpond</h2><p>一个基于duckdb和3FS的轻量级大规模数据处理工具</p><h3 id="支持的数据格式"><a href="#支持的数据格式" class="headerlink" title="支持的数据格式"></a>支持的数据格式</h3><ul><li>parquet</li><li>pyarrow Table</li><li>csv</li><li>json</li><li>pandas</li><li>list of local Python objects</li></ul><h3 id="可执行的操作"><a href="#可执行的操作" class="headerlink" title="可执行的操作"></a>可执行的操作</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Session</span>.partial_sql(query, *inputs, **kwargs)<br><span class="hljs-keyword">Execute</span> a <span class="hljs-keyword">SQL</span> query <span class="hljs-keyword">on</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">partition</span> <span class="hljs-keyword">of</span> the <span class="hljs-keyword">input</span> DataFrames.<br><br>DataFrame.map(sql_or_func, *[, <span class="hljs-keyword">schema</span>])<br>Apply a <span class="hljs-keyword">function</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">row</span>.<br><br>DataFrame.map_batches(func, *[, batch_size])<br>Apply the given <span class="hljs-keyword">function</span> <span class="hljs-keyword">to</span> batches <span class="hljs-keyword">of</span> data.<br><br>DataFrame.flat_map(sql_or_func, *[, <span class="hljs-keyword">schema</span>])<br>Apply a <span class="hljs-keyword">function</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">and</span> flatten the result.<br><br>DataFrame.<span class="hljs-keyword">filter</span>(sql_or_func, **kwargs)<br><span class="hljs-keyword">Filter</span> <span class="hljs-keyword">out</span> <span class="hljs-keyword">rows</span> that don<span class="hljs-string">&#x27;t satisfy the given predicate.</span><br><span class="hljs-string"></span><br><span class="hljs-string">DataFrame.limit(limit)</span><br><span class="hljs-string">Limit the number of rows to the given number.</span><br><span class="hljs-string"></span><br><span class="hljs-string">DataFrame.partial_sort(by, **kwargs)</span><br><span class="hljs-string">Sort rows by the given columns in each partition.</span><br><span class="hljs-string"></span><br><span class="hljs-string">DataFrame.random_shuffle(**kwargs)</span><br><span class="hljs-string">Randomly shuffle all rows globally.</span><br><span class="hljs-string"></span><br><span class="hljs-string">DataFrame.count()</span><br><span class="hljs-string">Count the number of rows.</span><br><span class="hljs-string"></span><br><span class="hljs-string">DataFrame.take(limit)</span><br><span class="hljs-string">Return up to limit rows.</span><br><span class="hljs-string"></span><br><span class="hljs-string">DataFrame.take_all()</span><br><span class="hljs-string">Return all rows.</span><br><span class="hljs-string"></span><br><span class="hljs-string">DataFrame.to_arrow()</span><br><span class="hljs-string">Convert to an arrow Table.</span><br><span class="hljs-string"></span><br><span class="hljs-string">DataFrame.to_pandas()</span><br><span class="hljs-string">Convert to a pandas DataFrame.</span><br><span class="hljs-string"></span><br><span class="hljs-string">DataFrame.write_parquet(path)</span><br><span class="hljs-string">Write data to a series of parquet files under the given path.</span><br><span class="hljs-string"></span><br><span class="hljs-string">DataFrame.write_parquet_lazy(path)</span><br><span class="hljs-string">Write data to a series of parquet files under the given path.</span><br></code></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>High-level API</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import smallpond<br><br>sp = smallpond<span class="hljs-selector-class">.init</span>()<br><br>df = sp<span class="hljs-selector-class">.read_parquet</span>(<span class="hljs-string">&quot;path/to/dataset/*.parquet&quot;</span>)<br>df = df<span class="hljs-selector-class">.repartition</span>(<span class="hljs-number">10</span>)<br>df = df<span class="hljs-selector-class">.map</span>(<span class="hljs-string">&quot;x + 1&quot;</span>)<br>df = sp<span class="hljs-selector-class">.partial_sql</span>(<span class="hljs-string">&quot;SELECT ticker, min(price), max(price) FROM &#123;0&#125; GROUP BY ticker&quot;</span>, df)<br>df<span class="hljs-selector-class">.write_parquet</span>(<span class="hljs-string">&quot;path/to/output&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Low-level-API"><a href="#Low-level-API" class="headerlink" title="Low-level API"></a>Low-level API</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">from</span> smallpond<span class="hljs-selector-class">.logical</span><span class="hljs-selector-class">.dataset</span> import ParquetDataSet<br><span class="hljs-selector-tag">from</span> smallpond<span class="hljs-selector-class">.logical</span><span class="hljs-selector-class">.node</span> import Context, DataSourceNode, DataSetPartitionNode, SqlEngineNode, LogicalPlan<br><span class="hljs-selector-tag">from</span> smallpond<span class="hljs-selector-class">.execution</span><span class="hljs-selector-class">.driver</span> import Driver<br><br>def my_pipeline(input_paths: List[str], npartitions: int):<br>   ctx = <span class="hljs-built_in">Context</span>()<br>   dataset = <span class="hljs-built_in">ParquetDataSet</span>(input_paths)<br>   node = <span class="hljs-built_in">DataSourceNode</span>(ctx, dataset)<br>   node = <span class="hljs-built_in">DataSetPartitionNode</span>(ctx, (node,), npartitions=npartitions)<br>   node = <span class="hljs-built_in">SqlEngineNode</span>(ctx, (node,), <span class="hljs-string">&quot;SELECT * FROM &#123;0&#125;&quot;</span>)<br>   return <span class="hljs-built_in">LogicalPlan</span>(ctx, node)<br><br>if __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>   driver = <span class="hljs-built_in">Driver</span>()<br>   driver.<span class="hljs-built_in">add_argument</span>(<span class="hljs-string">&quot;-i&quot;</span>, <span class="hljs-string">&quot;--input_paths&quot;</span>, nargs=<span class="hljs-string">&quot;+&quot;</span>)<br>   driver.<span class="hljs-built_in">add_argument</span>(<span class="hljs-string">&quot;-n&quot;</span>, <span class="hljs-string">&quot;--npartitions&quot;</span>, type=int, default=<span class="hljs-number">10</span>)<br><br>   plan = <span class="hljs-built_in">my_pipeline</span>(**driver.<span class="hljs-built_in">get_arguments</span>())<br>   driver.<span class="hljs-built_in">run</span>(plan)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>storage、 file system</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vllm-distribute-inference</title>
    <link href="/ika-new-blog/2024/11/19/vllm-distribute-inference/"/>
    <url>/ika-new-blog/2024/11/19/vllm-distribute-inference/</url>
    
    <content type="html"><![CDATA[<p>文章基于vllm v0.6.2版本</p><img src="/ika-new-blog/2024/11/19/vllm-distribute-inference/architecture.png" class="" title="img"><p>Link: <a href="https://arxiv.org/pdf/2309.06180v1">https://arxiv.org/pdf/2309.06180v1</a></p><h2 id="一、-张量并行-TP-与流水线并行-PP"><a href="#一、-张量并行-TP-与流水线并行-PP" class="headerlink" title="一、 张量并行(TP)与流水线并行(PP)"></a>一、 张量并行(TP)与流水线并行(PP)</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>vllm 默认采用Megatron-LM算法实现tensor parallel。<br>参数设置 </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--tensor-parallel-size tp_num</span><br><span class="hljs-comment">--pipeline-parallel-size pp_num</span><br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">vllm serve  Qwen/Qwen2-<span class="hljs-number">0.5</span>B \ <br>    <span class="hljs-comment">--tensor-parallel-size 1 \ </span><br>    <span class="hljs-comment">--pipeline-parallel-size 3 </span><br></code></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>如果当前节点有多个GPU，但GPU数量无法整切模型，那么可以使TP设置成1 并使用流水线并行(PP)来对模型进行切分。</p><blockquote style="color: gray; font-size: 0.9em;">  There is one edge case: if the model fits in a single node with multiple GPUs, but the number of GPUs cannot divide the model size evenly, you can use pipeline parallelism, which splits the model along layers and supports uneven splits. In this case, the tensor parallel size should be 1 and the pipeline parallel size should be the number of GPUs.</blockquote>当前流水线并行只支持LLaMa, GPT2, Mixtral, Qwen, Qwen2和Nemotron格式的模型<blockquote style="color: gray; font-size: 0.9em;">Pipeline parallel is a beta feature. It is only supported for online serving as well as LLaMa, GPT2, Mixtral, Qwen, Qwen2, and Nemotron style models.</blockquote><h2 id="二、Distributed-Executor-Backend"><a href="#二、Distributed-Executor-Backend" class="headerlink" title="二、Distributed-Executor-Backend"></a>二、Distributed-Executor-Backend</h2><h3 id="Distributed-executor-backend"><a href="#Distributed-executor-backend" class="headerlink" title="Distributed_executor_backend"></a>Distributed_executor_backend</h3><p>vllm服务运行有三种方式：</p><ul><li>Single GPU</li><li>Python multiprocessing</li><li>Ray<br>参数设置</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attr">--distributed_executor_backend</span> mp # mp、ray、<span class="hljs-attribute">none</span><br></code></pre></td></tr></table></figure><p>如果没设置distributed_executor_backend则默认采用如下规则</p><img src="/ika-new-blog/2024/11/19/vllm-distribute-inference/backend1.png" class="" title="img"><blockquote style="color: gray; font-size: 0.9em;">Link : https://github.com/vllm-project/vllm/blob/v0.6.2/vllm/config.py#L836</blockquote>world_size 并行世界的大小world_size = pipeline_parallel_size * tensor_parallel_size<h3 id="Ray"><a href="#Ray" class="headerlink" title="Ray"></a>Ray</h3><p>Ray 是一个开源分布式框架，用于扩展 AI 和 Python 应用程序（如机器学习）。它提供了用于并行处理的计算层，因此您无需成为分布式系统专家。Ray 使用以下组件最大限度地降低了运行分布式单个和端到端机器学习工作流的复杂性：</p><ul><li>用于常见机器学习任务（如数据预处理、分布式训练、超参数调整、强化学习和模型服务）的可扩展库。</li><li>用于并行化和扩展 Python 应用程序的 Python 分布式计算框架。</li><li>用于将 Ray 集群与现有工具和基础设施（如 Kubernetes、AWS、GCP 和 Azure）集成和部署的集成和实用程序。<br>哪些部分使用了Ray？<br>在vllm中<strong>Multi-Node GPU (尤其是PP)、XPU、TPU的多卡兼容中使用</strong></li></ul><img src="/ika-new-blog/2024/11/19/vllm-distribute-inference/ray1.png" class="" title="img"><blockquote style="color: gray; font-size: 0.9em;">https://github.com/vllm-project/vllm/issues/6556</blockquote><h4 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h4><p>  Ray中应用程序的主进程（注意不是Ray本身是python应用程序）负责提交任务到Ray集群，并协调任务的执行。它通常是应用程序的入口点，负责初始化Ray并与集群进行交互。</p><h4 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h4><p>  Ray集群中的工作节点，负责执行Driver提交的任务。每个Worker都可以执行多个任务，并且可以并行处理这些任务。Worker节点是无状态的，执行完任务后会将结果返回给driver</p><h4 id="Actor"><a href="#Actor" class="headerlink" title="Actor"></a>Actor</h4><blockquote style="color: gray; font-size: 0.9em;">https://docs.ray.io/en/latest/ray-core/actors.html#actors</blockquote>  一种有状态的worker，用于部分运行数据的存储与运算。<h4 id="Bundles"><a href="#Bundles" class="headerlink" title="Bundles"></a>Bundles</h4><blockquote style="color: gray; font-size: 0.9em;">https://docs.ray.io/en/latest/ray-core/scheduling/placement-group.html#bundles</blockquote>  A bundle is a collection of “resources”. It could be a single resource, {"CPU": 1}, or a group of resources, {"CPU": 1, "GPU": 4}. A bundle is a unit of reservation for placement groups. “Scheduling a bundle” means we find a node that fits the bundle and reserve the resources specified by the bundle. A bundle must be able to fit on a single node on the Ray cluster. For example, if you only have an 8 CPU node, and if you have a bundle that requires {"CPU": 9}, this bundle cannot be scheduled.  资源包声明，可以声明一个或多个资源组成一个资源包，用于Placement Group <h4 id="Placement-Group"><a href="#Placement-Group" class="headerlink" title="Placement Group"></a>Placement Group</h4><blockquote style="color: gray; font-size: 0.9em;">https://docs.ray.io/en/latest/ray-core/scheduling/placement-group.html#key-concepts</blockquote>  A placement group reserves the resources from the cluster. The reserved resources can only be used by tasks or actors that use the PlacementGroupSchedulingStrategy.  - Placement groups are represented by a list of bundles. For example, {"CPU": 1} * 4 means you’d like to reserve 4 bundles of 1 CPU (i.e., it reserves 4 CPUs).  - Bundles are then placed according to the placement strategies across nodes on the cluster.  - After the placement group is created, tasks or actors can be then scheduled according to the placement group and even on individual bundles.  用于调度一组资源Bundles，分配给worker和actor。<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">主: ray <span class="hljs-built_in">start</span> <span class="hljs-comment">--head --port=6379  vllm serve </span><br>worker : ray <span class="hljs-built_in">start</span> <span class="hljs-comment">--address=header:6379 </span><br>vllm serve <br></code></pre></td></tr></table></figure><h4 id="Multiprocessing"><a href="#Multiprocessing" class="headerlink" title="Multiprocessing"></a>Multiprocessing</h4><p>基于python中的Multiprocessing。其是基于进程的并行。<br>主要用于单节点多GPU的运行。</p><h4 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h4><p>Executor是vllm对任务进行分配的核心。其决定任务如何进行分发以及worker如何运行。<br>如下是不同场景下对应的Executor</p><table><thead><tr><th>device_type\backend</th><th>mp</th><th>None</th><th>ray</th></tr></thead><tbody><tr><td>neuron</td><td>NeuronExecutor</td><td>NeuronExecutor</td><td>NeuronExecutor</td></tr><tr><td>TPU</td><td>不支持</td><td>TPUExecutor</td><td>RayTPUExecutor</td></tr><tr><td>openvino</td><td>OpenVINOExecutor</td><td>OpenVINOExecutor</td><td>OpenVINOExecutor</td></tr><tr><td>XPU</td><td>不支持（异步支持MultiprocessingXPUExecutorAsync）</td><td>XPUExecutor</td><td>RayXPUExecutor</td></tr><tr><td>GPU</td><td>MultiprocessingGPUExecutor（要求不能开启VLLM_USE_RAY_SPMD_WORKER）</td><td>GPUExecutor</td><td>RayGPUExecutor</td></tr><tr><td>CPU</td><td>CPUExecutor</td><td>CPUExecutor</td><td>CPUExecutor</td></tr></tbody></table><blockquote style="color: gray; font-size: 0.9em;">https://github.com/vllm-project/vllm/blob/v0.6.2/vllm/engine/llm_engine.py#L490</blockquote><h3 id="RayGPUExecutor"><a href="#RayGPUExecutor" class="headerlink" title="RayGPUExecutor"></a>RayGPUExecutor</h3><p>RayGPUExecutor主要负责在Ray上创建和管理worker。以及请求的分发</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初始化分为两部分，一部分是RayGPUExecutor本身的变量设置_init_executor。 一部分是对worker的初始化设置_init_workers_ray<br>_init_executor主要功能是设置如下参数</p><ul><li>use_ray_spmd_worker</li><li>use_ray_compiled_dag</li><li>placement_group</li><li>RAY_USAGE_STATS_ENABLED</li><li>input_encoder</li><li>output_decoder<br>其中，比较重要的外部参数是use_ray_compiled_dag和use_ray_spmd_worker</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># If the env var is set, it uses the Ray&#x27;s compiled DAG API</span><br><span class="hljs-comment"># which optimizes the control plane overhead(开销).</span><br><span class="hljs-comment"># Run vLLM with VLLM_USE_RAY_COMPILED_DAG=1 to enable it.</span><br><span class="hljs-comment"># Currently, this requires USE_RAY_SPMD_WORKER=True.</span><br><span class="hljs-variable language_">self</span>.use_ray_compiled_dag = envs.VLLM_USE_RAY_COMPILED_DAG<br><span class="hljs-comment"># If the env var is set, then we do not distinguish(区分) between the</span><br><span class="hljs-comment"># &quot;driver worker&quot; vs other workers. Also, the rank 0 worker will</span><br><span class="hljs-comment"># be executed in a remote Ray worker. Currently this requires</span><br><span class="hljs-comment"># USE_RAY_COMPILED_DAG=True.</span><br><span class="hljs-variable language_">self</span>.use_ray_spmd_worker = envs.VLLM_USE_RAY_SPMD_WORKER<br><span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.use_ray_compiled_dag:<br>    <span class="hljs-keyword">assert</span> <span class="hljs-variable language_">self</span>.use_ray_spmd_worker, (<br>        <span class="hljs-string">&quot;VLLM_USE_RAY_COMPILED_DAG=1 requires &quot;</span><br>        <span class="hljs-string">&quot;VLLM_USE_RAY_SPMD_WORKER=1&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.use_ray_spmd_worker:<br>    <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> Support SPMD worker for non-DAG Ray executor.</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-variable language_">self</span>.use_ray_compiled_dag, (<br>        <span class="hljs-string">&quot;VLLM_USE_RAY_SPMD_WORKER=1 requires &quot;</span><br>        <span class="hljs-string">&quot;VLLM_USE_RAY_COMPILED_DAG=1&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>SPMD （Single-Program Multiple-Data）</strong> 并行计算算法， 用于将数据切分<br><strong>DAG（Directed Acyclic Graph)</strong> 有向无环图  Ray 会将这些任务及其依赖关系构造成一个 DAG。在内部，Ray 会将用户定义的 DAG 编译成 COMPILED_DAG，然后交给调度器去处理。<br>use_ray_compiled_dag开启后会使用Ray’s compiled DAG的API，会节省ray控制面分发的开销，需要配合use_ray_spmd_worker一起开启<br>use_ray_spmd_worker开启后不会区分Driver和worker 需要和use_ray_compiled_dag 一起开启<br>开启方式：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">RAY_COMPILED_DAG</span>=1<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">VLLM_USE_RAY_SPMD_WORKER</span>=1 <br><span class="hljs-built_in">export</span> <span class="hljs-attribute">VLLM_USE_RAY_COMPILED_DAG</span>=1<br></code></pre></td></tr></table></figure><p>具体来说，我们从驱动程序中删除了参数准备和模型执行功能，并使所有工作器都采用 SPMD 风格：LLMEngine&#x2F;驱动程序现在通过 Ray DAG 通道（共享内存）将输入传递给所有 SPMD 工作器，每个工作器准备参数并执行其模型分片。结果也通过 Ray DAG 通道传回Driver程序。</p><blockquote style="color: gray; font-size: 0.9em;">https://github.com/vllm-project/vllm/issues/6556</blockquote><p>_init_workers_ray主要功能是创建和分配worker和一些参数</p><ul><li>设置gpu_memory_utilization，如果tp和pp都为1的话才生效，否则每个worker为1</li><li>配置ray_workers_use_nsight</li><li>根据placement_group创建worker</li><li>将worker根据是否use_ray_spmd_worker来加入到不同列表中</li><li>初始化worker并load model</li><li>对worker进行分组</li></ul><blockquote style="color: gray; font-size: 0.9em;">https://github.com/vllm-project/vllm/blob/v0.6.2/vllm/executor/ray_gpu_executor.py#L109</blockquote><p>根据<strong>placement_group</strong>创建worker，如果开启了spmd，则不需要声明driver worker</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> bundle_id, bundle <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(placement_group.bundle_specs):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bundle.get(<span class="hljs-string">&quot;GPU&quot;</span>, <span class="hljs-number">0</span>): <span class="hljs-comment">#如果没GPU则跳过</span><br>        <span class="hljs-keyword">continue</span><br>    scheduling_strategy = PlacementGroupSchedulingStrategy(  <span class="hljs-comment"># 使用按PlacementGroup的调度策略</span><br>        placement_group=placement_group,<br>        placement_group_capture_child_tasks=<span class="hljs-literal">True</span>,<br>        placement_group_bundle_index=bundle_id,<br>    )<br><br>    worker = ray.remote(<br>        num_cpus=<span class="hljs-number">0</span>,<br>        num_gpus=num_gpus,<br>        scheduling_strategy=scheduling_strategy,<br>        **ray_remote_kwargs,<br>    )(RayWorkerWrapper).remote(**worker_wrapper_kwargs) <span class="hljs-comment"># 使用ray创建worker </span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.use_ray_spmd_worker:<br>        <span class="hljs-variable language_">self</span>.workers.append(worker)   <span class="hljs-comment"># 如果是use_ray_spmd_worker 则不需要区分driver</span><br>    <span class="hljs-keyword">else</span>:<br>        worker_ip = ray.get(worker.get_node_ip.remote())<br>        <span class="hljs-keyword">if</span> worker_ip == driver_ip <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.driver_dummy_worker <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-comment"># If the worker is on the same node as the driver, we use it</span><br>            <span class="hljs-comment"># as the resource holder for the driver process.</span><br>            <span class="hljs-variable language_">self</span>.driver_dummy_worker = worker        <span class="hljs-comment"># 需要一个和driver在同一节点的worker  只有get_node_and_gpu_ids用到 </span><br>            <span class="hljs-variable language_">self</span>.driver_worker = RayWorkerWrapper(   <span class="hljs-comment"># driver worker独立创建</span><br>                **worker_wrapper_kwargs)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># Else, added to the list of workers.</span><br>            <span class="hljs-variable language_">self</span>.workers.append(worker)<br></code></pre></td></tr></table></figure><h4 id="execute-model"><a href="#execute-model" class="headerlink" title="execute_model"></a>execute_model</h4><blockquote style="color: gray; font-size: 0.9em;">https://github.com/vllm-project/vllm/blob/v0.6.2/vllm/executor/ray_gpu_executor.py#L315</blockquote>llm_engine同步方式 使用模型不支持流水线并行（pp），所以调用execute_model直接使用driver_worker进行推理。所以猜测同步方式推理的话 ，推理只在driver_worker上运行，并不会到ray中的其他节点中去。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_driver_execute_model</span>(<span class="hljs-params"></span><br><span class="hljs-params">    self, execute_model_req: <span class="hljs-type">Optional</span>[ExecuteModelRequest]</span><br><span class="hljs-params"></span>) -&gt; <span class="hljs-type">Optional</span>[<span class="hljs-type">List</span>[SamplerOutput]]:<br>    <span class="hljs-string">&quot;&quot;&quot;Run execute_model in the driver worker.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Passing None will cause the driver to stop the model execution</span><br><span class="hljs-string">    loop running in each of the remote workers.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.use_ray_spmd_worker, (<br>        <span class="hljs-string">&quot;driver_worker does not exist for VLLM_USE_RAY_SPMD_WORKER=1&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.driver_worker.execute_method(<span class="hljs-string">&quot;execute_model&quot;</span>,<br>                                             execute_model_req)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_model</span>(<span class="hljs-params"></span><br><span class="hljs-params">        self,</span><br><span class="hljs-params">        execute_model_req: ExecuteModelRequest</span>) -&gt; <span class="hljs-type">List</span>[SamplerOutput]:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.use_ray_spmd_worker:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().execute_model(execute_model_req)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.forward_dag <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-variable language_">self</span>.forward_dag = <span class="hljs-variable language_">self</span>._compiled_ray_dag(enable_asyncio=<span class="hljs-literal">False</span>)<br><br>    serialized_data = <span class="hljs-variable language_">self</span>.input_encoder.encode(execute_model_req)<br>    outputs = ray.get(<span class="hljs-variable language_">self</span>.forward_dag.execute(serialized_data))<br>    output = <span class="hljs-variable language_">self</span>.output_decoder.decode(outputs[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">return</span> output<br></code></pre></td></tr></table></figure><p>async_llm_engine方式则异步的对任务请求分发到每个节点去异步执行，并gather结果并返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_model_async</span>(<span class="hljs-params"></span><br><span class="hljs-params">        self,</span><br><span class="hljs-params">        execute_model_req: ExecuteModelRequest</span>) -&gt; <span class="hljs-type">List</span>[SamplerOutput]:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.use_ray_spmd_worker:<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-built_in">super</span>().execute_model_async(execute_model_req)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.forward_dag <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-variable language_">self</span>.forward_dag = <span class="hljs-variable language_">self</span>._compiled_ray_dag(enable_asyncio=<span class="hljs-literal">True</span>)<br><br>    serialized_data = <span class="hljs-variable language_">self</span>.input_encoder.encode(execute_model_req)<br>    dag_future = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">self</span>.forward_dag.execute_async(serialized_data)<br>    outputs = <span class="hljs-keyword">await</span> dag_future<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.output_decoder.decode(outputs[<span class="hljs-number">0</span>])<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">_driver_execute_model_async</span>(<span class="hljs-params"></span><br><span class="hljs-params">    self,</span><br><span class="hljs-params">    execute_model_req: <span class="hljs-type">Optional</span>[ExecuteModelRequest] = <span class="hljs-literal">None</span></span><br><span class="hljs-params"></span>) -&gt; <span class="hljs-type">List</span>[SamplerOutput]:<br>    <span class="hljs-keyword">assert</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.use_ray_spmd_worker, (<br>        <span class="hljs-string">&quot;driver_worker does not exist for VLLM_USE_RAY_SPMD_WORKER=1&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.tp_driver_workers:<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">self</span>.driver_exec_method(<span class="hljs-string">&quot;execute_model&quot;</span>,<br>                                             execute_model_req)<br>    <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.pp_locks <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># This locks each pipeline parallel stage so multiple virtual</span><br>        <span class="hljs-comment"># engines can&#x27;t execute on the same stage at the same time</span><br>        <span class="hljs-comment"># We create the locks here to avoid creating them in the constructor</span><br>        <span class="hljs-comment"># which uses a different asyncio loop.</span><br>        <span class="hljs-variable language_">self</span>.pp_locks = [<br>            asyncio.Lock()<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.parallel_config.pipeline_parallel_size)<br>        ]<br><br>    tasks = [<br>        asyncio.create_task(<br>            _run_task_with_lock(<span class="hljs-variable language_">self</span>.driver_exec_method, <span class="hljs-variable language_">self</span>.pp_locks[<span class="hljs-number">0</span>],<br>                                <span class="hljs-string">&quot;execute_model&quot;</span>, execute_model_req))<br>    ]<br>    <span class="hljs-keyword">for</span> pp_rank, driver_worker <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-variable language_">self</span>.tp_driver_workers,<br>                                            start=<span class="hljs-number">1</span>):<br>        tasks.append(<br>            asyncio.create_task(<br>                _run_task_with_lock(driver_worker.execute_method.remote,<br>                                    <span class="hljs-variable language_">self</span>.pp_locks[pp_rank],<br>                                    <span class="hljs-string">&quot;execute_model&quot;</span>, execute_model_req)))<br><br>    results = <span class="hljs-keyword">await</span> asyncio.gather(*tasks)<br><br>    <span class="hljs-comment"># Only the last PP stage has the final results.</span><br>    <span class="hljs-keyword">return</span> results[-<span class="hljs-number">1</span>]<br><br></code></pre></td></tr></table></figure><h4 id="Ray-DAG"><a href="#Ray-DAG" class="headerlink" title="Ray DAG"></a>Ray DAG</h4><p>编译Ray DAG</p><blockquote style="color: gray; font-size: 0.9em;">https://github.com/vllm-project/vllm/blob/v0.6.2/vllm/executor/ray_gpu_executor.py#L460</blockquote>- 创建DAG的起点- 根据tp的数量生产一个列表- 为每个tp组的worker绑定outputs的输入 ，并且上个pp组的worker的输出为下个pp组的输入- 给每个output转换为指定类型- 将 outputs放入到MultiOutputNode中准备编译- 编译依赖生成有向无环图<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs clean">def _compiled_ray_dag(self, enable_asyncio: bool):<br>    assert self.parallel_config.use_ray<br>    self._check_ray_adag_installation()<br>    <span class="hljs-keyword">from</span> ray.dag <span class="hljs-keyword">import</span> InputNode, MultiOutputNode<br>    <span class="hljs-keyword">from</span> ray.experimental.channel.torch_tensor_type <span class="hljs-keyword">import</span> TorchTensorType<br><br>    logger.info(<span class="hljs-string">&quot;VLLM_USE_RAY_COMPILED_DAG_NCCL_CHANNEL = %s&quot;</span>,<br>                envs.VLLM_USE_RAY_COMPILED_DAG_NCCL_CHANNEL)<br>    <span class="hljs-keyword">with</span> InputNode() <span class="hljs-keyword">as</span> input_data:  # DAG的起点<br>        # Example DAG: PP=<span class="hljs-number">2</span>, TP=<span class="hljs-number">4</span><br>        # (ExecuteModelReq, None) -&gt; <span class="hljs-number">0</span> -&gt; (ExecuteModelReq, IntermediateOutput) -&gt; <span class="hljs-number">4</span> -&gt; SamplerOutput   # noqa: E501<br>        #                         -&gt; <span class="hljs-number">1</span> -&gt; (ExecuteModelReq, IntermediateOutput) -&gt; <span class="hljs-number">5</span> -&gt; SamplerOutput   # noqa: E501<br>        #                         -&gt; <span class="hljs-number">2</span> -&gt; (ExecuteModelReq, IntermediateOutput) -&gt; <span class="hljs-number">6</span> -&gt; SamplerOutput   # noqa: E501<br>        #                         -&gt; <span class="hljs-number">3</span> -&gt; (ExecuteModelReq, IntermediateOutput) -&gt; <span class="hljs-number">7</span> -&gt; SamplerOutput   # noqa: E501<br><br>        # All workers <span class="hljs-keyword">in</span> the first TP group will take <span class="hljs-keyword">in</span> the<br>        # ExecuteModelRequest <span class="hljs-keyword">as</span> input.<br>        outputs = [input_data for _ <span class="hljs-keyword">in</span> self.pp_tp_workers[<span class="hljs-number">0</span>]]   #根据tp的数量，生成一个列表，列表的元素是input_data<br>        for pp_rank, tp_group <span class="hljs-keyword">in</span> enumerate(self.pp_tp_workers):  # 遍历pp组<br>            # Each PP worker takes <span class="hljs-keyword">in</span> the output <span class="hljs-keyword">of</span> the previous PP worker,<br>            # and the TP group executes <span class="hljs-keyword">in</span> SPMD fashion.<br>            outputs = [<br>                worker.execute_model_spmd.<br>                bind(  # type: ignore[attr-defined]<br>                    outputs[i]) for i, worker <span class="hljs-keyword">in</span> enumerate(tp_group)  # tp组里面的每个worker都赋予对应的input_data<br>            ]  # 上一组的输出，作为下一组的输入<br><br>            last_pp_rank = len(self.pp_tp_workers) - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> pp_rank &lt; last_pp_rank:<br>                # Specify how intermediate tensors should be passed<br>                # between pp stages, no need to specify for the last<br>                # pp stage.<br>                # 如果开启了VLLM_USE_RAY_COMPILED_DAG_NCCL_CHANNEL 则用nccl<br>                transport = <span class="hljs-string">&quot;nccl&quot;</span> \<br>                    <span class="hljs-keyword">if</span> envs.VLLM_USE_RAY_COMPILED_DAG_NCCL_CHANNEL \<br>                    else <span class="hljs-string">&quot;auto&quot;</span><br>                outputs = [<br>                    output.with_type_hint(<br>                        TorchTensorType(transport=transport))   # 给每个output转换为指定类型<br>                    for output <span class="hljs-keyword">in</span> outputs<br>                ]<br><br>        forward_dag = MultiOutputNode(outputs)  #将 outputs放入到MultiOutputNode中准备编译<br><br>    return forward_dag.experimental_compile(enable_asyncio=enable_asyncio)  # 根据任务的依赖关系，编译生成一个可执行的有向无环图结构<br></code></pre></td></tr></table></figure><p>worker以spmd方式执行</p><blockquote style="color: gray; font-size: 0.9em;">https://github.com/vllm-project/vllm/blob/v0.6.2/vllm/worker/worker_base.py#L356</blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_execute_model_spmd</span>(<span class="hljs-params"></span><br><span class="hljs-params">    self,</span><br><span class="hljs-params">    execute_model_req: ExecuteModelRequest,</span><br><span class="hljs-params">    intermediate_tensors: <span class="hljs-type">Optional</span>[IntermediateTensors] = <span class="hljs-literal">None</span></span><br><span class="hljs-params"></span>) -&gt; <span class="hljs-type">Optional</span>[<span class="hljs-type">List</span>[SamplerOutput]]:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Execute model in Single Program Multiple Data (SPMD) fashion.</span><br><span class="hljs-string">    All workers take the same request, prepare the input and</span><br><span class="hljs-string">    execute the model.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> execute_model_req <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>, (<br>        <span class="hljs-string">&quot;_execute_model_spmd() requires each worker to take in an &quot;</span><br>        <span class="hljs-string">&quot;ExecuteModelRequest&quot;</span>)<br>    worker_input: WorkerInput = <span class="hljs-variable language_">self</span>.prepare_worker_input(<br>        execute_model_req=execute_model_req)<br>    model_input: ModelRunnerInputBase = (<br>        <span class="hljs-variable language_">self</span>.model_runner.prepare_model_input(<br>            execute_model_req.seq_group_metadata_list))<br><br>    <span class="hljs-variable language_">self</span>.execute_worker(worker_input)<br><br>    <span class="hljs-comment"># If there is no input, we don&#x27;t need to execute the model.</span><br>    <span class="hljs-keyword">if</span> worker_input.num_seq_groups == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> []<br><br>    kwargs = extract_previous_hidden_states(execute_model_req)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.model_runner.execute_model(<br>        model_input=model_input,<br>        kv_caches=<span class="hljs-variable language_">self</span>.kv_cache[worker_input.virtual_engine]<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.kv_cache <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>,<br>        intermediate_tensors=intermediate_tensors,<br>        **kwargs,<br>    )<br></code></pre></td></tr></table></figure><h3 id="MultiprocessingGPUExecutor"><a href="#MultiprocessingGPUExecutor" class="headerlink" title="MultiprocessingGPUExecutor"></a>MultiprocessingGPUExecutor</h3><p>MultiprocessingGPUExecutor主要负责单节点多GPU上的worker执行。</p><h4 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h4><ul><li>设置OMP_NUM_THREADS</li><li>设置CacheManager</li><li>初始化workers、tp_driver_workers、non_driver_workers</li><li>初始化worker_monitor</li><li>创建driver_worker</li><li>init_device</li><li>load_model<br>参数： OMP_NUM_THREADS</li></ul><blockquote style="color: gray; font-size: 0.9em;">https://pytorch.org/tutorials/recipes/recipes/tuning_guide.html#utilize-openmp</blockquote>用于控制 OpenMP 并行库在执行并行代码时使用的线程数量。默认为1 。增大后会影响并行程序的cpu争抢，可以按需调整 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> world_size == <span class="hljs-number">1</span>:<br>    <span class="hljs-variable language_">self</span>.worker_monitor = <span class="hljs-literal">None</span>   <span class="hljs-comment"># 如果只有一个worker，则不需要管理</span><br><span class="hljs-keyword">else</span>:<br>    result_handler = ResultHandler()<br>    <span class="hljs-keyword">for</span> rank <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, world_size):<br>        worker = ProcessWorkerWrapper(<br>            result_handler,<br>            partial(<br>                create_worker,<br>                **<span class="hljs-variable language_">self</span>._get_create_worker_kwargs(<br>                    rank=rank,<br>                    local_rank=rank,<br>                    distributed_init_method=distributed_init_method,<br>                )))<br>        <span class="hljs-variable language_">self</span>.workers.append(worker) <span class="hljs-comment"># 全部worker (tp_driver_workers + non_driver_workers 但不包含主程序)</span><br>        <span class="hljs-keyword">if</span> rank % tensor_parallel_size == <span class="hljs-number">0</span>:<br>            <span class="hljs-variable language_">self</span>.tp_driver_workers.append(worker) <span class="hljs-comment"># 比如一共8卡，tp = 2  那这个列表就是 2,4,6   (rank 序号从0开始)</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-variable language_">self</span>.non_driver_workers.append(worker)  <span class="hljs-comment"># 比如一共8卡，tp = 2  那这个列表就是 1,3,5,7  (rank 序号从0开始)</span><br><br>    <span class="hljs-variable language_">self</span>.worker_monitor = WorkerMonitor(<span class="hljs-variable language_">self</span>.workers, result_handler) <span class="hljs-comment"># 用于管理多个worker</span><br>    result_handler.start()<br>    <span class="hljs-variable language_">self</span>.worker_monitor.start()<br>    <br>    <span class="hljs-comment"># Set up signal handlers to shutdown the executor cleanly</span><br>    <span class="hljs-comment"># sometimes gc does not work well</span><br><br><span class="hljs-variable language_">self</span>.driver_worker = <span class="hljs-variable language_">self</span>._create_worker(<br>    distributed_init_method=distributed_init_method)  <span class="hljs-comment"># 当前主程序worker， 不在worker列表内</span><br><span class="hljs-variable language_">self</span>._run_workers(<span class="hljs-string">&quot;init_device&quot;</span>)<br><span class="hljs-variable language_">self</span>._run_workers(<span class="hljs-string">&quot;load_model&quot;</span>,<br>                  max_concurrent_workers=<span class="hljs-variable language_">self</span>.parallel_config.<br>                  max_parallel_loading_workers)<br></code></pre></td></tr></table></figure><h4 id="execute-model-1"><a href="#execute-model-1" class="headerlink" title="execute_model"></a>execute_model</h4><p>同步方法直接交给driver_worker执行<br>异步方法 和Ray几乎一样 交给每个driver_worker进行执行</p><blockquote style="color: gray; font-size: 0.9em;">https://github.com/vllm-project/vllm/blob/v0.6.2/vllm/executor/multiproc_gpu_executor.py#L140</blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_driver_execute_model</span>(<span class="hljs-params"></span><br><span class="hljs-params">    self, execute_model_req: <span class="hljs-type">Optional</span>[ExecuteModelRequest]</span><br><span class="hljs-params"></span>) -&gt; <span class="hljs-type">Optional</span>[<span class="hljs-type">List</span>[SamplerOutput]]:<br>    <span class="hljs-string">&quot;&quot;&quot;Run execute_model in the driver worker.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Passing None will cause the driver to stop the model execution</span><br><span class="hljs-string">    loop running in each of the remote workers.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.driver_worker.execute_model(execute_model_req)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">_driver_execute_model_async</span>(<span class="hljs-params"></span><br><span class="hljs-params">    self,</span><br><span class="hljs-params">    execute_model_req: <span class="hljs-type">Optional</span>[ExecuteModelRequest] = <span class="hljs-literal">None</span></span><br><span class="hljs-params"></span>) -&gt; <span class="hljs-type">List</span>[SamplerOutput]:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.tp_driver_workers:<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">self</span>.driver_exec_model(execute_model_req)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.pp_locks <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># This locks each pipeline parallel stage so multiple virtual</span><br>        <span class="hljs-comment"># engines can&#x27;t execute on the same stage at the same time</span><br>        <span class="hljs-comment"># We create the locks here to avoid creating them in the constructor</span><br>        <span class="hljs-comment"># which uses a different asyncio loop.</span><br>        <span class="hljs-variable language_">self</span>.pp_locks = [<br>            asyncio.Lock()<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.parallel_config.pipeline_parallel_size)<br>        ]<br><br>    tasks = [<br>        asyncio.create_task(<br>            _run_task_with_lock(<span class="hljs-variable language_">self</span>.driver_exec_model, <span class="hljs-variable language_">self</span>.pp_locks[<span class="hljs-number">0</span>],<br>                                execute_model_req))<br>    ]<br>    <span class="hljs-keyword">for</span> pp_rank, driver_worker <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-variable language_">self</span>.tp_driver_workers,<br>                                            start=<span class="hljs-number">1</span>):<br>        tasks.append(<br>            asyncio.create_task(<br>                _run_task_with_lock(driver_worker.execute_method_async,<br>                                    <span class="hljs-variable language_">self</span>.pp_locks[pp_rank],<br>                                    <span class="hljs-string">&quot;execute_model&quot;</span>, execute_model_req)))<br>    results = <span class="hljs-keyword">await</span> asyncio.gather(*tasks)<br><br>    <span class="hljs-comment"># Only the last PP stage has the final results.</span><br>    <span class="hljs-keyword">return</span> results[-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h4 id="ProcessWorkerWrapper"><a href="#ProcessWorkerWrapper" class="headerlink" title="ProcessWorkerWrapper"></a>ProcessWorkerWrapper</h4><p>multiProcessing的worker执行引入了队列，任务在执行时会将task_id和任务参数进入队列中，并在_run_worker_process中执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProcessWorkerWrapper</span>:<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, result_handler: ResultHandler,</span><br><span class="hljs-params">             worker_factory: <span class="hljs-type">Callable</span>[[], <span class="hljs-type">Any</span>]</span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-variable language_">self</span>._task_queue = mp.Queue()<br>    <span class="hljs-variable language_">self</span>.result_queue = result_handler.result_queue<br>    <span class="hljs-variable language_">self</span>.tasks = result_handler.tasks<br>    <span class="hljs-variable language_">self</span>.process: BaseProcess = mp.Process(  <span class="hljs-comment"># type: ignore[attr-defined]</span><br>        target=_run_worker_process,<br>        name=<span class="hljs-string">&quot;VllmWorkerProcess&quot;</span>,<br>        kwargs=<span class="hljs-built_in">dict</span>(<br>            worker_factory=worker_factory,<br>            task_queue=<span class="hljs-variable language_">self</span>._task_queue,<br>            result_queue=<span class="hljs-variable language_">self</span>.result_queue,<br>        ),<br>        daemon=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-variable language_">self</span>.process.start()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_enqueue_task</span>(<span class="hljs-params">self, future: <span class="hljs-type">Union</span>[ResultFuture, asyncio.Future],</span><br><span class="hljs-params">                  method: <span class="hljs-built_in">str</span>, args, kwargs</span>):<br>    task_id = uuid.uuid4()<br>    <span class="hljs-variable language_">self</span>.tasks[task_id] = future<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-variable language_">self</span>._task_queue.put((task_id, method, args, kwargs))<br>    <span class="hljs-keyword">except</span> SystemExit:<br>        <span class="hljs-keyword">raise</span><br>    <span class="hljs-keyword">except</span> BaseException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">del</span> <span class="hljs-variable language_">self</span>.tasks[task_id]<br>        <span class="hljs-keyword">raise</span> ChildProcessError(<span class="hljs-string">&quot;worker died&quot;</span>) <span class="hljs-keyword">from</span> e<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_method</span>(<span class="hljs-params">self, method: <span class="hljs-built_in">str</span>, *args, **kwargs</span>):<br>    future: ResultFuture = ResultFuture()<br>    <span class="hljs-variable language_">self</span>._enqueue_task(future, method, args, kwargs)<br>    <span class="hljs-keyword">return</span> future<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_run_worker_process</span>(<span class="hljs-params"></span><br><span class="hljs-params">    worker_factory: <span class="hljs-type">Callable</span>[[], <span class="hljs-type">Any</span>],</span><br><span class="hljs-params">    task_queue: Queue,</span><br><span class="hljs-params">    result_queue: Queue,</span><br><span class="hljs-params"></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;Worker process event loop&quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># Add process-specific prefix to stdout and stderr</span><br>    process_name = mp.current_process().name<br>    pid = os.getpid()<br>    _add_prefix(sys.stdout, process_name, pid)<br>    _add_prefix(sys.stderr, process_name, pid)<br><br>    <span class="hljs-comment"># Initialize worker</span><br>    worker = worker_factory()<br>    <span class="hljs-keyword">del</span> worker_factory<br><br>    <span class="hljs-comment"># Accept tasks from the engine in task_queue</span><br>    <span class="hljs-comment"># and return task output in result_queue</span><br>    logger.info(<span class="hljs-string">&quot;Worker ready; awaiting tasks&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">for</span> items <span class="hljs-keyword">in</span> <span class="hljs-built_in">iter</span>(task_queue.get, _TERMINATE):<br>            output = <span class="hljs-literal">None</span><br>            exception = <span class="hljs-literal">None</span><br>            task_id, method, args, kwargs = items<br>            <span class="hljs-keyword">try</span>:<br>                executor = <span class="hljs-built_in">getattr</span>(worker, method)<br>                output = executor(*args, **kwargs)<br>            <span class="hljs-keyword">except</span> SystemExit:<br>                <span class="hljs-keyword">raise</span><br>            <span class="hljs-keyword">except</span> KeyboardInterrupt:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">except</span> BaseException <span class="hljs-keyword">as</span> e:<br>                tb = traceback.format_exc()<br>                logger.error(<br>                    <span class="hljs-string">&quot;Exception in worker %s while processing method %s: %s, %s&quot;</span>,<br>                    process_name, method, e, tb)<br>                exception = e<br>            result_queue.put(<br>                Result(task_id=task_id, value=output, exception=exception))<br>    <span class="hljs-keyword">except</span> KeyboardInterrupt:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">except</span> Exception:<br>        logger.exception(<span class="hljs-string">&quot;Worker failed&quot;</span>)<br><br>    logger.info(<span class="hljs-string">&quot;Worker exiting&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="可调整参数"><a href="#可调整参数" class="headerlink" title="可调整参数"></a>可调整参数</h2><ul><li>distributed_executor_backend 分布式推理方式，可选值: mp、ray、none</li><li>是否开启SPMD和DAG，数据并行与Ray有向无环图编译</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">RAY_COMPILED_DAG</span>=1<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">VLLM_USE_RAY_SPMD_WORKER</span>=1 <br><span class="hljs-built_in">export</span> <span class="hljs-attribute">VLLM_USE_RAY_COMPILED_DAG</span>=1<br></code></pre></td></tr></table></figure><ul><li>OMP_NUM_THREADS 默认为1  ，torch默认占用cpu线程数</li><li>ray_workers_use_nsight是否开启nsight</li><li>VLLM_USE_RAY_COMPILED_DAG_NCCL_CHANNEL 是否使用nccl来编译Ray的 DAG</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>K8s 队列 Kueue</title>
    <link href="/ika-new-blog/2024/05/11/kueue/"/>
    <url>/ika-new-blog/2024/05/11/kueue/</url>
    
    <content type="html"><![CDATA[<h2 id="kueue主要功能"><a href="#kueue主要功能" class="headerlink" title="kueue主要功能"></a>kueue主要功能</h2><ul><li>通过标签对节点进行选择与隔离</li><li>对所需cpu、memory、GPU进行限制</li><li>对任务进行优先级与排队<br>官方文档：kueue.sigs.k8s.io</li></ul><h2 id="Kueue适用Kind范围"><a href="#Kueue适用Kind范围" class="headerlink" title="Kueue适用Kind范围"></a>Kueue适用Kind范围</h2><ul><li>Job</li><li>RayClusters</li><li>Pod (需特殊配置 并要求k8s版本在v1.27以上)</li><li>KubeflowJobs (MXJob、PaddleJob、XGBoostJob、TFJob、PyTorchJob、MPIJob)</li><li>RayJob</li><li>MiniCluster</li><li>Jobset</li></ul><h2 id="kueue使用"><a href="#kueue使用" class="headerlink" title="kueue使用"></a>kueue使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>直接默认参数安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">VERSION=v0.<span class="hljs-number">6.2</span><br>kubectl apply --server-side -f https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kubernetes-sigs/</span>kueue<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/$VERSION/m</span>anifests.yaml<br></code></pre></td></tr></table></figure><p>也可以下载其配置进行安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">VERSION=v0.<span class="hljs-number">6.2</span><br>wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kubernetes-sigs/</span>kueue<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/$VERSION/m</span>anifests.yaml<br><br>kubectl apply --server-side -f manifests.yaml<br></code></pre></td></tr></table></figure><p>卸载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">VERSION=v0.<span class="hljs-number">6.2</span><br>kubectl <span class="hljs-keyword">delete</span> -f https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kubernetes-sigs/</span>kueue<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/$VERSION/m</span>anifests.yaml<br></code></pre></td></tr></table></figure><h3 id="创建-ResourceFlavor"><a href="#创建-ResourceFlavor" class="headerlink" title="创建 ResourceFlavor"></a>创建 ResourceFlavor</h3><p>ResourceFlavor 是一种集群级别的对象，它表示集群内节点的集合。它通过节点标签和污点与节点进行关联，从而将任务分配到指定节点上。<br>我们先为工作机器打上对应标签</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">kubectl <span class="hljs-keyword">label</span> nodes worker1 <span class="hljs-keyword">ty</span>.<span class="hljs-keyword">test</span>/<span class="hljs-keyword">label</span>.training=true<br></code></pre></td></tr></table></figure><p>编写简单的flavors.yaml</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># flavors.yaml</span><br><span class="hljs-params">apiVersion:</span> kueue.x-k8s.io<span class="hljs-symbol">/v1beta1</span><br><span class="hljs-params">kind:</span> ResourceFlavor<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> <span class="hljs-string">&quot;resource-flavor-default-queue&quot;</span><br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">nodeLabels:</span><br>    ty.test<span class="hljs-operator">/</span>label.<span class="hljs-params">training:</span> <span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><p>部署 ResourceFlavor:</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f flavors.yaml<br></code></pre></td></tr></table></figure><p>这样 后续创建的Job任务会根据ResourceFlavor上的nodeLabel标签规则进行主机调度</p><h3 id="创建-ClusterQueue"><a href="#创建-ClusterQueue" class="headerlink" title="创建 ClusterQueue"></a>创建 ClusterQueue</h3><p>ClusterQueue 是集群级别的对象，用于管理 CPU、内存、GPU 等资源池。它负责限制资源用量并决定工作负载的执行规则。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># cluster-queue.yaml</span><br><span class="hljs-params">apiVersion:</span> kueue.x-k8s.io<span class="hljs-symbol">/v1beta1</span><br><span class="hljs-params">kind:</span> ClusterQueue<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> <span class="hljs-string">&quot;cluster-queue-default-queue&quot;</span><br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">namespaceSelector:</span> &#123;&#125; <span class="hljs-comment"># match all.</span><br>  <span class="hljs-params">queueStrategy:</span> BestEffortFIFO <span class="hljs-comment"># [StrictFIFO,BestEffortFIFO] https://kueue.sigs.k8s.io/docs/concepts/cluster_queue/#queueing-strategy</span><br>  <span class="hljs-params">resourceGroups:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">coveredResources:</span> [<span class="hljs-string">&quot;cpu&quot;</span>, <span class="hljs-string">&quot;memory&quot;</span>, <span class="hljs-string">&quot;nvidia.com/gpu&quot;</span>]<br>    <span class="hljs-params">flavors:</span><br>    <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> <span class="hljs-string">&quot;resource-flavor-default-queue&quot;</span><br>      <span class="hljs-params">resources:</span><br>      <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> <span class="hljs-string">&quot;cpu&quot;</span><br>        <span class="hljs-params">nominalQuota:</span> <span class="hljs-string">&quot;120&quot;</span><br>      <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> <span class="hljs-string">&quot;memory&quot;</span><br>        <span class="hljs-params">nominalQuota:</span> <span class="hljs-number">180</span>Gi<br>      <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> <span class="hljs-string">&quot;nvidia.com/gpu&quot;</span><br>        <span class="hljs-params">nominalQuota:</span> <span class="hljs-string">&quot;8&quot;</span><br></code></pre></td></tr></table></figure><p>部署 ClusterQueue：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">kubectl apply -f cluster-queue.yaml<br></code></pre></td></tr></table></figure><p>队列的排队顺序由 .spec.queueingStrategy 确定，其中有两种配置：</p><ul><li>BestEffortFIFO<ul><li>默认排队策略配置。</li><li>工作负载准入遵循先进先出 (FIFO) 规则，但如果配额不足以允许队列头部的工作负载，则将尝试队列中的下一项工作负载。</li></ul></li><li>StrictFIFO<ul><li>保证 FIFO 语义。</li><li>队列头部的工作负载可以阻止将更多工作负载加入队列，直到该工作负载获得准入许可。</li></ul></li></ul><h3 id="创建-LocalQueue"><a href="#创建-LocalQueue" class="headerlink" title="创建 LocalQueue"></a>创建 LocalQueue</h3><p>LocalQueue 是一个命名空间对象，接受来自命名空间中用户的工作负载。不同命名空间的 LocalQueue 可以指向同一个 ClusterQueue，它们可以在其中共享资源的配额。在这种情况下，命名空间 team-a 和 team-b 中的 LocalQueue 指向 .spec.clusterQueue 下的同一 ClusterQueue cluster-queue。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># local-queue.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kueue.x-k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">LocalQueue</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">team-a</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">lq-team-a</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">clusterQueue:</span> <span class="hljs-string">cluster-queue-default-queue</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">kueue.x-k8s.io/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">LocalQueue</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">team-b</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">lq-team-b</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">clusterQueue:</span> <span class="hljs-string">cluster-queue</span><br></code></pre></td></tr></table></figure><p>部署 LocalQueue：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">kubectl <span class="hljs-built_in">apply</span> -f <span class="hljs-built_in">local</span>-queue.yaml<br></code></pre></td></tr></table></figure><p>创建WorkloadPriorityClass<br>可通过创建WorkloadPriorityClass对象来对队列中的工作负载进行优先级的管理</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># workload-priority-class.yaml</span><br><span class="hljs-params">apiVersion:</span> kueue.x-k8s.io<span class="hljs-symbol">/v1beta1</span><br><span class="hljs-params">kind:</span> WorkloadPriorityClass<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">namespace:</span> team-a<br>  <span class="hljs-params">name:</span> high-priority<br><span class="hljs-params">value:</span> <span class="hljs-number">9</span> <span class="hljs-comment"># 优先级数值 越大代表优先级越高</span><br><span class="hljs-params">description:</span> <span class="hljs-string">&quot;high priority&quot;</span><br></code></pre></td></tr></table></figure><p>WorkloadPriorityClass部署：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">kubectl apply -f workload-<span class="hljs-keyword">priority</span>-<span class="hljs-keyword">class</span><span class="hljs-variable">.yaml</span><br></code></pre></td></tr></table></figure><h3 id="创建PyTorchJob"><a href="#创建PyTorchJob" class="headerlink" title="创建PyTorchJob"></a>创建PyTorchJob</h3><p>任务通过labels来绑定队列以及优先级<br>.metadata.labels.kueue.x-k8s.io&#x2F;queue-name 用于绑定队列<br>.metadata.labels.kueue.kueue.x-k8s.io&#x2F;priority-class 用于绑定优先级</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># pytorch-simple.yaml</span><br><span class="hljs-params">apiVersion:</span> kubeflow.org<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> PyTorchJob<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> pytorch-simple<br>  <span class="hljs-params">namespace:</span> team-a<br>  <span class="hljs-params">labels:</span><br>    kueue.x-k8s.io<span class="hljs-operator">/</span><span class="hljs-params">queue-name:</span> lq-team-a <span class="hljs-comment"># 关联的本地队列</span><br>    kueue.x-k8s.io<span class="hljs-operator">/</span><span class="hljs-params">priority-class:</span> high-priority <span class="hljs-comment"># 关联的优先级</span><br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">pytorchReplicaSpecs:</span><br>    <span class="hljs-params">Master:</span><br>      <span class="hljs-params">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-params">restartPolicy:</span> OnFailure<br>      <span class="hljs-params">template:</span><br>        <span class="hljs-params">spec:</span><br>          <span class="hljs-params">containers:</span><br>          <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> pytorch<br>            <span class="hljs-params">image:</span> uhub.service.ucloud.cn<span class="hljs-operator">/</span>dockerhub_mirror<span class="hljs-operator">/</span>pytorch-mnist:v1beta1-<span class="hljs-number">45</span>c5727<br>            <span class="hljs-params">imagePullPolicy:</span> Always<br>            <span class="hljs-params">command:</span><br>            <span class="hljs-operator">-</span> <span class="hljs-string">&quot;python3&quot;</span><br>            <span class="hljs-operator">-</span> <span class="hljs-string">&quot;/opt/pytorch-mnist/mnist.py&quot;</span><br>            <span class="hljs-operator">-</span> <span class="hljs-string">&quot;--epochs=1&quot;</span><br>            <span class="hljs-params">resources:</span><br>              <span class="hljs-params">requests:</span><br>                <span class="hljs-params">cpu:</span> <span class="hljs-number">1</span><br>                <span class="hljs-params">memory:</span> <span class="hljs-string">&quot;200Mi&quot;</span><br>              <span class="hljs-params">limits:</span><br>                <span class="hljs-params">cpu:</span> <span class="hljs-number">1</span><br>                <span class="hljs-params">memory:</span> <span class="hljs-string">&quot;200Mi&quot;</span><br>                nvidia.com<span class="hljs-operator">/</span><span class="hljs-params">gpu:</span> <span class="hljs-string">&quot;1&quot;</span><br>    <span class="hljs-params">Worker:</span><br>      <span class="hljs-params">replicas:</span> <span class="hljs-number">1</span><br>      <span class="hljs-params">restartPolicy:</span> OnFailure<br>      <span class="hljs-params">template:</span><br>        <span class="hljs-params">spec:</span><br>          <span class="hljs-params">containers:</span><br>          <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> pytorch<br>            <span class="hljs-params">image:</span> uhub.service.ucloud.cn<span class="hljs-operator">/</span>dockerhub_mirror<span class="hljs-operator">/</span>pytorch-mnist:v1beta1-<span class="hljs-number">45</span>c5727<br>            <span class="hljs-params">imagePullPolicy:</span> Always<br>            <span class="hljs-params">command:</span><br>            <span class="hljs-operator">-</span> <span class="hljs-string">&quot;python3&quot;</span><br>            <span class="hljs-operator">-</span> <span class="hljs-string">&quot;/opt/pytorch-mnist/mnist.py&quot;</span><br>            <span class="hljs-operator">-</span> <span class="hljs-string">&quot;--epochs=1&quot;</span><br>            <span class="hljs-params">resources:</span><br>              <span class="hljs-params">requests:</span><br>                <span class="hljs-params">cpu:</span> <span class="hljs-number">1</span><br>                <span class="hljs-params">memory:</span> <span class="hljs-string">&quot;200Mi&quot;</span><br>              <span class="hljs-params">limits:</span><br>                <span class="hljs-params">cpu:</span> <span class="hljs-number">1</span><br>                <span class="hljs-params">memory:</span> <span class="hljs-string">&quot;200Mi&quot;</span><br>                nvidia.com<span class="hljs-operator">/</span><span class="hljs-params">gpu:</span> <span class="hljs-string">&quot;1&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="遇到过的问题"><a href="#遇到过的问题" class="headerlink" title="遇到过的问题"></a>遇到过的问题</h2><h3 id="非队列中的任务占用资源导致队列任务无法分配"><a href="#非队列中的任务占用资源导致队列任务无法分配" class="headerlink" title="非队列中的任务占用资源导致队列任务无法分配"></a>非队列中的任务占用资源导致队列任务无法分配</h3><p>场景：假设集群中一共4卡GPU， 一个外部任务占用1卡GPU，此时创建两个队列任务，一个4卡GPU 一个3卡GPU，此时两个任务都将被阻塞，队列不会根据queueingStrategy设置的BestEffortFIFO进行任务分配</p><p>解决：通过设置Kueue本身的配置 waitForPodsReady，将timeout缩短，以便对任务进行重排队解决</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">waitForPodsReady:</span><br>  <span class="hljs-params">enable:</span> <span class="hljs-literal">true</span> <br>  <span class="hljs-params">timeout:</span> <span class="hljs-number">1</span>m <br>  <span class="hljs-params">requeuingStrategy:</span>    <br>    <span class="hljs-params">timestamp:</span> Creation <br></code></pre></td></tr></table></figure><p>可参考: <a href="https://kueue.sigs.k8s.io/docs/tasks/manage/setup_sequential_admission/%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE%E8%AE%BE%E7%BD%AE">https://kueue.sigs.k8s.io/docs/tasks/manage/setup_sequential_admission/进行配置设置</a></p><h3 id="无法对deployment进行支持"><a href="#无法对deployment进行支持" class="headerlink" title="无法对deployment进行支持"></a>无法对deployment进行支持</h3><p>场景：集群中需要创建与kueue交叉资源的deployment任务，此时对deployment也打上队列标签不生效</p><p>解决：官方没有对deployment支持的愿望， 参考：<a href="https://github.com/kubernetes-sigs/kueue/issues/867">https://github.com/kubernetes-sigs/kueue/issues/867</a><br>可对deployment进行改造直接使用pod来解决： <a href="https://kueue.sigs.k8s.io/docs/tasks/run/plain_pods/">https://kueue.sigs.k8s.io/docs/tasks/run/plain_pods/</a><br>但此方式需要k8s版本在v1.27以上</p><h3 id="多队列抢占同一台主机资源时，无法按优先级进行分配"><a href="#多队列抢占同一台主机资源时，无法按优先级进行分配" class="headerlink" title="多队列抢占同一台主机资源时，无法按优先级进行分配"></a>多队列抢占同一台主机资源时，无法按优先级进行分配</h3><p>场景：集群中一共4卡GPU，先创建一个4卡任务进行阻塞，之后创建a、b、c、d 四个任务，其中 a、b属于队列1<br>c、d属于队列2，并且a和c是中优先级，b和d是高优先级 。此时将4卡任务停止运行，接下来运行的任务可能为abcd中的任意一个。</p><p>解决： 暂无解决方案。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>go中的bson包中的E、D、M、A</title>
    <link href="/ika-new-blog/2021/01/19/golang-mongo-bson/"/>
    <url>/ika-new-blog/2021/01/19/golang-mongo-bson/</url>
    
    <content type="html"><![CDATA[<p>在mongodb官方提供的go语言驱动中，要操作数据库免不了要和bson包中的E、D、M、A这4个东西打交道。由于迷惑的命名，这里就简单说明一下他们。</p><h3 id="bson-E"><a href="#bson-E" class="headerlink" title="bson.E"></a>bson.E</h3><p>bson.E其实是一个struct，他的定义是这样的</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> <span class="hljs-type">E</span> struct &#123;<br><span class="hljs-type">Key</span>   string<br><span class="hljs-type">Value</span> interface&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也就是说，他只能是一个指定Key&#x2F;Value的元素，所以使用的时候也很简单，也一般不单独使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">orgCode := bson.E&#123;<br>Key:   <span class="hljs-string">&quot;orgCode&quot;</span>,<br>Value: <span class="hljs-string">&quot;general&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="bson-D"><a href="#bson-D" class="headerlink" title="bson.D"></a>bson.D</h3><p>bson.D是一个bson.D的数组，也是我们比较常见的一种使用格式</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">type</span> <span class="hljs-type">D </span>[]E<br></code></pre></td></tr></table></figure><p>使用时，也就是数组的使用方式</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">fndOrg</span> <span class="hljs-operator">:=</span> <span class="hljs-variable">bson</span><span class="hljs-operator">.</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Key</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;orgCode&quot;</span><span class="hljs-operator">,</span> <span class="hljs-variable">Value</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;general&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">Key</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;orgName&quot;</span><span class="hljs-operator">,</span> <span class="hljs-variable">Value</span><span class="hljs-operator">:</span> <span class="hljs-string">&quot;总部&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-operator">//</span> 或者<br><span class="hljs-variable">fndJob</span> <span class="hljs-operator">:=</span> <span class="hljs-variable">bson</span><span class="hljs-operator">.</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;jobCode&quot;</span><span class="hljs-operator">,</span> <span class="hljs-string">&quot;manager&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;jobName&quot;</span><span class="hljs-operator">,</span> <span class="hljs-string">&quot;经理&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-variable">cur</span><span class="hljs-operator">,</span> <span class="hljs-variable">err</span> <span class="hljs-operator">:=</span> <span class="hljs-variable">collection</span><span class="hljs-operator">.</span><span class="hljs-built_in">Find</span><span class="hljs-punctuation">(</span><span class="hljs-variable">ctx</span><span class="hljs-operator">,</span> <span class="hljs-variable">bson</span><span class="hljs-operator">.</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;jobCode&quot;</span><span class="hljs-operator">,</span> <span class="hljs-string">&quot;manager&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h3 id="bson-M"><a href="#bson-M" class="headerlink" title="bson.M"></a>bson.M</h3><p>bson.M其实是map类型，他的功能和bson.D类似，不过bson.M顺序和声明的顺序可能不同</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> M <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>使用时</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">fndOrg := bson.M&#123;<br>&quot;orgCode&quot;: <span class="hljs-string">&quot;general&quot;</span>,<br><span class="hljs-string">&quot;orgName&quot;</span>: <span class="hljs-string">&quot;总部&quot;</span>,<br>&#125;<br><br>cur, err := collection.<span class="hljs-built_in">Find</span>(ctx, fndOrg)<br></code></pre></td></tr></table></figure><h3 id="bson-A"><a href="#bson-A" class="headerlink" title="bson.A"></a>bson.A</h3><p>bson.A是一个数组，多数使用情况是对应bson中的数组，它的作用和bson.D不同</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">type</span> <span class="hljs-type">A </span>[]<span class="hljs-keyword">interface</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>使用方式</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">result, err := collection.UpdateOne(ctx, <span class="hljs-keyword">bson.D&#123;</span><br><span class="hljs-keyword"></span>&#123;<span class="hljs-string">&quot;jobCode&quot;</span>, <span class="hljs-string">&quot;manager&quot;</span>&#125;,<br>&#125;, <span class="hljs-keyword">bson.D&#123;</span><br><span class="hljs-keyword"></span>&#123;<span class="hljs-string">&quot;$set&quot;</span>, <span class="hljs-keyword">bson.D&#123;</span><br><span class="hljs-keyword"></span>&#123;<span class="hljs-string">&quot;orgList&quot;</span>, <span class="hljs-keyword">bson.A&#123;</span><br><span class="hljs-keyword"></span><span class="hljs-string">&quot;general&quot;</span>, <span class="hljs-string">&quot;east&quot;</span>, <span class="hljs-string">&quot;north&quot;</span>, <span class="hljs-string">&quot;south&quot;</span>,<br>&#125;&#125;,<br>&#125;&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>golang mongo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>activiti流程退回</title>
    <link href="/ika-new-blog/2021/01/18/activiti-backward/"/>
    <url>/ika-new-blog/2021/01/18/activiti-backward/</url>
    
    <content type="html"><![CDATA[<p>activiti 默认是没有标准退回功能的，然而在业务需求是要一个退回功能，而且他们还不想自己拖一个退回的线去实现退回，没办法只能做一个通用一点的退回给他们使用。</p><h3 id="activiti-流程退回"><a href="#activiti-流程退回" class="headerlink" title="activiti 流程退回"></a>activiti 流程退回</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.definesys.mpaas.common.exception.MpaasBusinessException;<br><span class="hljs-keyword">import</span> org.activiti.bpmn.model.FlowElement;<br><span class="hljs-keyword">import</span> org.activiti.bpmn.model.FlowNode;<br><span class="hljs-keyword">import</span> org.activiti.bpmn.model.SequenceFlow;<br><span class="hljs-keyword">import</span> org.activiti.engine.HistoryService;<br><span class="hljs-keyword">import</span> org.activiti.engine.RepositoryService;<br><span class="hljs-keyword">import</span> org.activiti.engine.RuntimeService;<br><span class="hljs-keyword">import</span> org.activiti.engine.TaskService;<br><span class="hljs-keyword">import</span> org.activiti.engine.history.HistoricTaskInstance;<br><span class="hljs-keyword">import</span> org.activiti.engine.impl.interceptor.Command;<br><span class="hljs-keyword">import</span> org.activiti.engine.impl.interceptor.CommandContext;<br><span class="hljs-keyword">import</span> org.activiti.engine.impl.persistence.entity.ExecutionEntity;<br><span class="hljs-keyword">import</span> org.activiti.engine.impl.persistence.entity.TaskEntity;<br><span class="hljs-keyword">import</span> org.activiti.engine.task.Task;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BackWardCmd</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span>&lt;String&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> Task task;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BackWardCmd</span><span class="hljs-params">(Task task)</span> &#123;<br>        <span class="hljs-built_in">this</span>.task = task;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">execute</span><span class="hljs-params">(CommandContext commandContext)</span> &#123;<br>        <span class="hljs-type">FlowElement</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getPreNode(<span class="hljs-built_in">this</span>.task, commandContext);<br>        <span class="hljs-keyword">if</span> (element == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MpaasBusinessException</span>(<span class="hljs-string">&quot;该节点不能进行退回&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">SequenceFlow</span> <span class="hljs-variable">flow</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.findAcessSequenceFlow((FlowNode) element);<br>        <span class="hljs-type">ExecutionEntity</span> <span class="hljs-variable">currentEntry</span> <span class="hljs-operator">=</span> commandContext.getExecutionEntityManager().findById(task.getExecutionId());<br><br>        <span class="hljs-type">ExecutionEntity</span> <span class="hljs-variable">parentExecutionEntry</span> <span class="hljs-operator">=</span> currentEntry.getParent();<br><br>        commandContext.getExecutionEntityManager().deleteChildExecutions(parentExecutionEntry, <span class="hljs-string">&quot;backWard&quot;</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-type">ExecutionEntity</span> <span class="hljs-variable">childEntry</span> <span class="hljs-operator">=</span> commandContext.getExecutionEntityManager().createChildExecution(parentExecutionEntry);<br>        childEntry.setCurrentFlowElement(flow);<br>        commandContext.getAgenda().planContinueProcessOperation(childEntry);<br>        <span class="hljs-keyword">return</span> childEntry.getId();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> FlowElement <span class="hljs-title function_">getPreNode</span><span class="hljs-params">(Task task, CommandContext context)</span> &#123;<br>        <span class="hljs-type">HistoryService</span> <span class="hljs-variable">historyService</span> <span class="hljs-operator">=</span> context.getProcessEngineConfiguration().getHistoryService();<br>        List&lt;HistoricTaskInstance&gt; items = historyService.createHistoricTaskInstanceQuery()<br>                .processInstanceId(task.getProcessInstanceId())<br>                .orderByHistoricTaskInstanceStartTime()<br>                .desc()<br>                .list();<br>        <span class="hljs-keyword">if</span> (items == <span class="hljs-literal">null</span> || items.size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MpaasBusinessException</span>(<span class="hljs-string">&quot;未找到上一节点，无法退回&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">currentNodeId</span> <span class="hljs-operator">=</span> task.getTaskDefinitionKey();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">preNodeId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; items.size(); ++i) &#123;<br>            <span class="hljs-type">HistoricTaskInstance</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> items.get(i);<br>            <span class="hljs-keyword">if</span> (currentNodeId.equals(item.getTaskDefinitionKey()) || <span class="hljs-string">&quot;reject&quot;</span>.equals(item.getDeleteReason()) || <span class="hljs-string">&quot;backWard&quot;</span>.equals(item.getDeleteReason())) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            preNodeId = item.getTaskDefinitionKey();<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (preNodeId == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">RepositoryService</span> <span class="hljs-variable">repositoryService</span> <span class="hljs-operator">=</span> context.getProcessEngineConfiguration().getRepositoryService();<br>        org.activiti.bpmn.model.<span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> repositoryService.getBpmnModel(task.getProcessDefinitionId()).getMainProcess();<br>        <span class="hljs-type">FlowElement</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> process.getFlowElement(preNodeId);<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> SequenceFlow <span class="hljs-title function_">findAcessSequenceFlow</span><span class="hljs-params">(FlowNode node)</span> &#123;<br>        List&lt;SequenceFlow&gt; flows = node.getIncomingFlows();<br>        <span class="hljs-keyword">if</span> (flows == <span class="hljs-literal">null</span> || flows.size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MpaasBusinessException</span>(<span class="hljs-string">&quot;该节点不能进行退回&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//找没有加条件的连线</span><br>        <span class="hljs-keyword">for</span> (SequenceFlow flow : flows) &#123;<br>            <span class="hljs-keyword">if</span> (flow.getConditionExpression() == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> flow;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果都没有选择第一条</span><br>        <span class="hljs-keyword">return</span> flows.get(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>调用方法很简单。直接使用managementService进行调用，其中task为谁点的退回按钮，就是谁的task。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">managementService.executeCommand(<span class="hljs-keyword">new</span> BackWardCmd(<span class="hljs-keyword">task</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>activiti</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rest-template</title>
    <link href="/ika-new-blog/2021/01/15/rest-template/"/>
    <url>/ika-new-blog/2021/01/15/rest-template/</url>
    
    <content type="html"><![CDATA[<h3 id="构建restTemplate"><a href="#构建restTemplate" class="headerlink" title="构建restTemplate"></a>构建restTemplate</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestTemplateConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">RestTemplate</span> <span class="hljs-title function_">restTemplate1</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//或者</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">RestTemplate</span> <span class="hljs-title function_">restTemplate2</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplateBuilder</span>().<span class="hljs-title function_">setConnectTimeout</span>(<span class="hljs-title class_">Duration</span>.<span class="hljs-title function_">ofSeconds</span>(<span class="hljs-number">5</span>))<br>                .<span class="hljs-title function_">setReadTimeout</span>(<span class="hljs-title class_">Duration</span>.<span class="hljs-title function_">ofSeconds</span>(<span class="hljs-number">2</span>)).<span class="hljs-title function_">build</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="POST使用application-x-www-form-urlencoded方式"><a href="#POST使用application-x-www-form-urlencoded方式" class="headerlink" title="POST使用application&#x2F;x-www-form-urlencoded方式"></a>POST使用application&#x2F;x-www-form-urlencoded方式</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">MultiValueMap&lt;String,<span class="hljs-keyword">Object</span>&gt; requestParam = <span class="hljs-built_in">new</span> LinkedMultiValueMap&lt;&gt;();<br>requestParam.<span class="hljs-keyword">add</span>(&quot;grant_type&quot;,&quot;authorization_code&quot;);<br>requestParam.<span class="hljs-keyword">add</span>(&quot;code&quot;,code);<br>requestParam.<span class="hljs-keyword">add</span>(&quot;redirect_uri&quot;,redirectUri);<br>HttpHeaders headers = <span class="hljs-built_in">new</span> HttpHeaders();<br>headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);<br>String authHeader = <span class="hljs-built_in">new</span> BASE64Encoder().encode(String.format(&quot;%s:%s&quot;,clientId,clientSecret).getBytes());<br>headers.<span class="hljs-keyword">add</span>(&quot;Authorization&quot;,String.format(&quot;Basic %s&quot;,authHeader));<br>HttpEntity&lt;MultiValueMap&lt;String,<span class="hljs-keyword">Object</span>&gt;&gt; requestEntity = <span class="hljs-built_in">new</span> HttpEntity&lt;&gt;(requestParam,headers);<br>AccessToken accessToken=restTemplate.postForObject(&quot;http://localhost:8080/uaa/oauth/token&quot;,requestEntity,AccessToken.<span class="hljs-keyword">class</span>);<br></code></pre></td></tr></table></figure><h3 id="GET方法添加请求头"><a href="#GET方法添加请求头" class="headerlink" title="GET方法添加请求头"></a>GET方法添加请求头</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">private</span> UserInfo <span class="hljs-title">requestUserInfo</span><span class="hljs-params">(<span class="hljs-type">String</span> token)</span></span>&#123;<br>    HttpHeaders headers = <span class="hljs-keyword">new</span> <span class="hljs-built_in">HttpHeaders</span>();<br>    headers.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;Authorization&quot;</span>,<span class="hljs-type">String</span>.format(<span class="hljs-string">&quot;bearer %s&quot;</span>,token));<br>    ResponseEntity&lt;UserInfo&gt; userInfoResponseEntity = restTemplate.<span class="hljs-built_in">exchange</span>(<br>            <span class="hljs-string">&quot;http://localhost:8080/uaa/oauth/user&quot;</span>,<br>            HttpMethod.GET,<br>            <span class="hljs-keyword">new</span> HttpEntity&lt;&gt;(headers),<br>            UserInfo.<span class="hljs-keyword">class</span>);<br>    <span class="hljs-keyword">return</span> userInfoResponseEntity.<span class="hljs-built_in">getBody</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="POST添加请求头"><a href="#POST添加请求头" class="headerlink" title="POST添加请求头"></a>POST添加请求头</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">RestTemplate restTemplate = <span class="hljs-keyword">new</span> RestTemplate();<br>HttpHeaders httpHeaders = <span class="hljs-keyword">new</span> HttpHeaders();<br>httpHeaders.setContentType(MediaType.APPLICATION_JSON);<br>httpHeaders.add(<span class="hljs-string">&quot;AuthorizationToken&quot;</span>,<span class="hljs-string">&quot;111&quot;</span>);<br><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; <span class="hljs-keyword">map</span> = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><span class="hljs-keyword">map</span>.put(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>);<br>HttpEntity requestEntity = <span class="hljs-keyword">new</span> HttpEntity&lt;&gt;(<span class="hljs-keyword">map</span>,httpHeaders);<br><span class="hljs-built_in">String</span> result = restTemplate.postForObject(<span class="hljs-string">&quot;http://localhost:8081?timestamp=1610703163236&quot;</span>,requestEntity,<span class="hljs-built_in">String</span>.<span class="hljs-keyword">class</span>);<br></code></pre></td></tr></table></figure><h3 id="使用https"><a href="#使用https" class="headerlink" title="使用https"></a>使用https</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript">        &lt;dependency&gt;<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br>        &lt;/dependency&gt;<br>        <br><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">RestTemplate</span> <span class="hljs-title function_">genHttpRestTemplate</span>() throws <span class="hljs-title class_">KeyStoreException</span>, <span class="hljs-title class_">NoSuchAlgorithmException</span>, <span class="hljs-title class_">KeyManagementException</span> &#123;<br>    <span class="hljs-title class_">TrustStrategy</span> acceptingTrustStrategy = (X509Certificate[] chain, <span class="hljs-title class_">String</span> authType) -&gt; <span class="hljs-literal">true</span>;<br>    <span class="hljs-title class_">SSLContext</span> sslContext = org.<span class="hljs-property">apache</span>.<span class="hljs-property">http</span>.<span class="hljs-property">ssl</span>.<span class="hljs-property">SSLContexts</span>.<span class="hljs-title function_">custom</span>()<br>                .<span class="hljs-title function_">loadTrustMaterial</span>(<span class="hljs-literal">null</span>, acceptingTrustStrategy)<br>                .<span class="hljs-title function_">build</span>();<br>    <span class="hljs-title class_">SSLConnectionSocketFactory</span> csf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SSLConnectionSocketFactory</span>(sslContext);<br>    <span class="hljs-title class_">CloseableHttpClient</span> httpClient = <span class="hljs-title class_">HttpClients</span>.<span class="hljs-title function_">custom</span>().<span class="hljs-title function_">setSSLSocketFactory</span>(csf)<br>                .<span class="hljs-title function_">build</span>();<br>    <span class="hljs-title class_">HttpComponentsClientHttpRequestFactory</span> requestFactory =<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpComponentsClientHttpRequestFactory</span>();<br>    requestFactory.<span class="hljs-title function_">setHttpClient</span>(httpClient);<br>    <span class="hljs-title class_">RestTemplate</span> restTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>(requestFactory);<br>    <span class="hljs-keyword">return</span> restTemplate;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-title class_">Attachment</span> <span class="hljs-title function_">uploadAttachment</span>(<span class="hljs-params"><span class="hljs-title class_">MultipartFile</span> file</span>)&#123;<br>    <span class="hljs-title class_">SimpleClientHttpRequestFactory</span> requestFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleClientHttpRequestFactory</span>();<br>    requestFactory.<span class="hljs-title function_">setBufferRequestBody</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-title class_">RestTemplate</span> noBufferRestTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>(requestFactory);<br>    <br>    <span class="hljs-title class_">MultiValueMap</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; requestParam = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMultiValueMap</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt;();<br>    <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-title class_">Resource</span> resource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MultipartStreamResource</span>(file.<span class="hljs-title function_">getInputStream</span>(),file.<span class="hljs-title function_">getSize</span>(),file.<span class="hljs-title function_">getOriginalFilename</span>());<br>            requestParam.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;file&quot;</span>,resource);<br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">IOException</span> e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MpaasRuntimeException</span>(e);<br>    &#125;<br>    <span class="hljs-title class_">HttpHeaders</span> headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>    headers.<span class="hljs-title function_">setContentType</span>(<span class="hljs-title class_">MediaType</span>.<span class="hljs-property">MULTIPART_FORM_DATA</span>);<br>    <span class="hljs-title class_">HttpEntity</span>&lt;<span class="hljs-title class_">MultiValueMap</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt;&gt; requestEntity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntity</span>&lt;<span class="hljs-title class_">MultiValueMap</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt;&gt;(requestParam, headers);<br>    <span class="hljs-title class_">DataResponse</span> response = noBufferRestTemplate.<span class="hljs-title function_">postForObject</span>(<span class="hljs-title class_">String</span>.<span class="hljs-title function_">format</span>(<span class="hljs-string">&quot;%s/process/form/uploadAttachment&quot;</span>,<span class="hljs-string">&quot;http://localhost:8081&quot;</span>), requestEntity, <span class="hljs-title class_">DataResponse</span>.<span class="hljs-property">class</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>其中的MultipartStreamResource 是继承自InputStreamResource</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MultipartStreamResource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">InputStreamResource</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> length;<br>    <span class="hljs-keyword">private</span> String fileName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MultipartStreamResource</span><span class="hljs-params">(InputStream inputStream)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(inputStream);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MultipartStreamResource</span><span class="hljs-params">(InputStream inputStream, <span class="hljs-keyword">int</span> length)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(inputStream);<br>        <span class="hljs-keyword">this</span>.length = length;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MultipartStreamResource</span><span class="hljs-params">(InputStream inputStream, <span class="hljs-keyword">long</span> length,String fileName)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(inputStream);<br>        <span class="hljs-keyword">this</span>.length = length;<br>        <span class="hljs-keyword">this</span>.fileName = fileName;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">getLength</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> length;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span> length)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.length = length;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">String <span class="hljs-title">getFilename</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.fileName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">contentLength</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">long</span> estimate = length;<br>        <span class="hljs-keyword">return</span> estimate == <span class="hljs-number">0</span>?<span class="hljs-number">1</span> :estimate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql的DateFormat函数</title>
    <link href="/ika-new-blog/2021/01/15/mysql-date-format/"/>
    <url>/ika-new-blog/2021/01/15/mysql-date-format/</url>
    
    <content type="html"><![CDATA[<p>基础语法 select DATE_FORMAT(date,format) from dual;</p><p>示例：<br>select DATE_FORMAT(now(),’%Y-%m-%d’) from dual;</p><table><thead><tr><th>占位符</th><th>返回值</th><th>示例</th></tr></thead><tbody><tr><td>%Y</td><td>4位年</td><td>2021</td></tr><tr><td>%y</td><td>2位年</td><td>21</td></tr><tr><td>%M</td><td>月英文</td><td>January</td></tr><tr><td>%m</td><td>月数值</td><td>01</td></tr><tr><td>%D</td><td>带英文的天</td><td>15th</td></tr><tr><td>%d</td><td>月的第几天(常用00-31)</td><td>09</td></tr><tr><td>%e</td><td>月的第几天(0-31)</td><td>9</td></tr><tr><td>%H</td><td>小时(00-23)</td><td>15</td></tr><tr><td>%k</td><td>小时(0-23)</td><td>3</td></tr><tr><td>%h</td><td>小时(01-12)</td><td>03</td></tr><tr><td>%p</td><td>AM&#x2F;PM</td><td>PM</td></tr><tr><td>%i</td><td>分钟</td><td>22</td></tr><tr><td>%S</td><td>秒(00-59)</td><td>02</td></tr><tr><td>%s</td><td>秒(和上面一样)</td><td>02</td></tr><tr><td>%T</td><td>时分秒(hh:mm:ss)</td><td>15:24:26</td></tr><tr><td>%r</td><td>带上下午的时分秒</td><td>04:10:10 PM</td></tr><tr><td>%j</td><td>年的第几天(001-366)</td><td>015</td></tr><tr><td>%a</td><td>英文星期缩写</td><td>Fri</td></tr><tr><td>%b</td><td>英文月名缩写</td><td>Jan</td></tr><tr><td>%U</td><td>一年的第几周(00-53),星期日是一周的第一天</td><td>02</td></tr><tr><td>%u</td><td>一年的第几周(00-53),星期一是一周的第一天</td><td>02</td></tr><tr><td>%V</td><td>一年的第几周(01-53),星期日是一周的第一天(1月1号是周五，此时得出来的值为52)</td><td>02</td></tr><tr><td>%v</td><td>一年的第几周(01-53),星期一是一周的第一天(1月1号是周五，此时得出来的值为52)</td><td>02</td></tr><tr><td>%W</td><td>星期英文名</td><td>Friday</td></tr><tr><td>%w</td><td>一周的第几天(0-6 0:星期日,6:星期六)</td><td>5</td></tr><tr><td>%X</td><td>4位年(与%V一样 2021年1月1日是周五,此时得出为2020)</td><td>2020</td></tr><tr><td>%x</td><td>4位年(与%v一样 2021年1月1日是周五,此时得出为2020)</td><td>2020</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Activiti6 加签且保留待办</title>
    <link href="/ika-new-blog/2021/01/12/activiti-addsign/"/>
    <url>/ika-new-blog/2021/01/12/activiti-addsign/</url>
    
    <content type="html"><![CDATA[<p>在一个平常且忙碌的一天，突然接收到一个需求，你们的加签不符合我们想的情况，需要可以加签多人，并且还保留操作人的待办。<br>虽说这个需求也挺合理，但开发时可就犯了难，activiti默认也没有加待办的功能啊。只能从底层的对象关系入手了。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>把上面的需求转变下，无非就是要向待办中添加人去审批。根据activiti的方式来看，无非就是把task添加到instance而已。所以只要能将task添加到instance中，并且把所有参数都弄的和原始的待办相似 就差不多完成了。</p><h2 id="实现API"><a href="#实现API" class="headerlink" title="实现API"></a>实现API</h2><p>先看到taskService里面好像有保存task的API。不过这个API看起来就太简陋了，一看就不能用。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Task task <span class="hljs-operator">=</span> taskService.newTask()<span class="hljs-comment">;</span><br>taskService.saveTask(task)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>除此之外，常用的TaskService、RuntimeService就没有啥可以用的了，只能用上功能强大的ManagementService</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">ExecutionEntityManager.createChildExecutio<span class="hljs-meta">n</span>()<br>TaskEntityManager.<span class="hljs-keyword">create</span>()<br>TaskEntityManager.<span class="hljs-keyword">insert</span>()<br></code></pre></td></tr></table></figure><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>先把需要加签的那个人的task信息查出来，然后用传入到ManagementService里做处理</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> testAddone(String taskId)&#123;<br>    <span class="hljs-keyword">Task</span> <span class="hljs-keyword">task</span> = taskService.createTaskQuery()<br>                .taskId(taskId)<br>                .includeProcessVariables()<br>                .singleResult();<br>    String processInstanceId = <span class="hljs-keyword">task</span>.getProcessInstanceId();<br>    managementService.executeCommand(<span class="hljs-keyword">new</span> AddoneTestCmd(processInstanceId,<span class="hljs-keyword">task</span>));<br>    List&lt;<span class="hljs-keyword">Task</span>&gt; afterTask = taskService.createTaskQuery()<br>    .processInstanceId(processInstanceId)<br>                .includeProcessVariables()<br>                .list();<br>    System.out.<span class="hljs-keyword">println</span>(afterTask.<span class="hljs-keyword">size</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>先找到这个task所在的ExecutionEntity与TaskEntity</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddoneTestCmd</span> implements Command&lt;<span class="hljs-type">String</span>&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> instanceId;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Task</span> task;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AddoneTestCmd</span><span class="hljs-params">(<span class="hljs-type">String</span> instanceId, <span class="hljs-built_in">Task</span> task)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.instanceId = instanceId;<br>        <span class="hljs-keyword">this</span>.task = task;<br>    &#125;<br><br>    @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">execute</span><span class="hljs-params">(CommandContext commandContext)</span> </span>&#123;<br>        ExecutionEntity executionEntity = commandContext.<span class="hljs-built_in">getExecutionEntityManager</span>()<br>                .<span class="hljs-built_in">findById</span>(task.<span class="hljs-built_in">getExecutionId</span>());<br>        TaskEntity taskEntity = commandContext.<span class="hljs-built_in">getTaskEntityManager</span>().<span class="hljs-built_in">findById</span>(task.<span class="hljs-built_in">getId</span>());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后要新建一个TaskEntity并将原来task的数据放进去最后放进去</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">@Override<br>public String execute<span class="hljs-params">(CommandContext commandContext)</span> &#123;<br>    ExecutionEntity executionEntity = <span class="hljs-keyword">command</span>Context.getExecutionEntityManager<span class="hljs-params">()</span><br>                <span class="hljs-string">.findById</span><span class="hljs-params">(task.getExecutionId()</span>);<br>    TaskEntity taskEntity = <span class="hljs-keyword">command</span>Context.getTaskEntityManager<span class="hljs-params">()</span><span class="hljs-string">.findById</span><span class="hljs-params">(task.getId()</span>);<br>    TaskEntity newTaskEntity = <span class="hljs-keyword">command</span>Context.getTaskEntityManager<span class="hljs-params">()</span><span class="hljs-string">.create</span><span class="hljs-params">()</span>;<br>    newTaskEntity.<span class="hljs-keyword">set</span>Variables<span class="hljs-params">(task.getProcessVariables()</span>);<br>    newTaskEntity.<span class="hljs-keyword">set</span>Assignee<span class="hljs-params">(&quot;admin&quot;)</span>;<br>    newTaskEntity.<span class="hljs-keyword">set</span>ProcessInstanceId<span class="hljs-params">(instanceId)</span>;<br>    newTaskEntity.<span class="hljs-keyword">set</span>Category<span class="hljs-params">(task.getCategory()</span>);<br>    newTaskEntity.<span class="hljs-keyword">set</span>Description<span class="hljs-params">(task.getDescription()</span>);<br>    newTaskEntity.<span class="hljs-keyword">set</span>Name<span class="hljs-params">(taskEntity.getName()</span>);<br>    newTaskEntity.<span class="hljs-keyword">set</span>TaskDefinitionKey<span class="hljs-params">(taskEntity.getTaskDefinitionKey()</span>);<br>    newTaskEntity.<span class="hljs-keyword">set</span>Execution<span class="hljs-params">(executionEntity)</span>;<br>    newTaskEntity.<span class="hljs-keyword">set</span>ExecutionId<span class="hljs-params">(task.getExecutionId()</span>);<br>    <span class="hljs-keyword">command</span>Context.getTaskEntityManager<span class="hljs-params">()</span><span class="hljs-string">.insert</span><span class="hljs-params">(newTaskEntity, executionEntity)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这看起来不错，task也加进去了，再次查看时候参数也都差不多在。<br>正当高兴的时候，我点击了下同意，芜湖，果不其然报错了。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">org.activiti.engine.ActivitiException: </span>UserTask <span class="hljs-keyword">should </span>not <span class="hljs-keyword">be </span>signalled <span class="hljs-keyword">before </span>complete<br></code></pre></td></tr></table></figure><p>在找到底层的代码后，发现是complete的时候需要遍历这个流程的task，看里面的各种标志位是否都正确。<br>仔细看了一圈之后，也不知道咋改，只能再想想哪里出错了。<br>后来发现流程里面有3个变量nrOfInstances、nrOfActiveInstances、nrOfCompletedInstances  分别代表这条实例的任务总数、未完成任务数、已完成任务数。<br>把task添加进去的时候 这些变量不会自动加，那就手动修改下。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs erlang">Integer <span class="hljs-keyword">begin</span>NrofInstance = (Integer) executionEntity.getVariable(<span class="hljs-string">&quot;nrOfInstances&quot;</span>);<br>Integer <span class="hljs-keyword">begin</span>NrOfActiveInstances = (Integer) executionEntity.getVariable(<span class="hljs-string">&quot;nrOfActiveInstances&quot;</span>);<br>executionEntity.setVariable(<span class="hljs-string">&quot;nrOfInstances&quot;</span>, <span class="hljs-keyword">begin</span>NrofInstance + <span class="hljs-number">1</span>);<br>executionEntity.setVariable(<span class="hljs-string">&quot;nrOfActiveInstances&quot;</span>, <span class="hljs-keyword">begin</span>NrOfActiveInstances + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>然而，还是不行，依旧是上面的错误。看起来并不是这个变量的问题，不过这个变量修改确实是需要的。<br>这时，突然发现其实一个instance里面 每个task的executionId都是不同的，而我按上面的操作后，新生成的executionId和原来传入的task相同了。于是我就明白了，应该新生成一个ExecutionEntity才对。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">ExecutionEntity parentExecutionEntry = executionEntity.getParent<span class="hljs-params">()</span>;<br>ExecutionEntity newChildExecution = <span class="hljs-keyword">command</span>Context.getExecutionEntityManager<span class="hljs-params">()</span><span class="hljs-string">.createChildExecution</span><span class="hljs-params">(parentExecutionEntry)</span>;<br><span class="hljs-keyword">command</span>Context.getTaskEntityManager<span class="hljs-params">()</span><span class="hljs-string">.insert</span><span class="hljs-params">(newTaskEntity, newChildExecution)</span>;<br></code></pre></td></tr></table></figure><p>好家伙，这一通操作下来看起来应该是可以了。在页面点了一下同意，咔 又报错了，不过这次错误变了，说明有戏</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">org.activiti.engine.ActivitiException: Programmatic error: <span class="hljs-keyword">no</span> <span class="hljs-keyword">current</span> flow element <span class="hljs-built_in">found</span> <span class="hljs-keyword">or</span> invalid <span class="hljs-keyword">type</span>: <span class="hljs-keyword">null</span>. Halting.<br></code></pre></td></tr></table></figure><p>看起来像没有CurrentFlowElement，那好 就添加一个CurrentFlowElement。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">newChildExecution.setCurrentFlowElement(executionEntity.getCurrentFlowElement())<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>最终，基础的功能实现了。</p><h2 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">testAddone</span><span class="hljs-params">(<span class="hljs-type">String</span> taskId)</span></span>&#123;<br>    <span class="hljs-built_in">Task</span> task = taskService.<span class="hljs-built_in">createTaskQuery</span>()<br>                .<span class="hljs-built_in">taskId</span>(taskId)<br>                .<span class="hljs-built_in">includeProcessVariables</span>()<br>                .<span class="hljs-built_in">singleResult</span>();<br>    <span class="hljs-type">String</span> processInstanceId = task.<span class="hljs-built_in">getProcessInstanceId</span>();<br>    managementService.<span class="hljs-built_in">executeCommand</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">AddoneTestCmd</span>(processInstanceId,task));<br>    List&lt;<span class="hljs-built_in">Task</span>&gt; afterTask = taskService.<span class="hljs-built_in">createTaskQuery</span>()<br>    .<span class="hljs-built_in">processInstanceId</span>(processInstanceId)<br>                .<span class="hljs-built_in">includeProcessVariables</span>()<br>                .<span class="hljs-built_in">list</span>();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddoneTestCmd</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span>&lt;String&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> String instanceId;<br><br>    <span class="hljs-keyword">private</span> Task task;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AddoneTestCmd</span><span class="hljs-params">(String instanceId, Task task)</span> &#123;<br>        <span class="hljs-built_in">this</span>.instanceId = instanceId;<br>        <span class="hljs-built_in">this</span>.task = task;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">execute</span><span class="hljs-params">(CommandContext commandContext)</span> &#123;<br>        <span class="hljs-type">ExecutionEntity</span> <span class="hljs-variable">executionEntity</span> <span class="hljs-operator">=</span> commandContext.getExecutionEntityManager()<br>                .findById(task.getExecutionId());<br>        <span class="hljs-type">ExecutionEntity</span> <span class="hljs-variable">parentExecutionEntry</span> <span class="hljs-operator">=</span> executionEntity.getParent();<br>        <span class="hljs-type">ExecutionEntity</span> <span class="hljs-variable">newChildExecution</span> <span class="hljs-operator">=</span> commandContext.getExecutionEntityManager().createChildExecution(parentExecutionEntry);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">beginNrofInstance</span> <span class="hljs-operator">=</span> (Integer) newChildExecution.getVariable(<span class="hljs-string">&quot;nrOfInstances&quot;</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">beginNrOfActiveInstances</span> <span class="hljs-operator">=</span> (Integer) newChildExecution.getVariable(<span class="hljs-string">&quot;nrOfActiveInstances&quot;</span>);<br>        newChildExecution.setCurrentFlowElement(executionEntity.getCurrentFlowElement());<br>        <span class="hljs-type">TaskEntity</span> <span class="hljs-variable">taskEntity</span> <span class="hljs-operator">=</span> commandContext.getTaskEntityManager().findById(task.getId());<br>        <span class="hljs-type">TaskEntity</span> <span class="hljs-variable">newTaskEntity</span> <span class="hljs-operator">=</span> commandContext.getTaskEntityManager().create();<br>        newTaskEntity.setVariables(task.getProcessVariables());<br>        newTaskEntity.setAssignee(<span class="hljs-string">&quot;admin&quot;</span>);<br>        newTaskEntity.setProcessInstanceId(instanceId);<br>        newTaskEntity.setCategory(task.getCategory());<br>        newTaskEntity.setDescription(task.getDescription());<br>        newTaskEntity.setName(taskEntity.getName());<br>        newTaskEntity.setTaskDefinitionKey(taskEntity.getTaskDefinitionKey());<br><br>        commandContext.getTaskEntityManager().insert(newTaskEntity, newChildExecution);<br>        newChildExecution.setVariable(<span class="hljs-string">&quot;nrOfInstances&quot;</span>, beginNrofInstance + <span class="hljs-number">1</span>);<br>        newChildExecution.setVariable(<span class="hljs-string">&quot;nrOfActiveInstances&quot;</span>, beginNrOfActiveInstances + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java8之HashMap</title>
    <link href="/ika-new-blog/2020/08/09/hello-world/"/>
    <url>/ika-new-blog/2020/08/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>HashMap作为Java编程中一种常用的数据结构，虽然我们每天都用，但还是有许多有趣的地方需要深究一下。</p><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><p>在我经历的几个项目上，HashMap的容量几乎被所有开发人员都忽略了，虽然HashMap会根据实际使用情况扩容，但容量规划不好，还是有可能会发生意想不到的情况。</p><h3 id="初始容量"><a href="#初始容量" class="headerlink" title="初始容量"></a>初始容量</h3><p>HashMap在创建时会赋予一个初始的容量，我们可以通过构造器来指定大小，或者使用默认大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个默认容量(16)的HashMap</span><br>Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-comment">// 创建一个容量为8的HashMap</span><br>Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">8</span>);<br><br><span class="hljs-comment">// 创建一个容量为4的HashMap</span><br>Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>这里你会发现我指定容量为3，但注释写的是4。<br>没错，HashMap的容量一定是2的n次方，所以当不足2的n次方时，会补足到2的n次方。</p><h3 id="容量扩充"><a href="#容量扩充" class="headerlink" title="容量扩充"></a>容量扩充</h3><p>HashMap当容量到达一定的阈值时会自动扩充容量，以保存更多的数据。同样的每次会扩充2倍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">4</span>);<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>);<br>map.put(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>map.put(<span class="hljs-number">8</span>,<span class="hljs-number">8</span>);<br>map.put(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>);<br>map.put(<span class="hljs-number">9</span>,<span class="hljs-number">5</span>);<br>Class&lt;?&gt; mapType = map.getClass();<br><span class="hljs-type">Method</span> <span class="hljs-variable">capacity</span> <span class="hljs-operator">=</span> mapType.getDeclaredMethod(<span class="hljs-string">&quot;capacity&quot;</span>);<br>capacity.setAccessible(<span class="hljs-literal">true</span>);<br>System.out.printf(<span class="hljs-string">&quot;capacity: %s&quot;</span>,capacity.invoke(map));<br><br><span class="hljs-comment">// capacity: 8</span><br></code></pre></td></tr></table></figure><p>HashMap的扩充策略是到达一个阈值就会扩充，而这个阈值默认是0.75倍的capacity，我们也可以通过构造函数修改这个比例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这个是HashMap的默认阈值</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">DEFAULT_LOAD_FACTOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.75f</span>;<br><span class="hljs-comment">// 手动指定阈值</span><br>Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">4</span>,<span class="hljs-number">0.8f</span>);<br></code></pre></td></tr></table></figure><h2 id="存储原理"><a href="#存储原理" class="headerlink" title="存储原理"></a>存储原理</h2><p>太多了 不愿意写，网上有很多，自己找吧。</p><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p>Java8中因为加入的lambda表达式，多了几个API供开发者使用</p><h3 id="compute"><a href="#compute" class="headerlink" title="compute"></a>compute</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//对传入key的这对键值对进行计算处理，返回值会赋予到value上</span><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">compute</span><span class="hljs-params">(K key,BiFunction&lt;? <span class="hljs-built_in">super</span> K, ? <span class="hljs-built_in">super</span> V, ? extends V&gt; remappingFunction)</span>;<br><br><span class="hljs-comment">// 例:</span><br>HashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>map.compute(<span class="hljs-number">3</span>,(k,v)-&gt; k+v);<br>System.out.println(map);<br><br><span class="hljs-comment">// &#123;3=7&#125;</span><br></code></pre></td></tr></table></figure><h3 id="computeIfAbsent"><a href="#computeIfAbsent" class="headerlink" title="computeIfAbsent"></a>computeIfAbsent</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 对传入key的，如果不存在则执行函数，并将返回值存入这对key,value中</span><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">computeIfAbsent</span><span class="hljs-params">(K key,Function&lt;? <span class="hljs-built_in">super</span> K, ? extends V&gt; mappingFunction)</span>;<br><br><span class="hljs-comment">//例:</span><br>HashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>map.computeIfAbsent(<span class="hljs-number">4</span>,k-&gt; <span class="hljs-number">5</span>);<br>System.out.println(map);<br><br><span class="hljs-comment">// &#123;3=4, 4=5&#125;</span><br></code></pre></td></tr></table></figure><h3 id="computeIfPresent"><a href="#computeIfPresent" class="headerlink" title="computeIfPresent"></a>computeIfPresent</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 对传入key的，如果存在则执行函数，并将返回值存入value中</span><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">computeIfPresent</span><span class="hljs-params">(K key,BiFunction&lt;? <span class="hljs-built_in">super</span> K, ? <span class="hljs-built_in">super</span> V, ? extends V&gt; remappingFunction)</span>;<br><span class="hljs-comment">// 例:</span><br>HashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>map.computeIfPresent(<span class="hljs-number">3</span>,(k,v)-&gt; ++v); <span class="hljs-comment">//如果3存在 则执行 并将返回值存入3中</span><br>System.out.println(map);<br><br><span class="hljs-comment">// &#123;3=5&#125;</span><br></code></pre></td></tr></table></figure><h3 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll"></a>replaceAll</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 会替换所有key的value替换为函数的返回值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">replaceAll</span><span class="hljs-params">(BiFunction&lt;? <span class="hljs-built_in">super</span> K, ? <span class="hljs-built_in">super</span> V, ? extends V&gt; function)</span>;<br><br><span class="hljs-comment">// 例:</span><br>HashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>map.computeIfAbsent(<span class="hljs-number">4</span>,k-&gt; <span class="hljs-number">5</span>);<span class="hljs-comment">//如果不存在 则将函数返回值存入key为4中</span><br>map.replaceAll((k,v) -&gt; k==<span class="hljs-number">3</span> ? <span class="hljs-number">999</span>: <span class="hljs-number">0</span>);<br>System.out.println(map);<br><br><span class="hljs-comment">// &#123;3=999, 4=0&#125;</span><br></code></pre></td></tr></table></figure><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>LinkedHashMap继承了HashMap，区别在与其在HashMap的基础上维护了一个双向链表，来保证插入和遍历的顺序。</p><h3 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h3><p>LinkedHashMap和HashMap使用方式都一样，唯一的区别就在与遍历时的顺序。HashMap会根据hash值再经过一系列运算进行存储，所以顺序不能保证。但LinkedHashMap的遍历顺序会和插入的顺序相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">LinkedHashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>map.put(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br>map.put(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>map.put(<span class="hljs-number">9</span>,<span class="hljs-number">10</span>);<br>map.put(<span class="hljs-number">8</span>,<span class="hljs-number">9</span>);<br>System.out.println(map);<br><br><span class="hljs-comment">// &#123;3=4, 5=6, 2=3, 9=10, 8=9&#125;</span><br></code></pre></td></tr></table></figure><p>但是在重新put后不会改变他的顺序,但remove后再put会改变顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">LinkedHashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>map.put(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br>map.put(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>map.put(<span class="hljs-number">9</span>,<span class="hljs-number">10</span>);<br>map.put(<span class="hljs-number">8</span>,<span class="hljs-number">9</span>);<br>map.put(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>);<br>System.out.println(map);<br>        <br><span class="hljs-comment">// &#123;3=4, 5=6, 2=4, 9=10, 8=9&#125;</span><br>map.remove(<span class="hljs-number">9</span>);<br>map.put(<span class="hljs-number">9</span>,<span class="hljs-number">11</span>);<br><span class="hljs-comment">// &#123;3=4, 5=6, 2=4, 8=9, 9=11&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>openfeign调用excel导出接口</title>
    <link href="/ika-new-blog/2019/02/21/feign-excel/"/>
    <url>/ika-new-blog/2019/02/21/feign-excel/</url>
    
    <content type="html"><![CDATA[<h3 id="1-常见的excel导出核心方式"><a href="#1-常见的excel导出核心方式" class="headerlink" title="1.常见的excel导出核心方式"></a>1.常见的excel导出核心方式</h3><p>excel导出在企业应用中比较常见的.<br>我们一般都是把接口的 <strong>header</strong> 的 <strong>“ContentType”</strong> 置为 <strong>“application&#x2F;octet-stream”</strong>，<br>将 <strong>“Content-Disposition”</strong> 置为 <strong>“attachment;filename&#x3D;${fileName}”</strong><br>之后我们将excel的流写入 <strong>response</strong> 的 <strong>outputstream</strong> 中，代码逻辑大体如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这是被调用方(服务提供方)的excel导出接口。(这里excel导出被高度封装，请自行编写excel导出逻辑)</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/export&quot;, method = RequestMethod.GET)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">export</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    sw.buildQuery()<br>            .exclude(<span class="hljs-string">&quot;staffFlag&quot;</span>)<br>            .fileName(<span class="hljs-string">&quot;controller.xlsx&quot;</span>)<br>            .doExport(response, Staff.class);<br>&#125;<br><br><span class="hljs-comment">//其中 doExport函数</span><br><span class="hljs-keyword">public</span> MpaasQuery <span class="hljs-title function_">doExport</span><span class="hljs-params">(HttpServletResponse response, Class pojo)</span> &#123;<br>    response.setContentType(<span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-built_in">this</span>.excelFileName.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>), <span class="hljs-string">&quot;ISO8859_1&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + f);<br>        <span class="hljs-built_in">this</span>.doExport((OutputStream)response.getOutputStream(), pojo);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception var4) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MpaasRuntimeException</span>(var4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-openfeign如何调用excel导出的接口"><a href="#2-openfeign如何调用excel导出的接口" class="headerlink" title="2.openfeign如何调用excel导出的接口"></a>2.openfeign如何调用excel导出的接口</h3><p>而在 <strong>openfeign</strong> 中，调用excel导出接口不能像普通接口一样输入输出参数保持相同，我们需要得到 <strong>excel</strong> 的字节流，所以调用方的代码如下所示</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//使用feign来调用已经写好的excel导出接口</span><br><span class="hljs-meta">@FeignClient(name = <span class="hljs-string">&quot;staff&quot;</span>,url = <span class="hljs-string">&quot;http://localhost:8080/controller&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TestFeign</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(value = <span class="hljs-string">&quot;/export&quot;</span>, method = RequestMethod.GET)</span><br>    <span class="hljs-keyword">public</span> byte[] export();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-最终暴露出来的接口"><a href="#3-最终暴露出来的接口" class="headerlink" title="3.最终暴露出来的接口"></a>3.最终暴露出来的接口</h3><p>最后，我们在调用这个feign层的函数时候需要重新设置response的 <strong>“ContentType”</strong> 和 <strong>“Content-Disposition”</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">//最终在我们系统中的接口</span><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/feignexport&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">health</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    response.setContentType(<span class="hljs-string">&quot;application/octet-stream&quot;</span>);<br>    response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=controller.xlsx&quot;</span>);<br>    response.getOutputStream().write(testFeign.export());<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
